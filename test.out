[H[2JJavaScript debugger enabled
FAILED: (test/run/t47.py)
-----
def test(y='K',x='Z'): print(x+y)
test('O')

-----
GOT:
-----
EXCEPTION: NameError: name 'x' is not defined on line 1

-----
WANTED:
-----
ZO

-----
DIFF:
-----
len got: 56

len wanted: 3

firstdiff at: 0 got: 69 (EXCEPTION: NameError: name 'x' is not defined on line 1
) expect: 90 (ZO
)
FAILED: (test/run/t144.py)
-----
class C:
    def __init__(self, data):
        self.data = data
    def pr(self):
        print self.data
C("OK").pr()

-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes exactly 2 arguments (5 given) on line 6

-----
WANTED:
-----
OK

-----
DIFF:
-----
len got: 79

len wanted: 3

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: __init__() takes exactly 2 arguments (5 given) on line 6
) expect: 79 (OK
)
FAILED: (test/run/t147.py)
-----
class A:
    def __init__(self):
        print "at0"
        self.a = 'O'
        self.b = 'x'
    def test(self):
        print "KO"
class B(A):
    def __init__(self):
        print "at1"
        A.__init__(self)
        self.b = 'K'
    def test(self):
        print self.a + self.b
print "at2"
B().test()
print "at3"

-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes exactly 1 arguments (5 given) on line 16

-----
WANTED:
-----
at2
at1
at0
OK
at3

-----
DIFF:
-----
len got: 80

len wanted: 19

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: __init__() takes exactly 1 arguments (5 given) on line 16
) expect: 97 (at2
at1
at0
OK
at3
)
FAILED: (test/run/t148.py)
-----
class Test:
    def __init__(self, v):
        self.value = v
    def __call__(self):
        print self.value
x = Test('OK')
x()

-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes exactly 2 arguments (5 given) on line 6

-----
WANTED:
-----
OK

-----
DIFF:
-----
len got: 79

len wanted: 3

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: __init__() takes exactly 2 arguments (5 given) on line 6
) expect: 79 (OK
)
FAILED: (test/run/t185.py)
-----
class Wee:
    def __init__(self):
        self.called = False
    def __iter__(self):
        return self
    def next(self):
        print "in next"
        if not self.called:
            self.called = True
            return "dog"
        raise StopIteration

for i in Wee():
    print i

-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes exactly 1 arguments (5 given) on line 13

-----
WANTED:
-----
in next
dog
in next

-----
DIFF:
-----
len got: 80

len wanted: 20

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: __init__() takes exactly 1 arguments (5 given) on line 13
) expect: 105 (in next
dog
in next
)
FAILED: (test/run/t195.py)
-----
def foo(value = None):
    for i in [-1,0,1,2,3,4]:
        if i < 0:
            continue
        elif i == 0:
            yield 0
        elif i == 1:
            yield 1
            yield value
            yield 2
        else:
            yield i
print list(foo())

-----
GOT:
-----
EXCEPTION: ReferenceError

-----
WANTED:
-----
[0, 1, None, 2, 2, 3, 4]

-----
DIFF:
-----
len got: 26

len wanted: 25

firstdiff at: 0 got: 69 (EXCEPTION: ReferenceError
) expect: 91 ([0, 1, None, 2, 2, 3, 4]
)
FAILED: (test/run/t206.py)
-----
class Stuff:
    def __init__(self):
        self.a = 0
        self.b = 'b'
        self.c = [1,2,3]
        self.d = 100000000000000

s = Stuff()
s.a += 10
s.b += 'dog'
s.c += [9,10]
s.d += 10000

print s.a
print s.b
print s.c
print s.d

-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes exactly 1 arguments (5 given) on line 8

-----
WANTED:
-----
10
bdog
[1, 2, 3, 9, 10]
100000000010000

-----
DIFF:
-----
len got: 79

len wanted: 41

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: __init__() takes exactly 1 arguments (5 given) on line 8
) expect: 49 (10
bdog
[1, 2, 3, 9, 10]
100000000010000
)
FAILED: (test/run/t207.py)
-----
class Stuff:
    def __init__(self):
        self.a = 0
        self.b = 'b'
        self.c = [1,2,3]
        self.d = 100000000000000
    def doit(self):
        self.a += 10
        self.b += 'dog'
        self.c += [9,10]
        self.d += 10000

s = Stuff()
s.doit()

print s.a
print s.b
print s.c
print s.d

-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes exactly 1 arguments (5 given) on line 13

-----
WANTED:
-----
10
bdog
[1, 2, 3, 9, 10]
100000000010000

-----
DIFF:
-----
len got: 80

len wanted: 41

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: __init__() takes exactly 1 arguments (5 given) on line 13
) expect: 49 (10
bdog
[1, 2, 3, 9, 10]
100000000010000
)
FAILED: (test/run/t209.py)
-----
class X:
    def __init__(self):
        self.px = 3
    def y(self):
        l = "xyz"
        if len(l) == self.px:
            print "OK"
x = X()
x.y()

-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes exactly 1 arguments (5 given) on line 8

-----
WANTED:
-----
OK

-----
DIFF:
-----
len got: 79

len wanted: 3

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: __init__() takes exactly 1 arguments (5 given) on line 8
) expect: 79 (OK
)
FAILED: (test/run/t210.py)
-----
class Stuff:
    def __init__(self):
        print "OK"
    """
    weewaa

    """
Stuff()

-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes exactly 1 arguments (5 given) on line 8

-----
WANTED:
-----
OK

-----
DIFF:
-----
len got: 79

len wanted: 3

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: __init__() takes exactly 1 arguments (5 given) on line 8
) expect: 79 (OK
)
FAILED: (test/run/t211.py)
-----
class Stuff:
    def __init__(self):
        self.x = lambda: self.things()
    def things(self):
        print "OK"
y = Stuff()
y.x()

-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes exactly 1 arguments (5 given) on line 6

-----
WANTED:
-----
OK

-----
DIFF:
-----
len got: 79

len wanted: 3

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: __init__() takes exactly 1 arguments (5 given) on line 6
) expect: 79 (OK
)
FAILED: (test/run/t212.py)
-----
class Stuff:
    def __init__(self):
        self.modes = {
                'wee': self.things
                }
        self.modes['wee']()
    def things(self):
        print "OK"
Stuff()

-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes exactly 1 arguments (5 given) on line 9

-----
WANTED:
-----
OK

-----
DIFF:
-----
len got: 79

len wanted: 3

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: __init__() takes exactly 1 arguments (5 given) on line 9
) expect: 79 (OK
)
FAILED: (test/run/t213.py)
-----
def wee(waa, woo=True, wii=False):
    print waa, woo, wii
wee("OK")

-----
GOT:
-----
EXCEPTION: NameError: name 'woo' is not defined on line 2

-----
WANTED:
-----
OK True False

-----
DIFF:
-----
len got: 58

len wanted: 14

firstdiff at: 0 got: 69 (EXCEPTION: NameError: name 'woo' is not defined on line 2
) expect: 79 (OK True False
)
FAILED: (test/run/t214.py)
-----
def wee(waa, woo=False, wii=True):
    print "OK", waa, woo, wii

wee("stuff")
wee("stuff", "dog")
wee("stuff", "dog", "cat")
wee("stuff", wii="lamma")
wee(wii="lamma", waa="pocky")
wee(wii="lamma", waa="pocky", woo="blorp")

-----
GOT:
-----
EXCEPTION: NameError: name 'woo' is not defined on line 2

-----
WANTED:
-----
OK stuff False True
OK stuff dog True
OK stuff dog cat
OK stuff False lamma
OK pocky False lamma
OK pocky blorp lamma

-----
DIFF:
-----
len got: 58

len wanted: 118

firstdiff at: 0 got: 69 (EXCEPTION: NameError: name 'woo' is not defined on line 2
) expect: 79 (OK stuff False True
OK stuff dog True
OK stuff dog cat
OK stuff False lamma
OK pocky False lamma
OK pocky blorp lamma
)
FAILED: (test/run/t215.py)
-----
wee = lambda waa, woo=False, wii=True: ("OK", waa, woo, wii)

print wee("stuff")
print wee("stuff", "dog")
print wee("stuff", "dog", "cat")
print wee("stuff", wii="lamma")
print wee(wii="lamma", waa="pocky")
print wee(wii="lamma", waa="pocky", woo="blorp")

-----
GOT:
-----
EXCEPTION: NameError: name 'woo' is not defined on line 3

-----
WANTED:
-----
('OK', 'stuff', False, True)
('OK', 'stuff', 'dog', True)
('OK', 'stuff', 'dog', 'cat')
('OK', 'stuff', False, 'lamma')
('OK', 'pocky', False, 'lamma')
('OK', 'pocky', 'blorp', 'lamma')

-----
DIFF:
-----
len got: 58

len wanted: 186

firstdiff at: 0 got: 69 (EXCEPTION: NameError: name 'woo' is not defined on line 3
) expect: 40 (('OK', 'stuff', False, True)
('OK', 'stuff', 'dog', True)
('OK', 'stuff', 'dog', 'cat')
('OK', 'stuff', False, 'lamma')
('OK', 'pocky', False, 'lamma')
('OK', 'pocky', 'blorp', 'lamma')
)
FAILED: (test/run/t216.py)
-----
class Stuff:
    def __init__(self):
        def tmp():
            self.things()
        self.x = tmp
    def things(self):
        print "OK"
y = Stuff()
y.x()

-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes exactly 1 arguments (5 given) on line 8

-----
WANTED:
-----
OK

-----
DIFF:
-----
len got: 79

len wanted: 3

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: __init__() takes exactly 1 arguments (5 given) on line 8
) expect: 79 (OK
)
FAILED: (test/run/t218.py)
-----
class X:
    def __init__(self):
        print "wee"
x = X()
print repr(x)

-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes exactly 1 arguments (5 given) on line 4

-----
WANTED:
-----
wee
<__main__.X object>

-----
DIFF:
-----
len got: 79

len wanted: 24

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: __init__() takes exactly 1 arguments (5 given) on line 4
) expect: 119 (wee
<__main__.X object>
)
FAILED: (test/run/t280.py)
-----
def f(*a):
    print a

def g(x, *a):
    print x, a

def h(x, y, *a):
    print x, y, a

def i(x, y=4, *a):
    print x, y, a

f()
f(1)
f(1, 2, 3)
g(1)
g(1, 2, 3)
h(1, 2)
h(1, 2, 3)
h(1, 2, 3, 4)
i(1)
i(1, 2, 3)
i(1, 2, 3, 4)

-----
GOT:
-----
EXCEPTION: NameError: name 'y' is not defined on line 11

-----
WANTED:
-----
()
(1,)
(1, 2, 3)
1 ()
1 (2, 3)
1 2 ()
1 2 (3,)
1 2 (3, 4)
1 4 ()
1 2 (3,)
1 2 (3, 4)

-----
DIFF:
-----
len got: 57

len wanted: 86

firstdiff at: 0 got: 69 (EXCEPTION: NameError: name 'y' is not defined on line 11
) expect: 40 (()
(1,)
(1, 2, 3)
1 ()
1 (2, 3)
1 2 ()
1 2 (3,)
1 2 (3, 4)
1 4 ()
1 2 (3,)
1 2 (3, 4)
)
FAILED: (test/run/t285.py)
-----
def f(a,b,c=10,d=20,*e,**f):
    sortf = [(x,y) for x,y in f.items()]
    sortf.sort()
    print a,b,c,d,e,sortf

f(1,2)
f(1,2,3)
f(1,2,3,5)
f(1,2,d=3,c=5)
f(1,2,e=['x','y','z'])
f(1,2,d=3,c=5,e=['x','y','z'])
f(1,2,3,5,['x','y','z'])
f(1,2,3,5,['x','y','z'],z=5,y=9)
f(1,2,3,5,['x','y','z'],'blorp','wee',z=5,y=9)

-----
GOT:
-----
EXCEPTION: NameError: name 'c' is not defined on line 4

-----
WANTED:
-----
1 2 10 20 () []
1 2 3 20 () []
1 2 3 5 () []
1 2 5 3 () []
1 2 10 20 () [('e', ['x', 'y', 'z'])]
1 2 5 3 () [('e', ['x', 'y', 'z'])]
1 2 3 5 (['x', 'y', 'z'],) []
1 2 3 5 (['x', 'y', 'z'],) [('y', 9), ('z', 5)]
1 2 3 5 (['x', 'y', 'z'], 'blorp', 'wee') [('y', 9), ('z', 5)]

-----
DIFF:
-----
len got: 56

len wanted: 274

firstdiff at: 0 got: 69 (EXCEPTION: NameError: name 'c' is not defined on line 4
) expect: 49 (1 2 10 20 () []
1 2 3 20 () []
1 2 3 5 () []
1 2 5 3 () []
1 2 10 20 () [('e', ['x', 'y', 'z'])]
1 2 5 3 () [('e', ['x', 'y', 'z'])]
1 2 3 5 (['x', 'y', 'z'],) []
1 2 3 5 (['x', 'y', 'z'],) [('y', 9), ('z', 5)]
1 2 3 5 (['x', 'y', 'z'], 'blorp', 'wee') [('y', 9), ('z', 5)]
)
FAILED: (test/run/t315.py)
-----
def default_outside(x=[]):
    return x

a = default_outside()
a.append(1)
print a
b = default_outside()
b.append(2)
print b

-----
GOT:
-----
EXCEPTION: NameError: name 'x' is not defined on line 2

-----
WANTED:
-----
[1]
[1, 2]

-----
DIFF:
-----
len got: 56

len wanted: 11

firstdiff at: 0 got: 69 (EXCEPTION: NameError: name 'x' is not defined on line 2
) expect: 91 ([1]
[1, 2]
)
FAILED: (test/run/t317.py)
-----
class Point:
    def __init__(self, initX, initY):
        self.x = initX
        self.y = initY

    def __str__(self):
        return str(self.x) + "," + str(self.y)


p = Point(1,2)

print(p)
print str(p)

-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes exactly 3 arguments (5 given) on line 10

-----
WANTED:
-----
1,2
1,2

-----
DIFF:
-----
len got: 80

len wanted: 8

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: __init__() takes exactly 3 arguments (5 given) on line 10
) expect: 49 (1,2
1,2
)
FAILED: (test/run/t322.py)
-----
print(int('0x13',16))
print(int('0x13',0))
print(int('0b0110',0))
print(int(3.2))


def foo(y='K', x='Z'): 
    print(x+y)
    
foo(x='P')

-----
GOT:
-----
EXCEPTION: NameError: name 'y' is not defined on line 8

-----
WANTED:
-----
19
19
6
3
PK

-----
DIFF:
-----
len got: 56

len wanted: 13

firstdiff at: 0 got: 69 (EXCEPTION: NameError: name 'y' is not defined on line 8
) expect: 49 (19
19
6
3
PK
)
FAILED: (test/run/t323.py)
-----
class Foo:

    def __init__(self, arg):
        self.x = None

    def __getitem__(self,key):
        return self.x

x = Foo(5)
print x[1]

-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes exactly 2 arguments (5 given) on line 9

-----
WANTED:
-----
None

-----
DIFF:
-----
len got: 79

len wanted: 5

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: __init__() takes exactly 2 arguments (5 given) on line 9
) expect: 78 (None
)
FAILED: (test/run/t335.py)
-----
print "----Start 01"
try:
    print "First try"
    try:
        print "Second try - should see Second except next"
        i = int('badint');
        print "Second try - should not see this"
    except:
        print "Second except"
    print "First try - should see First except next"
    i = float('otherbadint')
    print "First try - should not see this"
except:
    print "First except"
print "----End 01"

print "----Start 02"
try:
    print "First try"
    try:
        print "Second try"
    except:
        print "Second except - should not see this"
    print "First try - should see First except next"
    i = float('otherbadint')
    print "First try - should not see this"
except:
    print "First except"
print "----End 02"

print "----Start 03"
try:
    print "First try"
    try:
        print "Second try"
    except:
        print "Second except - should not see this"
    print "First try - after inner try"
except:
    print "First except - should not see this"
print "----End 03"

print "----Start 04"
try:
    print "First try - shuold see First Except next"
    i = int('first');
    print "First try - should not see this"
except:
    print "First except"
    try:
        print "Second try - should see Second except next"
        i = int('badint');
        print "Second try - should not see this"
    except:
        print "Second except"
    print "First except - After inner try/except"
print "----End 04"

print "----Start 05"
try:
    print "First try"
    try:
        print "Second try - should see Second except next"
        i = int('badint');
        print "Second try - should not see this"
    except:
        print "Second except - should see First except next"
        i = float('otherbadint')
        print "Second except - should not see this"
    print "First try - should not see this"
except:
    print "First except"
print "----End 05"

print "----Start 06"
try:
    print "First try"
    if 123 < 12345 :
        if 456 < 4567 :
            print "You should see this"
        else:
            print "You should not see this (inner)"
    else:
        print "You should not see this"
    print "First try - near the end"
except:
    print "First except - should not see this"
print "----End 06"

print "----Start 07"
try:
    print "First try"
    if 123 < 12345 :
        if 456 < 4567 :
            print "Next you should see First except"
            i = int('badint')
        else:
            print "You should not see this (inner)"
    else:
        print "You should not see this"
    print "First try - near the end - you should not see this"
except:
    print "First except - should see this"
print "----End 07"


-----
GOT:
-----
EXCEPTION: SyntaxError

-----
WANTED:
-----
----Start 01
First try
Second try - should see Second except next
Second except
First try - should see First except next
First except
----End 01
----Start 02
First try
Second try
First try - should see First except next
First except
----End 02
----Start 03
First try
Second try
First try - after inner try
----End 03
----Start 04
First try - shuold see First Except next
First except
Second try - should see Second except next
Second except
First except - After inner try/except
----End 04
----Start 05
First try
Second try - should see Second except next
Second except - should see First except next
First except
----End 05
----Start 06
First try
You should see this
First try - near the end
----End 06
----Start 07
First try
Next you should see First except
First except - should see this
----End 07

-----
DIFF:
-----
len got: 23

len wanted: 802

firstdiff at: 0 got: 69 (EXCEPTION: SyntaxError
) expect: 45 (----Start 01
First try
Second try - should see Second except next
Second except
First try - should see First except next
First except
----End 01
----Start 02
First try
Second try
First try - should see First except next
First except
----End 02
----Start 03
First try
Second try
First try - after inner try
----End 03
----Start 04
First try - shuold see First Except next
First except
Second try - should see Second except next
Second except
First except - After inner try/except
----End 04
----Start 05
First try
Second try - should see Second except next
Second except - should see First except next
First except
----End 05
----Start 06
First try
You should see this
First try - near the end
----End 06
----Start 07
First try
Next you should see First except
First except - should see this
----End 07
)
FAILED: (test/run/t336.py)
-----
def test(i):
    f = 3
    try:
        return f == 5
    except ValueError:
        return True

if test(12) :
    print "Is true"
else:
    print "Is false"



-----
GOT:
-----
EXCEPTION: SyntaxError

-----
WANTED:
-----
Is false

-----
DIFF:
-----
len got: 23

len wanted: 9

firstdiff at: 0 got: 69 (EXCEPTION: SyntaxError
) expect: 73 (Is false
)
FAILED: (test/run/t340.py)
-----
import re

m = re.match('([0-9]+)([a-z]+)','345abu')
print m.groups()
print m.group(0)
print m.group(1)
print m.group(2)

-----
GOT:
-----
EXCEPTION: TypeError

-----
WANTED:
-----
('345', 'abu')
345abu
345
abu

-----
DIFF:
-----
len got: 21

len wanted: 30

firstdiff at: 0 got: 69 (EXCEPTION: TypeError
) expect: 40 (('345', 'abu')
345abu
345
abu
)
FAILED: (test/run/t343.py)
-----
print "Big number test"

v=[1,1.0,1L,-1,-1.0,-1L,2,2.0,2L,-2,-2.0,-2L,1e9,-1e9,1e-9,-1e-9,123456789L,12345678901234567890123456789L]
#v=[2,2.0,2L,-2,-2.0,-2L,123456789L,12345678901234567890123456789L]
o=['+','-','*','/','**','%','<','=','>','<=','!=','>=']

def oper(v1, v2, op):
    if (op == '+'):
        print "              ",v1,op,v2,"=",v1+v2,type(v1+v2)
    elif (op == '-'):
        print "              ",v1,op,v2,"=",v1-v2,type(v1-v2)
    elif (op == '*'):
        print "              ",v1,op,v2,"=",v1*v2,type(v1*v2)
    elif (op == '/'):
        print "              ",v1,op,v2,"=",v1/v2,type(v1/v2)
    elif (op == '**'):
        if v2 >  100000000:
            print 'skipping pow of really big number'
            return
        print "              ",v1,op,v2,"=",v1**v2,type(v1**v2)
    elif (op == '%'):
        print "              ",v1,op,v2,"=",v1%v2,type(v1%v2)
    elif (op == '<'):
        print "              ",v1,op,v2,"=",v1<v2,type(v1<v2)
    elif (op == '='):
        print "              ",v1,op,v2,"=",v1==v2,type(v1==v2)
    elif (op == '>'):
        print "              ",v1,op,v2,"=",v1>v2,type(v1>v2)
    elif (op == '<='):
        print "              ",v1,op,v2,"=",v1<=v2,type(v1<=v2)
    elif (op == '!='):
        print "              ",v1,op,v2,"=",v1!=v2,type(v1!=v2)
    elif (op == '>='):
        print "              ",v1,op,v2,"=",v1>=v2,type(v1>=v2)

for x in v:
    print "Op 1 ::: ",type(x),x

    for y in v:
        print "     Op 2 ::: ",type(y),y
        for z in o:
            try:
                oper(x, y, z)
            except:
                print "Can't ",type(x),z,type(y)



-----
GOT:
-----
EXCEPTION: SyntaxError

-----
WANTED:
-----
Big number test
Op 1 :::  <type 'int'> 1
     Op 2 :::  <type 'int'> 1
               1 + 1 = 2 <type 'int'>
               1 - 1 = 0 <type 'int'>
               1 * 1 = 1 <type 'int'>
               1 / 1 = 1 <type 'int'>
               1 ** 1 = 1 <type 'int'>
               1 % 1 = 0 <type 'int'>
               1 < 1 = False <type 'bool'>
               1 = 1 = True <type 'bool'>
               1 > 1 = False <type 'bool'>
               1 <= 1 = True <type 'bool'>
               1 != 1 = False <type 'bool'>
               1 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               1 + 1.0 = 2.0 <type 'float'>
               1 - 1.0 = 0.0 <type 'float'>
               1 * 1.0 = 1.0 <type 'float'>
               1 / 1.0 = 1.0 <type 'float'>
               1 ** 1.0 = 1.0 <type 'float'>
               1 % 1.0 = 0.0 <type 'float'>
               1 < 1.0 = False <type 'bool'>
               1 = 1.0 = True <type 'bool'>
               1 > 1.0 = False <type 'bool'>
               1 <= 1.0 = True <type 'bool'>
               1 != 1.0 = False <type 'bool'>
               1 >= 1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> 1
               1 + 1 = 2 <type 'long'>
               1 - 1 = 0 <type 'long'>
               1 * 1 = 1 <type 'long'>
               1 / 1 = 1 <type 'long'>
               1 ** 1 = 1 <type 'long'>
               1 % 1 = 0 <type 'long'>
               1 < 1 = False <type 'bool'>
               1 = 1 = True <type 'bool'>
               1 > 1 = False <type 'bool'>
               1 <= 1 = True <type 'bool'>
               1 != 1 = False <type 'bool'>
               1 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'int'> -1
               1 + -1 = 0 <type 'int'>
               1 - -1 = 2 <type 'int'>
               1 * -1 = -1 <type 'int'>
               1 / -1 = -1 <type 'int'>
               1 ** -1 = 1.0 <type 'float'>
               1 % -1 = 0 <type 'int'>
               1 < -1 = False <type 'bool'>
               1 = -1 = False <type 'bool'>
               1 > -1 = True <type 'bool'>
               1 <= -1 = False <type 'bool'>
               1 != -1 = True <type 'bool'>
               1 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               1 + -1.0 = 0.0 <type 'float'>
               1 - -1.0 = 2.0 <type 'float'>
               1 * -1.0 = -1.0 <type 'float'>
               1 / -1.0 = -1.0 <type 'float'>
               1 ** -1.0 = 1.0 <type 'float'>
               1 % -1.0 = 0.0 <type 'float'>
               1 < -1.0 = False <type 'bool'>
               1 = -1.0 = False <type 'bool'>
               1 > -1.0 = True <type 'bool'>
               1 <= -1.0 = False <type 'bool'>
               1 != -1.0 = True <type 'bool'>
               1 >= -1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -1
               1 + -1 = 0 <type 'long'>
               1 - -1 = 2 <type 'long'>
               1 * -1 = -1 <type 'long'>
               1 / -1 = -1 <type 'long'>
               1 ** -1 = 1.0 <type 'float'>
               1 % -1 = 0 <type 'long'>
               1 < -1 = False <type 'bool'>
               1 = -1 = False <type 'bool'>
               1 > -1 = True <type 'bool'>
               1 <= -1 = False <type 'bool'>
               1 != -1 = True <type 'bool'>
               1 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'int'> 2
               1 + 2 = 3 <type 'int'>
               1 - 2 = -1 <type 'int'>
               1 * 2 = 2 <type 'int'>
               1 / 2 = 0 <type 'int'>
               1 ** 2 = 1 <type 'int'>
               1 % 2 = 1 <type 'int'>
               1 < 2 = True <type 'bool'>
               1 = 2 = False <type 'bool'>
               1 > 2 = False <type 'bool'>
               1 <= 2 = True <type 'bool'>
               1 != 2 = True <type 'bool'>
               1 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               1 + 2.0 = 3.0 <type 'float'>
               1 - 2.0 = -1.0 <type 'float'>
               1 * 2.0 = 2.0 <type 'float'>
               1 / 2.0 = 0.5 <type 'float'>
               1 ** 2.0 = 1.0 <type 'float'>
               1 % 2.0 = 1.0 <type 'float'>
               1 < 2.0 = True <type 'bool'>
               1 = 2.0 = False <type 'bool'>
               1 > 2.0 = False <type 'bool'>
               1 <= 2.0 = True <type 'bool'>
               1 != 2.0 = True <type 'bool'>
               1 >= 2.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 2
               1 + 2 = 3 <type 'long'>
               1 - 2 = -1 <type 'long'>
               1 * 2 = 2 <type 'long'>
               1 / 2 = 0 <type 'long'>
               1 ** 2 = 1 <type 'long'>
               1 % 2 = 1 <type 'long'>
               1 < 2 = True <type 'bool'>
               1 = 2 = False <type 'bool'>
               1 > 2 = False <type 'bool'>
               1 <= 2 = True <type 'bool'>
               1 != 2 = True <type 'bool'>
               1 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'int'> -2
               1 + -2 = -1 <type 'int'>
               1 - -2 = 3 <type 'int'>
               1 * -2 = -2 <type 'int'>
               1 / -2 = -1 <type 'int'>
               1 ** -2 = 1.0 <type 'float'>
               1 % -2 = -1 <type 'int'>
               1 < -2 = False <type 'bool'>
               1 = -2 = False <type 'bool'>
               1 > -2 = True <type 'bool'>
               1 <= -2 = False <type 'bool'>
               1 != -2 = True <type 'bool'>
               1 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               1 + -2.0 = -1.0 <type 'float'>
               1 - -2.0 = 3.0 <type 'float'>
               1 * -2.0 = -2.0 <type 'float'>
               1 / -2.0 = -0.5 <type 'float'>
               1 ** -2.0 = 1.0 <type 'float'>
               1 % -2.0 = -1.0 <type 'float'>
               1 < -2.0 = False <type 'bool'>
               1 = -2.0 = False <type 'bool'>
               1 > -2.0 = True <type 'bool'>
               1 <= -2.0 = False <type 'bool'>
               1 != -2.0 = True <type 'bool'>
               1 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               1 + -2 = -1 <type 'long'>
               1 - -2 = 3 <type 'long'>
               1 * -2 = -2 <type 'long'>
               1 / -2 = -1 <type 'long'>
               1 ** -2 = 1.0 <type 'float'>
               1 % -2 = -1 <type 'long'>
               1 < -2 = False <type 'bool'>
               1 = -2 = False <type 'bool'>
               1 > -2 = True <type 'bool'>
               1 <= -2 = False <type 'bool'>
               1 != -2 = True <type 'bool'>
               1 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               1 + 1000000000.0 = 1000000001.0 <type 'float'>
               1 - 1000000000.0 = -999999999.0 <type 'float'>
               1 * 1000000000.0 = 1000000000.0 <type 'float'>
               1 / 1000000000.0 = 1e-09 <type 'float'>
skipping pow of really big number
               1 % 1000000000.0 = 1.0 <type 'float'>
               1 < 1000000000.0 = True <type 'bool'>
               1 = 1000000000.0 = False <type 'bool'>
               1 > 1000000000.0 = False <type 'bool'>
               1 <= 1000000000.0 = True <type 'bool'>
               1 != 1000000000.0 = True <type 'bool'>
               1 >= 1000000000.0 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               1 + -1000000000.0 = -999999999.0 <type 'float'>
               1 - -1000000000.0 = 1000000001.0 <type 'float'>
               1 * -1000000000.0 = -1000000000.0 <type 'float'>
               1 / -1000000000.0 = -1e-09 <type 'float'>
               1 ** -1000000000.0 = 1.0 <type 'float'>
               1 % -1000000000.0 = -999999999.0 <type 'float'>
               1 < -1000000000.0 = False <type 'bool'>
               1 = -1000000000.0 = False <type 'bool'>
               1 > -1000000000.0 = True <type 'bool'>
               1 <= -1000000000.0 = False <type 'bool'>
               1 != -1000000000.0 = True <type 'bool'>
               1 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               1 + 1e-09 = 1.000000001 <type 'float'>
               1 - 1e-09 = 0.999999999 <type 'float'>
               1 * 1e-09 = 1e-09 <type 'float'>
               1 / 1e-09 = 1000000000.0 <type 'float'>
               1 ** 1e-09 = 1.0 <type 'float'>
               1 % 1e-09 = 9.99999937718e-10 <type 'float'>
               1 < 1e-09 = False <type 'bool'>
               1 = 1e-09 = False <type 'bool'>
               1 > 1e-09 = True <type 'bool'>
               1 <= 1e-09 = False <type 'bool'>
               1 != 1e-09 = True <type 'bool'>
               1 >= 1e-09 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               1 + -1e-09 = 0.999999999 <type 'float'>
               1 - -1e-09 = 1.000000001 <type 'float'>
               1 * -1e-09 = -1e-09 <type 'float'>
               1 / -1e-09 = -1000000000.0 <type 'float'>
               1 ** -1e-09 = 1.0 <type 'float'>
               1 % -1e-09 = -6.22815914578e-17 <type 'float'>
               1 < -1e-09 = False <type 'bool'>
               1 = -1e-09 = False <type 'bool'>
               1 > -1e-09 = True <type 'bool'>
               1 <= -1e-09 = False <type 'bool'>
               1 != -1e-09 = True <type 'bool'>
               1 >= -1e-09 = True <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               1 + 123456789 = 123456790 <type 'long'>
               1 - 123456789 = -123456788 <type 'long'>
               1 * 123456789 = 123456789 <type 'long'>
               1 / 123456789 = 0 <type 'long'>
skipping pow of really big number
               1 % 123456789 = 1 <type 'long'>
               1 < 123456789 = True <type 'bool'>
               1 = 123456789 = False <type 'bool'>
               1 > 123456789 = False <type 'bool'>
               1 <= 123456789 = True <type 'bool'>
               1 != 123456789 = True <type 'bool'>
               1 >= 123456789 = False <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               1 + 12345678901234567890123456789 = 12345678901234567890123456790 <type 'long'>
               1 - 12345678901234567890123456789 = -12345678901234567890123456788 <type 'long'>
               1 * 12345678901234567890123456789 = 12345678901234567890123456789 <type 'long'>
               1 / 12345678901234567890123456789 = 0 <type 'long'>
skipping pow of really big number
               1 % 12345678901234567890123456789 = 1 <type 'long'>
               1 < 12345678901234567890123456789 = True <type 'bool'>
               1 = 12345678901234567890123456789 = False <type 'bool'>
               1 > 12345678901234567890123456789 = False <type 'bool'>
               1 <= 12345678901234567890123456789 = True <type 'bool'>
               1 != 12345678901234567890123456789 = True <type 'bool'>
               1 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'float'> 1.0
     Op 2 :::  <type 'int'> 1
               1.0 + 1 = 2.0 <type 'float'>
               1.0 - 1 = 0.0 <type 'float'>
               1.0 * 1 = 1.0 <type 'float'>
               1.0 / 1 = 1.0 <type 'float'>
               1.0 ** 1 = 1.0 <type 'float'>
               1.0 % 1 = 0.0 <type 'float'>
               1.0 < 1 = False <type 'bool'>
               1.0 = 1 = True <type 'bool'>
               1.0 > 1 = False <type 'bool'>
               1.0 <= 1 = True <type 'bool'>
               1.0 != 1 = False <type 'bool'>
               1.0 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               1.0 + 1.0 = 2.0 <type 'float'>
               1.0 - 1.0 = 0.0 <type 'float'>
               1.0 * 1.0 = 1.0 <type 'float'>
               1.0 / 1.0 = 1.0 <type 'float'>
               1.0 ** 1.0 = 1.0 <type 'float'>
               1.0 % 1.0 = 0.0 <type 'float'>
               1.0 < 1.0 = False <type 'bool'>
               1.0 = 1.0 = True <type 'bool'>
               1.0 > 1.0 = False <type 'bool'>
               1.0 <= 1.0 = True <type 'bool'>
               1.0 != 1.0 = False <type 'bool'>
               1.0 >= 1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> 1
               1.0 + 1 = 2.0 <type 'float'>
               1.0 - 1 = 0.0 <type 'float'>
               1.0 * 1 = 1.0 <type 'float'>
               1.0 / 1 = 1.0 <type 'float'>
               1.0 ** 1 = 1.0 <type 'float'>
               1.0 % 1 = 0.0 <type 'float'>
               1.0 < 1 = False <type 'bool'>
               1.0 = 1 = True <type 'bool'>
               1.0 > 1 = False <type 'bool'>
               1.0 <= 1 = True <type 'bool'>
               1.0 != 1 = False <type 'bool'>
               1.0 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'int'> -1
               1.0 + -1 = 0.0 <type 'float'>
               1.0 - -1 = 2.0 <type 'float'>
               1.0 * -1 = -1.0 <type 'float'>
               1.0 / -1 = -1.0 <type 'float'>
               1.0 ** -1 = 1.0 <type 'float'>
               1.0 % -1 = 0.0 <type 'float'>
               1.0 < -1 = False <type 'bool'>
               1.0 = -1 = False <type 'bool'>
               1.0 > -1 = True <type 'bool'>
               1.0 <= -1 = False <type 'bool'>
               1.0 != -1 = True <type 'bool'>
               1.0 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               1.0 + -1.0 = 0.0 <type 'float'>
               1.0 - -1.0 = 2.0 <type 'float'>
               1.0 * -1.0 = -1.0 <type 'float'>
               1.0 / -1.0 = -1.0 <type 'float'>
               1.0 ** -1.0 = 1.0 <type 'float'>
               1.0 % -1.0 = 0.0 <type 'float'>
               1.0 < -1.0 = False <type 'bool'>
               1.0 = -1.0 = False <type 'bool'>
               1.0 > -1.0 = True <type 'bool'>
               1.0 <= -1.0 = False <type 'bool'>
               1.0 != -1.0 = True <type 'bool'>
               1.0 >= -1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -1
               1.0 + -1 = 0.0 <type 'float'>
               1.0 - -1 = 2.0 <type 'float'>
               1.0 * -1 = -1.0 <type 'float'>
               1.0 / -1 = -1.0 <type 'float'>
               1.0 ** -1 = 1.0 <type 'float'>
               1.0 % -1 = 0.0 <type 'float'>
               1.0 < -1 = False <type 'bool'>
               1.0 = -1 = False <type 'bool'>
               1.0 > -1 = True <type 'bool'>
               1.0 <= -1 = False <type 'bool'>
               1.0 != -1 = True <type 'bool'>
               1.0 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'int'> 2
               1.0 + 2 = 3.0 <type 'float'>
               1.0 - 2 = -1.0 <type 'float'>
               1.0 * 2 = 2.0 <type 'float'>
               1.0 / 2 = 0.5 <type 'float'>
               1.0 ** 2 = 1.0 <type 'float'>
               1.0 % 2 = 1.0 <type 'float'>
               1.0 < 2 = True <type 'bool'>
               1.0 = 2 = False <type 'bool'>
               1.0 > 2 = False <type 'bool'>
               1.0 <= 2 = True <type 'bool'>
               1.0 != 2 = True <type 'bool'>
               1.0 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               1.0 + 2.0 = 3.0 <type 'float'>
               1.0 - 2.0 = -1.0 <type 'float'>
               1.0 * 2.0 = 2.0 <type 'float'>
               1.0 / 2.0 = 0.5 <type 'float'>
               1.0 ** 2.0 = 1.0 <type 'float'>
               1.0 % 2.0 = 1.0 <type 'float'>
               1.0 < 2.0 = True <type 'bool'>
               1.0 = 2.0 = False <type 'bool'>
               1.0 > 2.0 = False <type 'bool'>
               1.0 <= 2.0 = True <type 'bool'>
               1.0 != 2.0 = True <type 'bool'>
               1.0 >= 2.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 2
               1.0 + 2 = 3.0 <type 'float'>
               1.0 - 2 = -1.0 <type 'float'>
               1.0 * 2 = 2.0 <type 'float'>
               1.0 / 2 = 0.5 <type 'float'>
               1.0 ** 2 = 1.0 <type 'float'>
               1.0 % 2 = 1.0 <type 'float'>
               1.0 < 2 = True <type 'bool'>
               1.0 = 2 = False <type 'bool'>
               1.0 > 2 = False <type 'bool'>
               1.0 <= 2 = True <type 'bool'>
               1.0 != 2 = True <type 'bool'>
               1.0 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'int'> -2
               1.0 + -2 = -1.0 <type 'float'>
               1.0 - -2 = 3.0 <type 'float'>
               1.0 * -2 = -2.0 <type 'float'>
               1.0 / -2 = -0.5 <type 'float'>
               1.0 ** -2 = 1.0 <type 'float'>
               1.0 % -2 = -1.0 <type 'float'>
               1.0 < -2 = False <type 'bool'>
               1.0 = -2 = False <type 'bool'>
               1.0 > -2 = True <type 'bool'>
               1.0 <= -2 = False <type 'bool'>
               1.0 != -2 = True <type 'bool'>
               1.0 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               1.0 + -2.0 = -1.0 <type 'float'>
               1.0 - -2.0 = 3.0 <type 'float'>
               1.0 * -2.0 = -2.0 <type 'float'>
               1.0 / -2.0 = -0.5 <type 'float'>
               1.0 ** -2.0 = 1.0 <type 'float'>
               1.0 % -2.0 = -1.0 <type 'float'>
               1.0 < -2.0 = False <type 'bool'>
               1.0 = -2.0 = False <type 'bool'>
               1.0 > -2.0 = True <type 'bool'>
               1.0 <= -2.0 = False <type 'bool'>
               1.0 != -2.0 = True <type 'bool'>
               1.0 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               1.0 + -2 = -1.0 <type 'float'>
               1.0 - -2 = 3.0 <type 'float'>
               1.0 * -2 = -2.0 <type 'float'>
               1.0 / -2 = -0.5 <type 'float'>
               1.0 ** -2 = 1.0 <type 'float'>
               1.0 % -2 = -1.0 <type 'float'>
               1.0 < -2 = False <type 'bool'>
               1.0 = -2 = False <type 'bool'>
               1.0 > -2 = True <type 'bool'>
               1.0 <= -2 = False <type 'bool'>
               1.0 != -2 = True <type 'bool'>
               1.0 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               1.0 + 1000000000.0 = 1000000001.0 <type 'float'>
               1.0 - 1000000000.0 = -999999999.0 <type 'float'>
               1.0 * 1000000000.0 = 1000000000.0 <type 'float'>
               1.0 / 1000000000.0 = 1e-09 <type 'float'>
skipping pow of really big number
               1.0 % 1000000000.0 = 1.0 <type 'float'>
               1.0 < 1000000000.0 = True <type 'bool'>
               1.0 = 1000000000.0 = False <type 'bool'>
               1.0 > 1000000000.0 = False <type 'bool'>
               1.0 <= 1000000000.0 = True <type 'bool'>
               1.0 != 1000000000.0 = True <type 'bool'>
               1.0 >= 1000000000.0 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               1.0 + -1000000000.0 = -999999999.0 <type 'float'>
               1.0 - -1000000000.0 = 1000000001.0 <type 'float'>
               1.0 * -1000000000.0 = -1000000000.0 <type 'float'>
               1.0 / -1000000000.0 = -1e-09 <type 'float'>
               1.0 ** -1000000000.0 = 1.0 <type 'float'>
               1.0 % -1000000000.0 = -999999999.0 <type 'float'>
               1.0 < -1000000000.0 = False <type 'bool'>
               1.0 = -1000000000.0 = False <type 'bool'>
               1.0 > -1000000000.0 = True <type 'bool'>
               1.0 <= -1000000000.0 = False <type 'bool'>
               1.0 != -1000000000.0 = True <type 'bool'>
               1.0 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               1.0 + 1e-09 = 1.000000001 <type 'float'>
               1.0 - 1e-09 = 0.999999999 <type 'float'>
               1.0 * 1e-09 = 1e-09 <type 'float'>
               1.0 / 1e-09 = 1000000000.0 <type 'float'>
               1.0 ** 1e-09 = 1.0 <type 'float'>
               1.0 % 1e-09 = 9.99999937718e-10 <type 'float'>
               1.0 < 1e-09 = False <type 'bool'>
               1.0 = 1e-09 = False <type 'bool'>
               1.0 > 1e-09 = True <type 'bool'>
               1.0 <= 1e-09 = False <type 'bool'>
               1.0 != 1e-09 = True <type 'bool'>
               1.0 >= 1e-09 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               1.0 + -1e-09 = 0.999999999 <type 'float'>
               1.0 - -1e-09 = 1.000000001 <type 'float'>
               1.0 * -1e-09 = -1e-09 <type 'float'>
               1.0 / -1e-09 = -1000000000.0 <type 'float'>
               1.0 ** -1e-09 = 1.0 <type 'float'>
               1.0 % -1e-09 = -6.22815914578e-17 <type 'float'>
               1.0 < -1e-09 = False <type 'bool'>
               1.0 = -1e-09 = False <type 'bool'>
               1.0 > -1e-09 = True <type 'bool'>
               1.0 <= -1e-09 = False <type 'bool'>
               1.0 != -1e-09 = True <type 'bool'>
               1.0 >= -1e-09 = True <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               1.0 + 123456789 = 123456790.0 <type 'float'>
               1.0 - 123456789 = -123456788.0 <type 'float'>
               1.0 * 123456789 = 123456789.0 <type 'float'>
               1.0 / 123456789 = 8.10000007371e-09 <type 'float'>
skipping pow of really big number
               1.0 % 123456789 = 1.0 <type 'float'>
               1.0 < 123456789 = True <type 'bool'>
               1.0 = 123456789 = False <type 'bool'>
               1.0 > 123456789 = False <type 'bool'>
               1.0 <= 123456789 = True <type 'bool'>
               1.0 != 123456789 = True <type 'bool'>
               1.0 >= 123456789 = False <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               1.0 + 12345678901234567890123456789 = 1.23456789012e+28 <type 'float'>
               1.0 - 12345678901234567890123456789 = -1.23456789012e+28 <type 'float'>
               1.0 * 12345678901234567890123456789 = 1.23456789012e+28 <type 'float'>
               1.0 / 12345678901234567890123456789 = 8.1000000729e-29 <type 'float'>
skipping pow of really big number
               1.0 % 12345678901234567890123456789 = 1.0 <type 'float'>
               1.0 < 12345678901234567890123456789 = True <type 'bool'>
               1.0 = 12345678901234567890123456789 = False <type 'bool'>
               1.0 > 12345678901234567890123456789 = False <type 'bool'>
               1.0 <= 12345678901234567890123456789 = True <type 'bool'>
               1.0 != 12345678901234567890123456789 = True <type 'bool'>
               1.0 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'long'> 1
     Op 2 :::  <type 'int'> 1
               1 + 1 = 2 <type 'long'>
               1 - 1 = 0 <type 'long'>
               1 * 1 = 1 <type 'long'>
               1 / 1 = 1 <type 'long'>
               1 ** 1 = 1 <type 'long'>
               1 % 1 = 0 <type 'long'>
               1 < 1 = False <type 'bool'>
               1 = 1 = True <type 'bool'>
               1 > 1 = False <type 'bool'>
               1 <= 1 = True <type 'bool'>
               1 != 1 = False <type 'bool'>
               1 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               1 + 1.0 = 2.0 <type 'float'>
               1 - 1.0 = 0.0 <type 'float'>
               1 * 1.0 = 1.0 <type 'float'>
               1 / 1.0 = 1.0 <type 'float'>
               1 ** 1.0 = 1.0 <type 'float'>
               1 % 1.0 = 0.0 <type 'float'>
               1 < 1.0 = False <type 'bool'>
               1 = 1.0 = True <type 'bool'>
               1 > 1.0 = False <type 'bool'>
               1 <= 1.0 = True <type 'bool'>
               1 != 1.0 = False <type 'bool'>
               1 >= 1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> 1
               1 + 1 = 2 <type 'long'>
               1 - 1 = 0 <type 'long'>
               1 * 1 = 1 <type 'long'>
               1 / 1 = 1 <type 'long'>
               1 ** 1 = 1 <type 'long'>
               1 % 1 = 0 <type 'long'>
               1 < 1 = False <type 'bool'>
               1 = 1 = True <type 'bool'>
               1 > 1 = False <type 'bool'>
               1 <= 1 = True <type 'bool'>
               1 != 1 = False <type 'bool'>
               1 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'int'> -1
               1 + -1 = 0 <type 'long'>
               1 - -1 = 2 <type 'long'>
               1 * -1 = -1 <type 'long'>
               1 / -1 = -1 <type 'long'>
               1 ** -1 = 1.0 <type 'float'>
               1 % -1 = 0 <type 'long'>
               1 < -1 = False <type 'bool'>
               1 = -1 = False <type 'bool'>
               1 > -1 = True <type 'bool'>
               1 <= -1 = False <type 'bool'>
               1 != -1 = True <type 'bool'>
               1 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               1 + -1.0 = 0.0 <type 'float'>
               1 - -1.0 = 2.0 <type 'float'>
               1 * -1.0 = -1.0 <type 'float'>
               1 / -1.0 = -1.0 <type 'float'>
               1 ** -1.0 = 1.0 <type 'float'>
               1 % -1.0 = 0.0 <type 'float'>
               1 < -1.0 = False <type 'bool'>
               1 = -1.0 = False <type 'bool'>
               1 > -1.0 = True <type 'bool'>
               1 <= -1.0 = False <type 'bool'>
               1 != -1.0 = True <type 'bool'>
               1 >= -1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -1
               1 + -1 = 0 <type 'long'>
               1 - -1 = 2 <type 'long'>
               1 * -1 = -1 <type 'long'>
               1 / -1 = -1 <type 'long'>
               1 ** -1 = 1.0 <type 'float'>
               1 % -1 = 0 <type 'long'>
               1 < -1 = False <type 'bool'>
               1 = -1 = False <type 'bool'>
               1 > -1 = True <type 'bool'>
               1 <= -1 = False <type 'bool'>
               1 != -1 = True <type 'bool'>
               1 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'int'> 2
               1 + 2 = 3 <type 'long'>
               1 - 2 = -1 <type 'long'>
               1 * 2 = 2 <type 'long'>
               1 / 2 = 0 <type 'long'>
               1 ** 2 = 1 <type 'long'>
               1 % 2 = 1 <type 'long'>
               1 < 2 = True <type 'bool'>
               1 = 2 = False <type 'bool'>
               1 > 2 = False <type 'bool'>
               1 <= 2 = True <type 'bool'>
               1 != 2 = True <type 'bool'>
               1 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               1 + 2.0 = 3.0 <type 'float'>
               1 - 2.0 = -1.0 <type 'float'>
               1 * 2.0 = 2.0 <type 'float'>
               1 / 2.0 = 0.5 <type 'float'>
               1 ** 2.0 = 1.0 <type 'float'>
               1 % 2.0 = 1.0 <type 'float'>
               1 < 2.0 = True <type 'bool'>
               1 = 2.0 = False <type 'bool'>
               1 > 2.0 = False <type 'bool'>
               1 <= 2.0 = True <type 'bool'>
               1 != 2.0 = True <type 'bool'>
               1 >= 2.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 2
               1 + 2 = 3 <type 'long'>
               1 - 2 = -1 <type 'long'>
               1 * 2 = 2 <type 'long'>
               1 / 2 = 0 <type 'long'>
               1 ** 2 = 1 <type 'long'>
               1 % 2 = 1 <type 'long'>
               1 < 2 = True <type 'bool'>
               1 = 2 = False <type 'bool'>
               1 > 2 = False <type 'bool'>
               1 <= 2 = True <type 'bool'>
               1 != 2 = True <type 'bool'>
               1 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'int'> -2
               1 + -2 = -1 <type 'long'>
               1 - -2 = 3 <type 'long'>
               1 * -2 = -2 <type 'long'>
               1 / -2 = -1 <type 'long'>
               1 ** -2 = 1.0 <type 'float'>
               1 % -2 = -1 <type 'long'>
               1 < -2 = False <type 'bool'>
               1 = -2 = False <type 'bool'>
               1 > -2 = True <type 'bool'>
               1 <= -2 = False <type 'bool'>
               1 != -2 = True <type 'bool'>
               1 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               1 + -2.0 = -1.0 <type 'float'>
               1 - -2.0 = 3.0 <type 'float'>
               1 * -2.0 = -2.0 <type 'float'>
               1 / -2.0 = -0.5 <type 'float'>
               1 ** -2.0 = 1.0 <type 'float'>
               1 % -2.0 = -1.0 <type 'float'>
               1 < -2.0 = False <type 'bool'>
               1 = -2.0 = False <type 'bool'>
               1 > -2.0 = True <type 'bool'>
               1 <= -2.0 = False <type 'bool'>
               1 != -2.0 = True <type 'bool'>
               1 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               1 + -2 = -1 <type 'long'>
               1 - -2 = 3 <type 'long'>
               1 * -2 = -2 <type 'long'>
               1 / -2 = -1 <type 'long'>
               1 ** -2 = 1.0 <type 'float'>
               1 % -2 = -1 <type 'long'>
               1 < -2 = False <type 'bool'>
               1 = -2 = False <type 'bool'>
               1 > -2 = True <type 'bool'>
               1 <= -2 = False <type 'bool'>
               1 != -2 = True <type 'bool'>
               1 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               1 + 1000000000.0 = 1000000001.0 <type 'float'>
               1 - 1000000000.0 = -999999999.0 <type 'float'>
               1 * 1000000000.0 = 1000000000.0 <type 'float'>
               1 / 1000000000.0 = 1e-09 <type 'float'>
skipping pow of really big number
               1 % 1000000000.0 = 1.0 <type 'float'>
               1 < 1000000000.0 = True <type 'bool'>
               1 = 1000000000.0 = False <type 'bool'>
               1 > 1000000000.0 = False <type 'bool'>
               1 <= 1000000000.0 = True <type 'bool'>
               1 != 1000000000.0 = True <type 'bool'>
               1 >= 1000000000.0 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               1 + -1000000000.0 = -999999999.0 <type 'float'>
               1 - -1000000000.0 = 1000000001.0 <type 'float'>
               1 * -1000000000.0 = -1000000000.0 <type 'float'>
               1 / -1000000000.0 = -1e-09 <type 'float'>
               1 ** -1000000000.0 = 1.0 <type 'float'>
               1 % -1000000000.0 = -999999999.0 <type 'float'>
               1 < -1000000000.0 = False <type 'bool'>
               1 = -1000000000.0 = False <type 'bool'>
               1 > -1000000000.0 = True <type 'bool'>
               1 <= -1000000000.0 = False <type 'bool'>
               1 != -1000000000.0 = True <type 'bool'>
               1 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               1 + 1e-09 = 1.000000001 <type 'float'>
               1 - 1e-09 = 0.999999999 <type 'float'>
               1 * 1e-09 = 1e-09 <type 'float'>
               1 / 1e-09 = 1000000000.0 <type 'float'>
               1 ** 1e-09 = 1.0 <type 'float'>
               1 % 1e-09 = 9.99999937718e-10 <type 'float'>
               1 < 1e-09 = False <type 'bool'>
               1 = 1e-09 = False <type 'bool'>
               1 > 1e-09 = True <type 'bool'>
               1 <= 1e-09 = False <type 'bool'>
               1 != 1e-09 = True <type 'bool'>
               1 >= 1e-09 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               1 + -1e-09 = 0.999999999 <type 'float'>
               1 - -1e-09 = 1.000000001 <type 'float'>
               1 * -1e-09 = -1e-09 <type 'float'>
               1 / -1e-09 = -1000000000.0 <type 'float'>
               1 ** -1e-09 = 1.0 <type 'float'>
               1 % -1e-09 = -6.22815914578e-17 <type 'float'>
               1 < -1e-09 = False <type 'bool'>
               1 = -1e-09 = False <type 'bool'>
               1 > -1e-09 = True <type 'bool'>
               1 <= -1e-09 = False <type 'bool'>
               1 != -1e-09 = True <type 'bool'>
               1 >= -1e-09 = True <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               1 + 123456789 = 123456790 <type 'long'>
               1 - 123456789 = -123456788 <type 'long'>
               1 * 123456789 = 123456789 <type 'long'>
               1 / 123456789 = 0 <type 'long'>
skipping pow of really big number
               1 % 123456789 = 1 <type 'long'>
               1 < 123456789 = True <type 'bool'>
               1 = 123456789 = False <type 'bool'>
               1 > 123456789 = False <type 'bool'>
               1 <= 123456789 = True <type 'bool'>
               1 != 123456789 = True <type 'bool'>
               1 >= 123456789 = False <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               1 + 12345678901234567890123456789 = 12345678901234567890123456790 <type 'long'>
               1 - 12345678901234567890123456789 = -12345678901234567890123456788 <type 'long'>
               1 * 12345678901234567890123456789 = 12345678901234567890123456789 <type 'long'>
               1 / 12345678901234567890123456789 = 0 <type 'long'>
skipping pow of really big number
               1 % 12345678901234567890123456789 = 1 <type 'long'>
               1 < 12345678901234567890123456789 = True <type 'bool'>
               1 = 12345678901234567890123456789 = False <type 'bool'>
               1 > 12345678901234567890123456789 = False <type 'bool'>
               1 <= 12345678901234567890123456789 = True <type 'bool'>
               1 != 12345678901234567890123456789 = True <type 'bool'>
               1 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'int'> -1
     Op 2 :::  <type 'int'> 1
               -1 + 1 = 0 <type 'int'>
               -1 - 1 = -2 <type 'int'>
               -1 * 1 = -1 <type 'int'>
               -1 / 1 = -1 <type 'int'>
               -1 ** 1 = -1 <type 'int'>
               -1 % 1 = 0 <type 'int'>
               -1 < 1 = True <type 'bool'>
               -1 = 1 = False <type 'bool'>
               -1 > 1 = False <type 'bool'>
               -1 <= 1 = True <type 'bool'>
               -1 != 1 = True <type 'bool'>
               -1 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               -1 + 1.0 = 0.0 <type 'float'>
               -1 - 1.0 = -2.0 <type 'float'>
               -1 * 1.0 = -1.0 <type 'float'>
               -1 / 1.0 = -1.0 <type 'float'>
               -1 ** 1.0 = -1.0 <type 'float'>
               -1 % 1.0 = 0.0 <type 'float'>
               -1 < 1.0 = True <type 'bool'>
               -1 = 1.0 = False <type 'bool'>
               -1 > 1.0 = False <type 'bool'>
               -1 <= 1.0 = True <type 'bool'>
               -1 != 1.0 = True <type 'bool'>
               -1 >= 1.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 1
               -1 + 1 = 0 <type 'long'>
               -1 - 1 = -2 <type 'long'>
               -1 * 1 = -1 <type 'long'>
               -1 / 1 = -1 <type 'long'>
               -1 ** 1 = -1 <type 'long'>
               -1 % 1 = 0 <type 'long'>
               -1 < 1 = True <type 'bool'>
               -1 = 1 = False <type 'bool'>
               -1 > 1 = False <type 'bool'>
               -1 <= 1 = True <type 'bool'>
               -1 != 1 = True <type 'bool'>
               -1 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'int'> -1
               -1 + -1 = -2 <type 'int'>
               -1 - -1 = 0 <type 'int'>
               -1 * -1 = 1 <type 'int'>
               -1 / -1 = 1 <type 'int'>
               -1 ** -1 = -1.0 <type 'float'>
               -1 % -1 = 0 <type 'int'>
               -1 < -1 = False <type 'bool'>
               -1 = -1 = True <type 'bool'>
               -1 > -1 = False <type 'bool'>
               -1 <= -1 = True <type 'bool'>
               -1 != -1 = False <type 'bool'>
               -1 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               -1 + -1.0 = -2.0 <type 'float'>
               -1 - -1.0 = 0.0 <type 'float'>
               -1 * -1.0 = 1.0 <type 'float'>
               -1 / -1.0 = 1.0 <type 'float'>
               -1 ** -1.0 = -1.0 <type 'float'>
               -1 % -1.0 = 0.0 <type 'float'>
               -1 < -1.0 = False <type 'bool'>
               -1 = -1.0 = True <type 'bool'>
               -1 > -1.0 = False <type 'bool'>
               -1 <= -1.0 = True <type 'bool'>
               -1 != -1.0 = False <type 'bool'>
               -1 >= -1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -1
               -1 + -1 = -2 <type 'long'>
               -1 - -1 = 0 <type 'long'>
               -1 * -1 = 1 <type 'long'>
               -1 / -1 = 1 <type 'long'>
               -1 ** -1 = -1.0 <type 'float'>
               -1 % -1 = 0 <type 'long'>
               -1 < -1 = False <type 'bool'>
               -1 = -1 = True <type 'bool'>
               -1 > -1 = False <type 'bool'>
               -1 <= -1 = True <type 'bool'>
               -1 != -1 = False <type 'bool'>
               -1 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'int'> 2
               -1 + 2 = 1 <type 'int'>
               -1 - 2 = -3 <type 'int'>
               -1 * 2 = -2 <type 'int'>
               -1 / 2 = -1 <type 'int'>
               -1 ** 2 = 1 <type 'int'>
               -1 % 2 = 1 <type 'int'>
               -1 < 2 = True <type 'bool'>
               -1 = 2 = False <type 'bool'>
               -1 > 2 = False <type 'bool'>
               -1 <= 2 = True <type 'bool'>
               -1 != 2 = True <type 'bool'>
               -1 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               -1 + 2.0 = 1.0 <type 'float'>
               -1 - 2.0 = -3.0 <type 'float'>
               -1 * 2.0 = -2.0 <type 'float'>
               -1 / 2.0 = -0.5 <type 'float'>
               -1 ** 2.0 = 1.0 <type 'float'>
               -1 % 2.0 = 1.0 <type 'float'>
               -1 < 2.0 = True <type 'bool'>
               -1 = 2.0 = False <type 'bool'>
               -1 > 2.0 = False <type 'bool'>
               -1 <= 2.0 = True <type 'bool'>
               -1 != 2.0 = True <type 'bool'>
               -1 >= 2.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 2
               -1 + 2 = 1 <type 'long'>
               -1 - 2 = -3 <type 'long'>
               -1 * 2 = -2 <type 'long'>
               -1 / 2 = -1 <type 'long'>
               -1 ** 2 = 1 <type 'long'>
               -1 % 2 = 1 <type 'long'>
               -1 < 2 = True <type 'bool'>
               -1 = 2 = False <type 'bool'>
               -1 > 2 = False <type 'bool'>
               -1 <= 2 = True <type 'bool'>
               -1 != 2 = True <type 'bool'>
               -1 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'int'> -2
               -1 + -2 = -3 <type 'int'>
               -1 - -2 = 1 <type 'int'>
               -1 * -2 = 2 <type 'int'>
               -1 / -2 = 0 <type 'int'>
               -1 ** -2 = 1.0 <type 'float'>
               -1 % -2 = -1 <type 'int'>
               -1 < -2 = False <type 'bool'>
               -1 = -2 = False <type 'bool'>
               -1 > -2 = True <type 'bool'>
               -1 <= -2 = False <type 'bool'>
               -1 != -2 = True <type 'bool'>
               -1 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               -1 + -2.0 = -3.0 <type 'float'>
               -1 - -2.0 = 1.0 <type 'float'>
               -1 * -2.0 = 2.0 <type 'float'>
               -1 / -2.0 = 0.5 <type 'float'>
               -1 ** -2.0 = 1.0 <type 'float'>
               -1 % -2.0 = -1.0 <type 'float'>
               -1 < -2.0 = False <type 'bool'>
               -1 = -2.0 = False <type 'bool'>
               -1 > -2.0 = True <type 'bool'>
               -1 <= -2.0 = False <type 'bool'>
               -1 != -2.0 = True <type 'bool'>
               -1 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               -1 + -2 = -3 <type 'long'>
               -1 - -2 = 1 <type 'long'>
               -1 * -2 = 2 <type 'long'>
               -1 / -2 = 0 <type 'long'>
               -1 ** -2 = 1.0 <type 'float'>
               -1 % -2 = -1 <type 'long'>
               -1 < -2 = False <type 'bool'>
               -1 = -2 = False <type 'bool'>
               -1 > -2 = True <type 'bool'>
               -1 <= -2 = False <type 'bool'>
               -1 != -2 = True <type 'bool'>
               -1 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               -1 + 1000000000.0 = 999999999.0 <type 'float'>
               -1 - 1000000000.0 = -1000000001.0 <type 'float'>
               -1 * 1000000000.0 = -1000000000.0 <type 'float'>
               -1 / 1000000000.0 = -1e-09 <type 'float'>
skipping pow of really big number
               -1 % 1000000000.0 = 999999999.0 <type 'float'>
               -1 < 1000000000.0 = True <type 'bool'>
               -1 = 1000000000.0 = False <type 'bool'>
               -1 > 1000000000.0 = False <type 'bool'>
               -1 <= 1000000000.0 = True <type 'bool'>
               -1 != 1000000000.0 = True <type 'bool'>
               -1 >= 1000000000.0 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               -1 + -1000000000.0 = -1000000001.0 <type 'float'>
               -1 - -1000000000.0 = 999999999.0 <type 'float'>
               -1 * -1000000000.0 = 1000000000.0 <type 'float'>
               -1 / -1000000000.0 = 1e-09 <type 'float'>
               -1 ** -1000000000.0 = 1.0 <type 'float'>
               -1 % -1000000000.0 = -1.0 <type 'float'>
               -1 < -1000000000.0 = False <type 'bool'>
               -1 = -1000000000.0 = False <type 'bool'>
               -1 > -1000000000.0 = True <type 'bool'>
               -1 <= -1000000000.0 = False <type 'bool'>
               -1 != -1000000000.0 = True <type 'bool'>
               -1 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               -1 + 1e-09 = -0.999999999 <type 'float'>
               -1 - 1e-09 = -1.000000001 <type 'float'>
               -1 * 1e-09 = -1e-09 <type 'float'>
               -1 / 1e-09 = -1000000000.0 <type 'float'>
               -1 ** 1e-09 = Can't  <type 'int'> ** <type 'float'>
               -1 % 1e-09 = 6.22815914578e-17 <type 'float'>
               -1 < 1e-09 = True <type 'bool'>
               -1 = 1e-09 = False <type 'bool'>
               -1 > 1e-09 = False <type 'bool'>
               -1 <= 1e-09 = True <type 'bool'>
               -1 != 1e-09 = True <type 'bool'>
               -1 >= 1e-09 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               -1 + -1e-09 = -1.000000001 <type 'float'>
               -1 - -1e-09 = -0.999999999 <type 'float'>
               -1 * -1e-09 = 1e-09 <type 'float'>
               -1 / -1e-09 = 1000000000.0 <type 'float'>
               -1 ** -1e-09 = Can't  <type 'int'> ** <type 'float'>
               -1 % -1e-09 = -9.99999937718e-10 <type 'float'>
               -1 < -1e-09 = True <type 'bool'>
               -1 = -1e-09 = False <type 'bool'>
               -1 > -1e-09 = False <type 'bool'>
               -1 <= -1e-09 = True <type 'bool'>
               -1 != -1e-09 = True <type 'bool'>
               -1 >= -1e-09 = False <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               -1 + 123456789 = 123456788 <type 'long'>
               -1 - 123456789 = -123456790 <type 'long'>
               -1 * 123456789 = -123456789 <type 'long'>
               -1 / 123456789 = -1 <type 'long'>
skipping pow of really big number
               -1 % 123456789 = 123456788 <type 'long'>
               -1 < 123456789 = True <type 'bool'>
               -1 = 123456789 = False <type 'bool'>
               -1 > 123456789 = False <type 'bool'>
               -1 <= 123456789 = True <type 'bool'>
               -1 != 123456789 = True <type 'bool'>
               -1 >= 123456789 = False <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               -1 + 12345678901234567890123456789 = 12345678901234567890123456788 <type 'long'>
               -1 - 12345678901234567890123456789 = -12345678901234567890123456790 <type 'long'>
               -1 * 12345678901234567890123456789 = -12345678901234567890123456789 <type 'long'>
               -1 / 12345678901234567890123456789 = -1 <type 'long'>
skipping pow of really big number
               -1 % 12345678901234567890123456789 = 12345678901234567890123456788 <type 'long'>
               -1 < 12345678901234567890123456789 = True <type 'bool'>
               -1 = 12345678901234567890123456789 = False <type 'bool'>
               -1 > 12345678901234567890123456789 = False <type 'bool'>
               -1 <= 12345678901234567890123456789 = True <type 'bool'>
               -1 != 12345678901234567890123456789 = True <type 'bool'>
               -1 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'float'> -1.0
     Op 2 :::  <type 'int'> 1
               -1.0 + 1 = 0.0 <type 'float'>
               -1.0 - 1 = -2.0 <type 'float'>
               -1.0 * 1 = -1.0 <type 'float'>
               -1.0 / 1 = -1.0 <type 'float'>
               -1.0 ** 1 = -1.0 <type 'float'>
               -1.0 % 1 = 0.0 <type 'float'>
               -1.0 < 1 = True <type 'bool'>
               -1.0 = 1 = False <type 'bool'>
               -1.0 > 1 = False <type 'bool'>
               -1.0 <= 1 = True <type 'bool'>
               -1.0 != 1 = True <type 'bool'>
               -1.0 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               -1.0 + 1.0 = 0.0 <type 'float'>
               -1.0 - 1.0 = -2.0 <type 'float'>
               -1.0 * 1.0 = -1.0 <type 'float'>
               -1.0 / 1.0 = -1.0 <type 'float'>
               -1.0 ** 1.0 = -1.0 <type 'float'>
               -1.0 % 1.0 = 0.0 <type 'float'>
               -1.0 < 1.0 = True <type 'bool'>
               -1.0 = 1.0 = False <type 'bool'>
               -1.0 > 1.0 = False <type 'bool'>
               -1.0 <= 1.0 = True <type 'bool'>
               -1.0 != 1.0 = True <type 'bool'>
               -1.0 >= 1.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 1
               -1.0 + 1 = 0.0 <type 'float'>
               -1.0 - 1 = -2.0 <type 'float'>
               -1.0 * 1 = -1.0 <type 'float'>
               -1.0 / 1 = -1.0 <type 'float'>
               -1.0 ** 1 = -1.0 <type 'float'>
               -1.0 % 1 = 0.0 <type 'float'>
               -1.0 < 1 = True <type 'bool'>
               -1.0 = 1 = False <type 'bool'>
               -1.0 > 1 = False <type 'bool'>
               -1.0 <= 1 = True <type 'bool'>
               -1.0 != 1 = True <type 'bool'>
               -1.0 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'int'> -1
               -1.0 + -1 = -2.0 <type 'float'>
               -1.0 - -1 = 0.0 <type 'float'>
               -1.0 * -1 = 1.0 <type 'float'>
               -1.0 / -1 = 1.0 <type 'float'>
               -1.0 ** -1 = -1.0 <type 'float'>
               -1.0 % -1 = 0.0 <type 'float'>
               -1.0 < -1 = False <type 'bool'>
               -1.0 = -1 = True <type 'bool'>
               -1.0 > -1 = False <type 'bool'>
               -1.0 <= -1 = True <type 'bool'>
               -1.0 != -1 = False <type 'bool'>
               -1.0 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               -1.0 + -1.0 = -2.0 <type 'float'>
               -1.0 - -1.0 = 0.0 <type 'float'>
               -1.0 * -1.0 = 1.0 <type 'float'>
               -1.0 / -1.0 = 1.0 <type 'float'>
               -1.0 ** -1.0 = -1.0 <type 'float'>
               -1.0 % -1.0 = 0.0 <type 'float'>
               -1.0 < -1.0 = False <type 'bool'>
               -1.0 = -1.0 = True <type 'bool'>
               -1.0 > -1.0 = False <type 'bool'>
               -1.0 <= -1.0 = True <type 'bool'>
               -1.0 != -1.0 = False <type 'bool'>
               -1.0 >= -1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -1
               -1.0 + -1 = -2.0 <type 'float'>
               -1.0 - -1 = 0.0 <type 'float'>
               -1.0 * -1 = 1.0 <type 'float'>
               -1.0 / -1 = 1.0 <type 'float'>
               -1.0 ** -1 = -1.0 <type 'float'>
               -1.0 % -1 = 0.0 <type 'float'>
               -1.0 < -1 = False <type 'bool'>
               -1.0 = -1 = True <type 'bool'>
               -1.0 > -1 = False <type 'bool'>
               -1.0 <= -1 = True <type 'bool'>
               -1.0 != -1 = False <type 'bool'>
               -1.0 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'int'> 2
               -1.0 + 2 = 1.0 <type 'float'>
               -1.0 - 2 = -3.0 <type 'float'>
               -1.0 * 2 = -2.0 <type 'float'>
               -1.0 / 2 = -0.5 <type 'float'>
               -1.0 ** 2 = 1.0 <type 'float'>
               -1.0 % 2 = 1.0 <type 'float'>
               -1.0 < 2 = True <type 'bool'>
               -1.0 = 2 = False <type 'bool'>
               -1.0 > 2 = False <type 'bool'>
               -1.0 <= 2 = True <type 'bool'>
               -1.0 != 2 = True <type 'bool'>
               -1.0 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               -1.0 + 2.0 = 1.0 <type 'float'>
               -1.0 - 2.0 = -3.0 <type 'float'>
               -1.0 * 2.0 = -2.0 <type 'float'>
               -1.0 / 2.0 = -0.5 <type 'float'>
               -1.0 ** 2.0 = 1.0 <type 'float'>
               -1.0 % 2.0 = 1.0 <type 'float'>
               -1.0 < 2.0 = True <type 'bool'>
               -1.0 = 2.0 = False <type 'bool'>
               -1.0 > 2.0 = False <type 'bool'>
               -1.0 <= 2.0 = True <type 'bool'>
               -1.0 != 2.0 = True <type 'bool'>
               -1.0 >= 2.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 2
               -1.0 + 2 = 1.0 <type 'float'>
               -1.0 - 2 = -3.0 <type 'float'>
               -1.0 * 2 = -2.0 <type 'float'>
               -1.0 / 2 = -0.5 <type 'float'>
               -1.0 ** 2 = 1.0 <type 'float'>
               -1.0 % 2 = 1.0 <type 'float'>
               -1.0 < 2 = True <type 'bool'>
               -1.0 = 2 = False <type 'bool'>
               -1.0 > 2 = False <type 'bool'>
               -1.0 <= 2 = True <type 'bool'>
               -1.0 != 2 = True <type 'bool'>
               -1.0 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'int'> -2
               -1.0 + -2 = -3.0 <type 'float'>
               -1.0 - -2 = 1.0 <type 'float'>
               -1.0 * -2 = 2.0 <type 'float'>
               -1.0 / -2 = 0.5 <type 'float'>
               -1.0 ** -2 = 1.0 <type 'float'>
               -1.0 % -2 = -1.0 <type 'float'>
               -1.0 < -2 = False <type 'bool'>
               -1.0 = -2 = False <type 'bool'>
               -1.0 > -2 = True <type 'bool'>
               -1.0 <= -2 = False <type 'bool'>
               -1.0 != -2 = True <type 'bool'>
               -1.0 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               -1.0 + -2.0 = -3.0 <type 'float'>
               -1.0 - -2.0 = 1.0 <type 'float'>
               -1.0 * -2.0 = 2.0 <type 'float'>
               -1.0 / -2.0 = 0.5 <type 'float'>
               -1.0 ** -2.0 = 1.0 <type 'float'>
               -1.0 % -2.0 = -1.0 <type 'float'>
               -1.0 < -2.0 = False <type 'bool'>
               -1.0 = -2.0 = False <type 'bool'>
               -1.0 > -2.0 = True <type 'bool'>
               -1.0 <= -2.0 = False <type 'bool'>
               -1.0 != -2.0 = True <type 'bool'>
               -1.0 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               -1.0 + -2 = -3.0 <type 'float'>
               -1.0 - -2 = 1.0 <type 'float'>
               -1.0 * -2 = 2.0 <type 'float'>
               -1.0 / -2 = 0.5 <type 'float'>
               -1.0 ** -2 = 1.0 <type 'float'>
               -1.0 % -2 = -1.0 <type 'float'>
               -1.0 < -2 = False <type 'bool'>
               -1.0 = -2 = False <type 'bool'>
               -1.0 > -2 = True <type 'bool'>
               -1.0 <= -2 = False <type 'bool'>
               -1.0 != -2 = True <type 'bool'>
               -1.0 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               -1.0 + 1000000000.0 = 999999999.0 <type 'float'>
               -1.0 - 1000000000.0 = -1000000001.0 <type 'float'>
               -1.0 * 1000000000.0 = -1000000000.0 <type 'float'>
               -1.0 / 1000000000.0 = -1e-09 <type 'float'>
skipping pow of really big number
               -1.0 % 1000000000.0 = 999999999.0 <type 'float'>
               -1.0 < 1000000000.0 = True <type 'bool'>
               -1.0 = 1000000000.0 = False <type 'bool'>
               -1.0 > 1000000000.0 = False <type 'bool'>
               -1.0 <= 1000000000.0 = True <type 'bool'>
               -1.0 != 1000000000.0 = True <type 'bool'>
               -1.0 >= 1000000000.0 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               -1.0 + -1000000000.0 = -1000000001.0 <type 'float'>
               -1.0 - -1000000000.0 = 999999999.0 <type 'float'>
               -1.0 * -1000000000.0 = 1000000000.0 <type 'float'>
               -1.0 / -1000000000.0 = 1e-09 <type 'float'>
               -1.0 ** -1000000000.0 = 1.0 <type 'float'>
               -1.0 % -1000000000.0 = -1.0 <type 'float'>
               -1.0 < -1000000000.0 = False <type 'bool'>
               -1.0 = -1000000000.0 = False <type 'bool'>
               -1.0 > -1000000000.0 = True <type 'bool'>
               -1.0 <= -1000000000.0 = False <type 'bool'>
               -1.0 != -1000000000.0 = True <type 'bool'>
               -1.0 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               -1.0 + 1e-09 = -0.999999999 <type 'float'>
               -1.0 - 1e-09 = -1.000000001 <type 'float'>
               -1.0 * 1e-09 = -1e-09 <type 'float'>
               -1.0 / 1e-09 = -1000000000.0 <type 'float'>
               -1.0 ** 1e-09 = Can't  <type 'float'> ** <type 'float'>
               -1.0 % 1e-09 = 6.22815914578e-17 <type 'float'>
               -1.0 < 1e-09 = True <type 'bool'>
               -1.0 = 1e-09 = False <type 'bool'>
               -1.0 > 1e-09 = False <type 'bool'>
               -1.0 <= 1e-09 = True <type 'bool'>
               -1.0 != 1e-09 = True <type 'bool'>
               -1.0 >= 1e-09 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               -1.0 + -1e-09 = -1.000000001 <type 'float'>
               -1.0 - -1e-09 = -0.999999999 <type 'float'>
               -1.0 * -1e-09 = 1e-09 <type 'float'>
               -1.0 / -1e-09 = 1000000000.0 <type 'float'>
               -1.0 ** -1e-09 = Can't  <type 'float'> ** <type 'float'>
               -1.0 % -1e-09 = -9.99999937718e-10 <type 'float'>
               -1.0 < -1e-09 = True <type 'bool'>
               -1.0 = -1e-09 = False <type 'bool'>
               -1.0 > -1e-09 = False <type 'bool'>
               -1.0 <= -1e-09 = True <type 'bool'>
               -1.0 != -1e-09 = True <type 'bool'>
               -1.0 >= -1e-09 = False <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               -1.0 + 123456789 = 123456788.0 <type 'float'>
               -1.0 - 123456789 = -123456790.0 <type 'float'>
               -1.0 * 123456789 = -123456789.0 <type 'float'>
               -1.0 / 123456789 = -8.10000007371e-09 <type 'float'>
skipping pow of really big number
               -1.0 % 123456789 = 123456788.0 <type 'float'>
               -1.0 < 123456789 = True <type 'bool'>
               -1.0 = 123456789 = False <type 'bool'>
               -1.0 > 123456789 = False <type 'bool'>
               -1.0 <= 123456789 = True <type 'bool'>
               -1.0 != 123456789 = True <type 'bool'>
               -1.0 >= 123456789 = False <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               -1.0 + 12345678901234567890123456789 = 1.23456789012e+28 <type 'float'>
               -1.0 - 12345678901234567890123456789 = -1.23456789012e+28 <type 'float'>
               -1.0 * 12345678901234567890123456789 = -1.23456789012e+28 <type 'float'>
               -1.0 / 12345678901234567890123456789 = -8.1000000729e-29 <type 'float'>
skipping pow of really big number
               -1.0 % 12345678901234567890123456789 = 1.23456789012e+28 <type 'float'>
               -1.0 < 12345678901234567890123456789 = True <type 'bool'>
               -1.0 = 12345678901234567890123456789 = False <type 'bool'>
               -1.0 > 12345678901234567890123456789 = False <type 'bool'>
               -1.0 <= 12345678901234567890123456789 = True <type 'bool'>
               -1.0 != 12345678901234567890123456789 = True <type 'bool'>
               -1.0 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'long'> -1
     Op 2 :::  <type 'int'> 1
               -1 + 1 = 0 <type 'long'>
               -1 - 1 = -2 <type 'long'>
               -1 * 1 = -1 <type 'long'>
               -1 / 1 = -1 <type 'long'>
               -1 ** 1 = -1 <type 'long'>
               -1 % 1 = 0 <type 'long'>
               -1 < 1 = True <type 'bool'>
               -1 = 1 = False <type 'bool'>
               -1 > 1 = False <type 'bool'>
               -1 <= 1 = True <type 'bool'>
               -1 != 1 = True <type 'bool'>
               -1 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               -1 + 1.0 = 0.0 <type 'float'>
               -1 - 1.0 = -2.0 <type 'float'>
               -1 * 1.0 = -1.0 <type 'float'>
               -1 / 1.0 = -1.0 <type 'float'>
               -1 ** 1.0 = -1.0 <type 'float'>
               -1 % 1.0 = 0.0 <type 'float'>
               -1 < 1.0 = True <type 'bool'>
               -1 = 1.0 = False <type 'bool'>
               -1 > 1.0 = False <type 'bool'>
               -1 <= 1.0 = True <type 'bool'>
               -1 != 1.0 = True <type 'bool'>
               -1 >= 1.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 1
               -1 + 1 = 0 <type 'long'>
               -1 - 1 = -2 <type 'long'>
               -1 * 1 = -1 <type 'long'>
               -1 / 1 = -1 <type 'long'>
               -1 ** 1 = -1 <type 'long'>
               -1 % 1 = 0 <type 'long'>
               -1 < 1 = True <type 'bool'>
               -1 = 1 = False <type 'bool'>
               -1 > 1 = False <type 'bool'>
               -1 <= 1 = True <type 'bool'>
               -1 != 1 = True <type 'bool'>
               -1 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'int'> -1
               -1 + -1 = -2 <type 'long'>
               -1 - -1 = 0 <type 'long'>
               -1 * -1 = 1 <type 'long'>
               -1 / -1 = 1 <type 'long'>
               -1 ** -1 = -1.0 <type 'float'>
               -1 % -1 = 0 <type 'long'>
               -1 < -1 = False <type 'bool'>
               -1 = -1 = True <type 'bool'>
               -1 > -1 = False <type 'bool'>
               -1 <= -1 = True <type 'bool'>
               -1 != -1 = False <type 'bool'>
               -1 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               -1 + -1.0 = -2.0 <type 'float'>
               -1 - -1.0 = 0.0 <type 'float'>
               -1 * -1.0 = 1.0 <type 'float'>
               -1 / -1.0 = 1.0 <type 'float'>
               -1 ** -1.0 = -1.0 <type 'float'>
               -1 % -1.0 = 0.0 <type 'float'>
               -1 < -1.0 = False <type 'bool'>
               -1 = -1.0 = True <type 'bool'>
               -1 > -1.0 = False <type 'bool'>
               -1 <= -1.0 = True <type 'bool'>
               -1 != -1.0 = False <type 'bool'>
               -1 >= -1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -1
               -1 + -1 = -2 <type 'long'>
               -1 - -1 = 0 <type 'long'>
               -1 * -1 = 1 <type 'long'>
               -1 / -1 = 1 <type 'long'>
               -1 ** -1 = -1.0 <type 'float'>
               -1 % -1 = 0 <type 'long'>
               -1 < -1 = False <type 'bool'>
               -1 = -1 = True <type 'bool'>
               -1 > -1 = False <type 'bool'>
               -1 <= -1 = True <type 'bool'>
               -1 != -1 = False <type 'bool'>
               -1 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'int'> 2
               -1 + 2 = 1 <type 'long'>
               -1 - 2 = -3 <type 'long'>
               -1 * 2 = -2 <type 'long'>
               -1 / 2 = -1 <type 'long'>
               -1 ** 2 = 1 <type 'long'>
               -1 % 2 = 1 <type 'long'>
               -1 < 2 = True <type 'bool'>
               -1 = 2 = False <type 'bool'>
               -1 > 2 = False <type 'bool'>
               -1 <= 2 = True <type 'bool'>
               -1 != 2 = True <type 'bool'>
               -1 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               -1 + 2.0 = 1.0 <type 'float'>
               -1 - 2.0 = -3.0 <type 'float'>
               -1 * 2.0 = -2.0 <type 'float'>
               -1 / 2.0 = -0.5 <type 'float'>
               -1 ** 2.0 = 1.0 <type 'float'>
               -1 % 2.0 = 1.0 <type 'float'>
               -1 < 2.0 = True <type 'bool'>
               -1 = 2.0 = False <type 'bool'>
               -1 > 2.0 = False <type 'bool'>
               -1 <= 2.0 = True <type 'bool'>
               -1 != 2.0 = True <type 'bool'>
               -1 >= 2.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 2
               -1 + 2 = 1 <type 'long'>
               -1 - 2 = -3 <type 'long'>
               -1 * 2 = -2 <type 'long'>
               -1 / 2 = -1 <type 'long'>
               -1 ** 2 = 1 <type 'long'>
               -1 % 2 = 1 <type 'long'>
               -1 < 2 = True <type 'bool'>
               -1 = 2 = False <type 'bool'>
               -1 > 2 = False <type 'bool'>
               -1 <= 2 = True <type 'bool'>
               -1 != 2 = True <type 'bool'>
               -1 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'int'> -2
               -1 + -2 = -3 <type 'long'>
               -1 - -2 = 1 <type 'long'>
               -1 * -2 = 2 <type 'long'>
               -1 / -2 = 0 <type 'long'>
               -1 ** -2 = 1.0 <type 'float'>
               -1 % -2 = -1 <type 'long'>
               -1 < -2 = False <type 'bool'>
               -1 = -2 = False <type 'bool'>
               -1 > -2 = True <type 'bool'>
               -1 <= -2 = False <type 'bool'>
               -1 != -2 = True <type 'bool'>
               -1 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               -1 + -2.0 = -3.0 <type 'float'>
               -1 - -2.0 = 1.0 <type 'float'>
               -1 * -2.0 = 2.0 <type 'float'>
               -1 / -2.0 = 0.5 <type 'float'>
               -1 ** -2.0 = 1.0 <type 'float'>
               -1 % -2.0 = -1.0 <type 'float'>
               -1 < -2.0 = False <type 'bool'>
               -1 = -2.0 = False <type 'bool'>
               -1 > -2.0 = True <type 'bool'>
               -1 <= -2.0 = False <type 'bool'>
               -1 != -2.0 = True <type 'bool'>
               -1 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               -1 + -2 = -3 <type 'long'>
               -1 - -2 = 1 <type 'long'>
               -1 * -2 = 2 <type 'long'>
               -1 / -2 = 0 <type 'long'>
               -1 ** -2 = 1.0 <type 'float'>
               -1 % -2 = -1 <type 'long'>
               -1 < -2 = False <type 'bool'>
               -1 = -2 = False <type 'bool'>
               -1 > -2 = True <type 'bool'>
               -1 <= -2 = False <type 'bool'>
               -1 != -2 = True <type 'bool'>
               -1 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               -1 + 1000000000.0 = 999999999.0 <type 'float'>
               -1 - 1000000000.0 = -1000000001.0 <type 'float'>
               -1 * 1000000000.0 = -1000000000.0 <type 'float'>
               -1 / 1000000000.0 = -1e-09 <type 'float'>
skipping pow of really big number
               -1 % 1000000000.0 = 999999999.0 <type 'float'>
               -1 < 1000000000.0 = True <type 'bool'>
               -1 = 1000000000.0 = False <type 'bool'>
               -1 > 1000000000.0 = False <type 'bool'>
               -1 <= 1000000000.0 = True <type 'bool'>
               -1 != 1000000000.0 = True <type 'bool'>
               -1 >= 1000000000.0 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               -1 + -1000000000.0 = -1000000001.0 <type 'float'>
               -1 - -1000000000.0 = 999999999.0 <type 'float'>
               -1 * -1000000000.0 = 1000000000.0 <type 'float'>
               -1 / -1000000000.0 = 1e-09 <type 'float'>
               -1 ** -1000000000.0 = 1.0 <type 'float'>
               -1 % -1000000000.0 = -1.0 <type 'float'>
               -1 < -1000000000.0 = False <type 'bool'>
               -1 = -1000000000.0 = False <type 'bool'>
               -1 > -1000000000.0 = True <type 'bool'>
               -1 <= -1000000000.0 = False <type 'bool'>
               -1 != -1000000000.0 = True <type 'bool'>
               -1 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               -1 + 1e-09 = -0.999999999 <type 'float'>
               -1 - 1e-09 = -1.000000001 <type 'float'>
               -1 * 1e-09 = -1e-09 <type 'float'>
               -1 / 1e-09 = -1000000000.0 <type 'float'>
               -1 ** 1e-09 = Can't  <type 'long'> ** <type 'float'>
               -1 % 1e-09 = 6.22815914578e-17 <type 'float'>
               -1 < 1e-09 = True <type 'bool'>
               -1 = 1e-09 = False <type 'bool'>
               -1 > 1e-09 = False <type 'bool'>
               -1 <= 1e-09 = True <type 'bool'>
               -1 != 1e-09 = True <type 'bool'>
               -1 >= 1e-09 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               -1 + -1e-09 = -1.000000001 <type 'float'>
               -1 - -1e-09 = -0.999999999 <type 'float'>
               -1 * -1e-09 = 1e-09 <type 'float'>
               -1 / -1e-09 = 1000000000.0 <type 'float'>
               -1 ** -1e-09 = Can't  <type 'long'> ** <type 'float'>
               -1 % -1e-09 = -9.99999937718e-10 <type 'float'>
               -1 < -1e-09 = True <type 'bool'>
               -1 = -1e-09 = False <type 'bool'>
               -1 > -1e-09 = False <type 'bool'>
               -1 <= -1e-09 = True <type 'bool'>
               -1 != -1e-09 = True <type 'bool'>
               -1 >= -1e-09 = False <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               -1 + 123456789 = 123456788 <type 'long'>
               -1 - 123456789 = -123456790 <type 'long'>
               -1 * 123456789 = -123456789 <type 'long'>
               -1 / 123456789 = -1 <type 'long'>
skipping pow of really big number
               -1 % 123456789 = 123456788 <type 'long'>
               -1 < 123456789 = True <type 'bool'>
               -1 = 123456789 = False <type 'bool'>
               -1 > 123456789 = False <type 'bool'>
               -1 <= 123456789 = True <type 'bool'>
               -1 != 123456789 = True <type 'bool'>
               -1 >= 123456789 = False <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               -1 + 12345678901234567890123456789 = 12345678901234567890123456788 <type 'long'>
               -1 - 12345678901234567890123456789 = -12345678901234567890123456790 <type 'long'>
               -1 * 12345678901234567890123456789 = -12345678901234567890123456789 <type 'long'>
               -1 / 12345678901234567890123456789 = -1 <type 'long'>
skipping pow of really big number
               -1 % 12345678901234567890123456789 = 12345678901234567890123456788 <type 'long'>
               -1 < 12345678901234567890123456789 = True <type 'bool'>
               -1 = 12345678901234567890123456789 = False <type 'bool'>
               -1 > 12345678901234567890123456789 = False <type 'bool'>
               -1 <= 12345678901234567890123456789 = True <type 'bool'>
               -1 != 12345678901234567890123456789 = True <type 'bool'>
               -1 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'int'> 2
     Op 2 :::  <type 'int'> 1
               2 + 1 = 3 <type 'int'>
               2 - 1 = 1 <type 'int'>
               2 * 1 = 2 <type 'int'>
               2 / 1 = 2 <type 'int'>
               2 ** 1 = 2 <type 'int'>
               2 % 1 = 0 <type 'int'>
               2 < 1 = False <type 'bool'>
               2 = 1 = False <type 'bool'>
               2 > 1 = True <type 'bool'>
               2 <= 1 = False <type 'bool'>
               2 != 1 = True <type 'bool'>
               2 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               2 + 1.0 = 3.0 <type 'float'>
               2 - 1.0 = 1.0 <type 'float'>
               2 * 1.0 = 2.0 <type 'float'>
               2 / 1.0 = 2.0 <type 'float'>
               2 ** 1.0 = 2.0 <type 'float'>
               2 % 1.0 = 0.0 <type 'float'>
               2 < 1.0 = False <type 'bool'>
               2 = 1.0 = False <type 'bool'>
               2 > 1.0 = True <type 'bool'>
               2 <= 1.0 = False <type 'bool'>
               2 != 1.0 = True <type 'bool'>
               2 >= 1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> 1
               2 + 1 = 3 <type 'long'>
               2 - 1 = 1 <type 'long'>
               2 * 1 = 2 <type 'long'>
               2 / 1 = 2 <type 'long'>
               2 ** 1 = 2 <type 'long'>
               2 % 1 = 0 <type 'long'>
               2 < 1 = False <type 'bool'>
               2 = 1 = False <type 'bool'>
               2 > 1 = True <type 'bool'>
               2 <= 1 = False <type 'bool'>
               2 != 1 = True <type 'bool'>
               2 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'int'> -1
               2 + -1 = 1 <type 'int'>
               2 - -1 = 3 <type 'int'>
               2 * -1 = -2 <type 'int'>
               2 / -1 = -2 <type 'int'>
               2 ** -1 = 0.5 <type 'float'>
               2 % -1 = 0 <type 'int'>
               2 < -1 = False <type 'bool'>
               2 = -1 = False <type 'bool'>
               2 > -1 = True <type 'bool'>
               2 <= -1 = False <type 'bool'>
               2 != -1 = True <type 'bool'>
               2 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               2 + -1.0 = 1.0 <type 'float'>
               2 - -1.0 = 3.0 <type 'float'>
               2 * -1.0 = -2.0 <type 'float'>
               2 / -1.0 = -2.0 <type 'float'>
               2 ** -1.0 = 0.5 <type 'float'>
               2 % -1.0 = 0.0 <type 'float'>
               2 < -1.0 = False <type 'bool'>
               2 = -1.0 = False <type 'bool'>
               2 > -1.0 = True <type 'bool'>
               2 <= -1.0 = False <type 'bool'>
               2 != -1.0 = True <type 'bool'>
               2 >= -1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -1
               2 + -1 = 1 <type 'long'>
               2 - -1 = 3 <type 'long'>
               2 * -1 = -2 <type 'long'>
               2 / -1 = -2 <type 'long'>
               2 ** -1 = 0.5 <type 'float'>
               2 % -1 = 0 <type 'long'>
               2 < -1 = False <type 'bool'>
               2 = -1 = False <type 'bool'>
               2 > -1 = True <type 'bool'>
               2 <= -1 = False <type 'bool'>
               2 != -1 = True <type 'bool'>
               2 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'int'> 2
               2 + 2 = 4 <type 'int'>
               2 - 2 = 0 <type 'int'>
               2 * 2 = 4 <type 'int'>
               2 / 2 = 1 <type 'int'>
               2 ** 2 = 4 <type 'int'>
               2 % 2 = 0 <type 'int'>
               2 < 2 = False <type 'bool'>
               2 = 2 = True <type 'bool'>
               2 > 2 = False <type 'bool'>
               2 <= 2 = True <type 'bool'>
               2 != 2 = False <type 'bool'>
               2 >= 2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               2 + 2.0 = 4.0 <type 'float'>
               2 - 2.0 = 0.0 <type 'float'>
               2 * 2.0 = 4.0 <type 'float'>
               2 / 2.0 = 1.0 <type 'float'>
               2 ** 2.0 = 4.0 <type 'float'>
               2 % 2.0 = 0.0 <type 'float'>
               2 < 2.0 = False <type 'bool'>
               2 = 2.0 = True <type 'bool'>
               2 > 2.0 = False <type 'bool'>
               2 <= 2.0 = True <type 'bool'>
               2 != 2.0 = False <type 'bool'>
               2 >= 2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> 2
               2 + 2 = 4 <type 'long'>
               2 - 2 = 0 <type 'long'>
               2 * 2 = 4 <type 'long'>
               2 / 2 = 1 <type 'long'>
               2 ** 2 = 4 <type 'long'>
               2 % 2 = 0 <type 'long'>
               2 < 2 = False <type 'bool'>
               2 = 2 = True <type 'bool'>
               2 > 2 = False <type 'bool'>
               2 <= 2 = True <type 'bool'>
               2 != 2 = False <type 'bool'>
               2 >= 2 = True <type 'bool'>
     Op 2 :::  <type 'int'> -2
               2 + -2 = 0 <type 'int'>
               2 - -2 = 4 <type 'int'>
               2 * -2 = -4 <type 'int'>
               2 / -2 = -1 <type 'int'>
               2 ** -2 = 0.25 <type 'float'>
               2 % -2 = 0 <type 'int'>
               2 < -2 = False <type 'bool'>
               2 = -2 = False <type 'bool'>
               2 > -2 = True <type 'bool'>
               2 <= -2 = False <type 'bool'>
               2 != -2 = True <type 'bool'>
               2 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               2 + -2.0 = 0.0 <type 'float'>
               2 - -2.0 = 4.0 <type 'float'>
               2 * -2.0 = -4.0 <type 'float'>
               2 / -2.0 = -1.0 <type 'float'>
               2 ** -2.0 = 0.25 <type 'float'>
               2 % -2.0 = 0.0 <type 'float'>
               2 < -2.0 = False <type 'bool'>
               2 = -2.0 = False <type 'bool'>
               2 > -2.0 = True <type 'bool'>
               2 <= -2.0 = False <type 'bool'>
               2 != -2.0 = True <type 'bool'>
               2 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               2 + -2 = 0 <type 'long'>
               2 - -2 = 4 <type 'long'>
               2 * -2 = -4 <type 'long'>
               2 / -2 = -1 <type 'long'>
               2 ** -2 = 0.25 <type 'float'>
               2 % -2 = 0 <type 'long'>
               2 < -2 = False <type 'bool'>
               2 = -2 = False <type 'bool'>
               2 > -2 = True <type 'bool'>
               2 <= -2 = False <type 'bool'>
               2 != -2 = True <type 'bool'>
               2 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               2 + 1000000000.0 = 1000000002.0 <type 'float'>
               2 - 1000000000.0 = -999999998.0 <type 'float'>
               2 * 1000000000.0 = 2000000000.0 <type 'float'>
               2 / 1000000000.0 = 2e-09 <type 'float'>
skipping pow of really big number
               2 % 1000000000.0 = 2.0 <type 'float'>
               2 < 1000000000.0 = True <type 'bool'>
               2 = 1000000000.0 = False <type 'bool'>
               2 > 1000000000.0 = False <type 'bool'>
               2 <= 1000000000.0 = True <type 'bool'>
               2 != 1000000000.0 = True <type 'bool'>
               2 >= 1000000000.0 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               2 + -1000000000.0 = -999999998.0 <type 'float'>
               2 - -1000000000.0 = 1000000002.0 <type 'float'>
               2 * -1000000000.0 = -2000000000.0 <type 'float'>
               2 / -1000000000.0 = -2e-09 <type 'float'>
               2 ** -1000000000.0 = 0.0 <type 'float'>
               2 % -1000000000.0 = -999999998.0 <type 'float'>
               2 < -1000000000.0 = False <type 'bool'>
               2 = -1000000000.0 = False <type 'bool'>
               2 > -1000000000.0 = True <type 'bool'>
               2 <= -1000000000.0 = False <type 'bool'>
               2 != -1000000000.0 = True <type 'bool'>
               2 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               2 + 1e-09 = 2.000000001 <type 'float'>
               2 - 1e-09 = 1.999999999 <type 'float'>
               2 * 1e-09 = 2e-09 <type 'float'>
               2 / 1e-09 = 2000000000.0 <type 'float'>
               2 ** 1e-09 = 1.00000000069 <type 'float'>
               2 % 1e-09 = 9.99999875437e-10 <type 'float'>
               2 < 1e-09 = False <type 'bool'>
               2 = 1e-09 = False <type 'bool'>
               2 > 1e-09 = True <type 'bool'>
               2 <= 1e-09 = False <type 'bool'>
               2 != 1e-09 = True <type 'bool'>
               2 >= 1e-09 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               2 + -1e-09 = 1.999999999 <type 'float'>
               2 - -1e-09 = 2.000000001 <type 'float'>
               2 * -1e-09 = -2e-09 <type 'float'>
               2 / -1e-09 = -2000000000.0 <type 'float'>
               2 ** -1e-09 = 0.999999999307 <type 'float'>
               2 % -1e-09 = -1.24563182916e-16 <type 'float'>
               2 < -1e-09 = False <type 'bool'>
               2 = -1e-09 = False <type 'bool'>
               2 > -1e-09 = True <type 'bool'>
               2 <= -1e-09 = False <type 'bool'>
               2 != -1e-09 = True <type 'bool'>
               2 >= -1e-09 = True <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               2 + 123456789 = 123456791 <type 'long'>
               2 - 123456789 = -123456787 <type 'long'>
               2 * 123456789 = 246913578 <type 'long'>
               2 / 123456789 = 0 <type 'long'>
skipping pow of really big number
               2 % 123456789 = 2 <type 'long'>
               2 < 123456789 = True <type 'bool'>
               2 = 123456789 = False <type 'bool'>
               2 > 123456789 = False <type 'bool'>
               2 <= 123456789 = True <type 'bool'>
               2 != 123456789 = True <type 'bool'>
               2 >= 123456789 = False <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               2 + 12345678901234567890123456789 = 12345678901234567890123456791 <type 'long'>
               2 - 12345678901234567890123456789 = -12345678901234567890123456787 <type 'long'>
               2 * 12345678901234567890123456789 = 24691357802469135780246913578 <type 'long'>
               2 / 12345678901234567890123456789 = 0 <type 'long'>
skipping pow of really big number
               2 % 12345678901234567890123456789 = 2 <type 'long'>
               2 < 12345678901234567890123456789 = True <type 'bool'>
               2 = 12345678901234567890123456789 = False <type 'bool'>
               2 > 12345678901234567890123456789 = False <type 'bool'>
               2 <= 12345678901234567890123456789 = True <type 'bool'>
               2 != 12345678901234567890123456789 = True <type 'bool'>
               2 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'float'> 2.0
     Op 2 :::  <type 'int'> 1
               2.0 + 1 = 3.0 <type 'float'>
               2.0 - 1 = 1.0 <type 'float'>
               2.0 * 1 = 2.0 <type 'float'>
               2.0 / 1 = 2.0 <type 'float'>
               2.0 ** 1 = 2.0 <type 'float'>
               2.0 % 1 = 0.0 <type 'float'>
               2.0 < 1 = False <type 'bool'>
               2.0 = 1 = False <type 'bool'>
               2.0 > 1 = True <type 'bool'>
               2.0 <= 1 = False <type 'bool'>
               2.0 != 1 = True <type 'bool'>
               2.0 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               2.0 + 1.0 = 3.0 <type 'float'>
               2.0 - 1.0 = 1.0 <type 'float'>
               2.0 * 1.0 = 2.0 <type 'float'>
               2.0 / 1.0 = 2.0 <type 'float'>
               2.0 ** 1.0 = 2.0 <type 'float'>
               2.0 % 1.0 = 0.0 <type 'float'>
               2.0 < 1.0 = False <type 'bool'>
               2.0 = 1.0 = False <type 'bool'>
               2.0 > 1.0 = True <type 'bool'>
               2.0 <= 1.0 = False <type 'bool'>
               2.0 != 1.0 = True <type 'bool'>
               2.0 >= 1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> 1
               2.0 + 1 = 3.0 <type 'float'>
               2.0 - 1 = 1.0 <type 'float'>
               2.0 * 1 = 2.0 <type 'float'>
               2.0 / 1 = 2.0 <type 'float'>
               2.0 ** 1 = 2.0 <type 'float'>
               2.0 % 1 = 0.0 <type 'float'>
               2.0 < 1 = False <type 'bool'>
               2.0 = 1 = False <type 'bool'>
               2.0 > 1 = True <type 'bool'>
               2.0 <= 1 = False <type 'bool'>
               2.0 != 1 = True <type 'bool'>
               2.0 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'int'> -1
               2.0 + -1 = 1.0 <type 'float'>
               2.0 - -1 = 3.0 <type 'float'>
               2.0 * -1 = -2.0 <type 'float'>
               2.0 / -1 = -2.0 <type 'float'>
               2.0 ** -1 = 0.5 <type 'float'>
               2.0 % -1 = 0.0 <type 'float'>
               2.0 < -1 = False <type 'bool'>
               2.0 = -1 = False <type 'bool'>
               2.0 > -1 = True <type 'bool'>
               2.0 <= -1 = False <type 'bool'>
               2.0 != -1 = True <type 'bool'>
               2.0 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               2.0 + -1.0 = 1.0 <type 'float'>
               2.0 - -1.0 = 3.0 <type 'float'>
               2.0 * -1.0 = -2.0 <type 'float'>
               2.0 / -1.0 = -2.0 <type 'float'>
               2.0 ** -1.0 = 0.5 <type 'float'>
               2.0 % -1.0 = 0.0 <type 'float'>
               2.0 < -1.0 = False <type 'bool'>
               2.0 = -1.0 = False <type 'bool'>
               2.0 > -1.0 = True <type 'bool'>
               2.0 <= -1.0 = False <type 'bool'>
               2.0 != -1.0 = True <type 'bool'>
               2.0 >= -1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -1
               2.0 + -1 = 1.0 <type 'float'>
               2.0 - -1 = 3.0 <type 'float'>
               2.0 * -1 = -2.0 <type 'float'>
               2.0 / -1 = -2.0 <type 'float'>
               2.0 ** -1 = 0.5 <type 'float'>
               2.0 % -1 = 0.0 <type 'float'>
               2.0 < -1 = False <type 'bool'>
               2.0 = -1 = False <type 'bool'>
               2.0 > -1 = True <type 'bool'>
               2.0 <= -1 = False <type 'bool'>
               2.0 != -1 = True <type 'bool'>
               2.0 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'int'> 2
               2.0 + 2 = 4.0 <type 'float'>
               2.0 - 2 = 0.0 <type 'float'>
               2.0 * 2 = 4.0 <type 'float'>
               2.0 / 2 = 1.0 <type 'float'>
               2.0 ** 2 = 4.0 <type 'float'>
               2.0 % 2 = 0.0 <type 'float'>
               2.0 < 2 = False <type 'bool'>
               2.0 = 2 = True <type 'bool'>
               2.0 > 2 = False <type 'bool'>
               2.0 <= 2 = True <type 'bool'>
               2.0 != 2 = False <type 'bool'>
               2.0 >= 2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               2.0 + 2.0 = 4.0 <type 'float'>
               2.0 - 2.0 = 0.0 <type 'float'>
               2.0 * 2.0 = 4.0 <type 'float'>
               2.0 / 2.0 = 1.0 <type 'float'>
               2.0 ** 2.0 = 4.0 <type 'float'>
               2.0 % 2.0 = 0.0 <type 'float'>
               2.0 < 2.0 = False <type 'bool'>
               2.0 = 2.0 = True <type 'bool'>
               2.0 > 2.0 = False <type 'bool'>
               2.0 <= 2.0 = True <type 'bool'>
               2.0 != 2.0 = False <type 'bool'>
               2.0 >= 2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> 2
               2.0 + 2 = 4.0 <type 'float'>
               2.0 - 2 = 0.0 <type 'float'>
               2.0 * 2 = 4.0 <type 'float'>
               2.0 / 2 = 1.0 <type 'float'>
               2.0 ** 2 = 4.0 <type 'float'>
               2.0 % 2 = 0.0 <type 'float'>
               2.0 < 2 = False <type 'bool'>
               2.0 = 2 = True <type 'bool'>
               2.0 > 2 = False <type 'bool'>
               2.0 <= 2 = True <type 'bool'>
               2.0 != 2 = False <type 'bool'>
               2.0 >= 2 = True <type 'bool'>
     Op 2 :::  <type 'int'> -2
               2.0 + -2 = 0.0 <type 'float'>
               2.0 - -2 = 4.0 <type 'float'>
               2.0 * -2 = -4.0 <type 'float'>
               2.0 / -2 = -1.0 <type 'float'>
               2.0 ** -2 = 0.25 <type 'float'>
               2.0 % -2 = 0.0 <type 'float'>
               2.0 < -2 = False <type 'bool'>
               2.0 = -2 = False <type 'bool'>
               2.0 > -2 = True <type 'bool'>
               2.0 <= -2 = False <type 'bool'>
               2.0 != -2 = True <type 'bool'>
               2.0 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               2.0 + -2.0 = 0.0 <type 'float'>
               2.0 - -2.0 = 4.0 <type 'float'>
               2.0 * -2.0 = -4.0 <type 'float'>
               2.0 / -2.0 = -1.0 <type 'float'>
               2.0 ** -2.0 = 0.25 <type 'float'>
               2.0 % -2.0 = 0.0 <type 'float'>
               2.0 < -2.0 = False <type 'bool'>
               2.0 = -2.0 = False <type 'bool'>
               2.0 > -2.0 = True <type 'bool'>
               2.0 <= -2.0 = False <type 'bool'>
               2.0 != -2.0 = True <type 'bool'>
               2.0 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               2.0 + -2 = 0.0 <type 'float'>
               2.0 - -2 = 4.0 <type 'float'>
               2.0 * -2 = -4.0 <type 'float'>
               2.0 / -2 = -1.0 <type 'float'>
               2.0 ** -2 = 0.25 <type 'float'>
               2.0 % -2 = 0.0 <type 'float'>
               2.0 < -2 = False <type 'bool'>
               2.0 = -2 = False <type 'bool'>
               2.0 > -2 = True <type 'bool'>
               2.0 <= -2 = False <type 'bool'>
               2.0 != -2 = True <type 'bool'>
               2.0 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               2.0 + 1000000000.0 = 1000000002.0 <type 'float'>
               2.0 - 1000000000.0 = -999999998.0 <type 'float'>
               2.0 * 1000000000.0 = 2000000000.0 <type 'float'>
               2.0 / 1000000000.0 = 2e-09 <type 'float'>
skipping pow of really big number
               2.0 % 1000000000.0 = 2.0 <type 'float'>
               2.0 < 1000000000.0 = True <type 'bool'>
               2.0 = 1000000000.0 = False <type 'bool'>
               2.0 > 1000000000.0 = False <type 'bool'>
               2.0 <= 1000000000.0 = True <type 'bool'>
               2.0 != 1000000000.0 = True <type 'bool'>
               2.0 >= 1000000000.0 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               2.0 + -1000000000.0 = -999999998.0 <type 'float'>
               2.0 - -1000000000.0 = 1000000002.0 <type 'float'>
               2.0 * -1000000000.0 = -2000000000.0 <type 'float'>
               2.0 / -1000000000.0 = -2e-09 <type 'float'>
               2.0 ** -1000000000.0 = 0.0 <type 'float'>
               2.0 % -1000000000.0 = -999999998.0 <type 'float'>
               2.0 < -1000000000.0 = False <type 'bool'>
               2.0 = -1000000000.0 = False <type 'bool'>
               2.0 > -1000000000.0 = True <type 'bool'>
               2.0 <= -1000000000.0 = False <type 'bool'>
               2.0 != -1000000000.0 = True <type 'bool'>
               2.0 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               2.0 + 1e-09 = 2.000000001 <type 'float'>
               2.0 - 1e-09 = 1.999999999 <type 'float'>
               2.0 * 1e-09 = 2e-09 <type 'float'>
               2.0 / 1e-09 = 2000000000.0 <type 'float'>
               2.0 ** 1e-09 = 1.00000000069 <type 'float'>
               2.0 % 1e-09 = 9.99999875437e-10 <type 'float'>
               2.0 < 1e-09 = False <type 'bool'>
               2.0 = 1e-09 = False <type 'bool'>
               2.0 > 1e-09 = True <type 'bool'>
               2.0 <= 1e-09 = False <type 'bool'>
               2.0 != 1e-09 = True <type 'bool'>
               2.0 >= 1e-09 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               2.0 + -1e-09 = 1.999999999 <type 'float'>
               2.0 - -1e-09 = 2.000000001 <type 'float'>
               2.0 * -1e-09 = -2e-09 <type 'float'>
               2.0 / -1e-09 = -2000000000.0 <type 'float'>
               2.0 ** -1e-09 = 0.999999999307 <type 'float'>
               2.0 % -1e-09 = -1.24563182916e-16 <type 'float'>
               2.0 < -1e-09 = False <type 'bool'>
               2.0 = -1e-09 = False <type 'bool'>
               2.0 > -1e-09 = True <type 'bool'>
               2.0 <= -1e-09 = False <type 'bool'>
               2.0 != -1e-09 = True <type 'bool'>
               2.0 >= -1e-09 = True <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               2.0 + 123456789 = 123456791.0 <type 'float'>
               2.0 - 123456789 = -123456787.0 <type 'float'>
               2.0 * 123456789 = 246913578.0 <type 'float'>
               2.0 / 123456789 = 1.62000001474e-08 <type 'float'>
skipping pow of really big number
               2.0 % 123456789 = 2.0 <type 'float'>
               2.0 < 123456789 = True <type 'bool'>
               2.0 = 123456789 = False <type 'bool'>
               2.0 > 123456789 = False <type 'bool'>
               2.0 <= 123456789 = True <type 'bool'>
               2.0 != 123456789 = True <type 'bool'>
               2.0 >= 123456789 = False <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               2.0 + 12345678901234567890123456789 = 1.23456789012e+28 <type 'float'>
               2.0 - 12345678901234567890123456789 = -1.23456789012e+28 <type 'float'>
               2.0 * 12345678901234567890123456789 = 2.46913578025e+28 <type 'float'>
               2.0 / 12345678901234567890123456789 = 1.62000001458e-28 <type 'float'>
skipping pow of really big number
               2.0 % 12345678901234567890123456789 = 2.0 <type 'float'>
               2.0 < 12345678901234567890123456789 = True <type 'bool'>
               2.0 = 12345678901234567890123456789 = False <type 'bool'>
               2.0 > 12345678901234567890123456789 = False <type 'bool'>
               2.0 <= 12345678901234567890123456789 = True <type 'bool'>
               2.0 != 12345678901234567890123456789 = True <type 'bool'>
               2.0 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'long'> 2
     Op 2 :::  <type 'int'> 1
               2 + 1 = 3 <type 'long'>
               2 - 1 = 1 <type 'long'>
               2 * 1 = 2 <type 'long'>
               2 / 1 = 2 <type 'long'>
               2 ** 1 = 2 <type 'long'>
               2 % 1 = 0 <type 'long'>
               2 < 1 = False <type 'bool'>
               2 = 1 = False <type 'bool'>
               2 > 1 = True <type 'bool'>
               2 <= 1 = False <type 'bool'>
               2 != 1 = True <type 'bool'>
               2 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               2 + 1.0 = 3.0 <type 'float'>
               2 - 1.0 = 1.0 <type 'float'>
               2 * 1.0 = 2.0 <type 'float'>
               2 / 1.0 = 2.0 <type 'float'>
               2 ** 1.0 = 2.0 <type 'float'>
               2 % 1.0 = 0.0 <type 'float'>
               2 < 1.0 = False <type 'bool'>
               2 = 1.0 = False <type 'bool'>
               2 > 1.0 = True <type 'bool'>
               2 <= 1.0 = False <type 'bool'>
               2 != 1.0 = True <type 'bool'>
               2 >= 1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> 1
               2 + 1 = 3 <type 'long'>
               2 - 1 = 1 <type 'long'>
               2 * 1 = 2 <type 'long'>
               2 / 1 = 2 <type 'long'>
               2 ** 1 = 2 <type 'long'>
               2 % 1 = 0 <type 'long'>
               2 < 1 = False <type 'bool'>
               2 = 1 = False <type 'bool'>
               2 > 1 = True <type 'bool'>
               2 <= 1 = False <type 'bool'>
               2 != 1 = True <type 'bool'>
               2 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'int'> -1
               2 + -1 = 1 <type 'long'>
               2 - -1 = 3 <type 'long'>
               2 * -1 = -2 <type 'long'>
               2 / -1 = -2 <type 'long'>
               2 ** -1 = 0.5 <type 'float'>
               2 % -1 = 0 <type 'long'>
               2 < -1 = False <type 'bool'>
               2 = -1 = False <type 'bool'>
               2 > -1 = True <type 'bool'>
               2 <= -1 = False <type 'bool'>
               2 != -1 = True <type 'bool'>
               2 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               2 + -1.0 = 1.0 <type 'float'>
               2 - -1.0 = 3.0 <type 'float'>
               2 * -1.0 = -2.0 <type 'float'>
               2 / -1.0 = -2.0 <type 'float'>
               2 ** -1.0 = 0.5 <type 'float'>
               2 % -1.0 = 0.0 <type 'float'>
               2 < -1.0 = False <type 'bool'>
               2 = -1.0 = False <type 'bool'>
               2 > -1.0 = True <type 'bool'>
               2 <= -1.0 = False <type 'bool'>
               2 != -1.0 = True <type 'bool'>
               2 >= -1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -1
               2 + -1 = 1 <type 'long'>
               2 - -1 = 3 <type 'long'>
               2 * -1 = -2 <type 'long'>
               2 / -1 = -2 <type 'long'>
               2 ** -1 = 0.5 <type 'float'>
               2 % -1 = 0 <type 'long'>
               2 < -1 = False <type 'bool'>
               2 = -1 = False <type 'bool'>
               2 > -1 = True <type 'bool'>
               2 <= -1 = False <type 'bool'>
               2 != -1 = True <type 'bool'>
               2 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'int'> 2
               2 + 2 = 4 <type 'long'>
               2 - 2 = 0 <type 'long'>
               2 * 2 = 4 <type 'long'>
               2 / 2 = 1 <type 'long'>
               2 ** 2 = 4 <type 'long'>
               2 % 2 = 0 <type 'long'>
               2 < 2 = False <type 'bool'>
               2 = 2 = True <type 'bool'>
               2 > 2 = False <type 'bool'>
               2 <= 2 = True <type 'bool'>
               2 != 2 = False <type 'bool'>
               2 >= 2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               2 + 2.0 = 4.0 <type 'float'>
               2 - 2.0 = 0.0 <type 'float'>
               2 * 2.0 = 4.0 <type 'float'>
               2 / 2.0 = 1.0 <type 'float'>
               2 ** 2.0 = 4.0 <type 'float'>
               2 % 2.0 = 0.0 <type 'float'>
               2 < 2.0 = False <type 'bool'>
               2 = 2.0 = True <type 'bool'>
               2 > 2.0 = False <type 'bool'>
               2 <= 2.0 = True <type 'bool'>
               2 != 2.0 = False <type 'bool'>
               2 >= 2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> 2
               2 + 2 = 4 <type 'long'>
               2 - 2 = 0 <type 'long'>
               2 * 2 = 4 <type 'long'>
               2 / 2 = 1 <type 'long'>
               2 ** 2 = 4 <type 'long'>
               2 % 2 = 0 <type 'long'>
               2 < 2 = False <type 'bool'>
               2 = 2 = True <type 'bool'>
               2 > 2 = False <type 'bool'>
               2 <= 2 = True <type 'bool'>
               2 != 2 = False <type 'bool'>
               2 >= 2 = True <type 'bool'>
     Op 2 :::  <type 'int'> -2
               2 + -2 = 0 <type 'long'>
               2 - -2 = 4 <type 'long'>
               2 * -2 = -4 <type 'long'>
               2 / -2 = -1 <type 'long'>
               2 ** -2 = 0.25 <type 'float'>
               2 % -2 = 0 <type 'long'>
               2 < -2 = False <type 'bool'>
               2 = -2 = False <type 'bool'>
               2 > -2 = True <type 'bool'>
               2 <= -2 = False <type 'bool'>
               2 != -2 = True <type 'bool'>
               2 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               2 + -2.0 = 0.0 <type 'float'>
               2 - -2.0 = 4.0 <type 'float'>
               2 * -2.0 = -4.0 <type 'float'>
               2 / -2.0 = -1.0 <type 'float'>
               2 ** -2.0 = 0.25 <type 'float'>
               2 % -2.0 = 0.0 <type 'float'>
               2 < -2.0 = False <type 'bool'>
               2 = -2.0 = False <type 'bool'>
               2 > -2.0 = True <type 'bool'>
               2 <= -2.0 = False <type 'bool'>
               2 != -2.0 = True <type 'bool'>
               2 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               2 + -2 = 0 <type 'long'>
               2 - -2 = 4 <type 'long'>
               2 * -2 = -4 <type 'long'>
               2 / -2 = -1 <type 'long'>
               2 ** -2 = 0.25 <type 'float'>
               2 % -2 = 0 <type 'long'>
               2 < -2 = False <type 'bool'>
               2 = -2 = False <type 'bool'>
               2 > -2 = True <type 'bool'>
               2 <= -2 = False <type 'bool'>
               2 != -2 = True <type 'bool'>
               2 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               2 + 1000000000.0 = 1000000002.0 <type 'float'>
               2 - 1000000000.0 = -999999998.0 <type 'float'>
               2 * 1000000000.0 = 2000000000.0 <type 'float'>
               2 / 1000000000.0 = 2e-09 <type 'float'>
skipping pow of really big number
               2 % 1000000000.0 = 2.0 <type 'float'>
               2 < 1000000000.0 = True <type 'bool'>
               2 = 1000000000.0 = False <type 'bool'>
               2 > 1000000000.0 = False <type 'bool'>
               2 <= 1000000000.0 = True <type 'bool'>
               2 != 1000000000.0 = True <type 'bool'>
               2 >= 1000000000.0 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               2 + -1000000000.0 = -999999998.0 <type 'float'>
               2 - -1000000000.0 = 1000000002.0 <type 'float'>
               2 * -1000000000.0 = -2000000000.0 <type 'float'>
               2 / -1000000000.0 = -2e-09 <type 'float'>
               2 ** -1000000000.0 = 0.0 <type 'float'>
               2 % -1000000000.0 = -999999998.0 <type 'float'>
               2 < -1000000000.0 = False <type 'bool'>
               2 = -1000000000.0 = False <type 'bool'>
               2 > -1000000000.0 = True <type 'bool'>
               2 <= -1000000000.0 = False <type 'bool'>
               2 != -1000000000.0 = True <type 'bool'>
               2 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               2 + 1e-09 = 2.000000001 <type 'float'>
               2 - 1e-09 = 1.999999999 <type 'float'>
               2 * 1e-09 = 2e-09 <type 'float'>
               2 / 1e-09 = 2000000000.0 <type 'float'>
               2 ** 1e-09 = 1.00000000069 <type 'float'>
               2 % 1e-09 = 9.99999875437e-10 <type 'float'>
               2 < 1e-09 = False <type 'bool'>
               2 = 1e-09 = False <type 'bool'>
               2 > 1e-09 = True <type 'bool'>
               2 <= 1e-09 = False <type 'bool'>
               2 != 1e-09 = True <type 'bool'>
               2 >= 1e-09 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               2 + -1e-09 = 1.999999999 <type 'float'>
               2 - -1e-09 = 2.000000001 <type 'float'>
               2 * -1e-09 = -2e-09 <type 'float'>
               2 / -1e-09 = -2000000000.0 <type 'float'>
               2 ** -1e-09 = 0.999999999307 <type 'float'>
               2 % -1e-09 = -1.24563182916e-16 <type 'float'>
               2 < -1e-09 = False <type 'bool'>
               2 = -1e-09 = False <type 'bool'>
               2 > -1e-09 = True <type 'bool'>
               2 <= -1e-09 = False <type 'bool'>
               2 != -1e-09 = True <type 'bool'>
               2 >= -1e-09 = True <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               2 + 123456789 = 123456791 <type 'long'>
               2 - 123456789 = -123456787 <type 'long'>
               2 * 123456789 = 246913578 <type 'long'>
               2 / 123456789 = 0 <type 'long'>
skipping pow of really big number
               2 % 123456789 = 2 <type 'long'>
               2 < 123456789 = True <type 'bool'>
               2 = 123456789 = False <type 'bool'>
               2 > 123456789 = False <type 'bool'>
               2 <= 123456789 = True <type 'bool'>
               2 != 123456789 = True <type 'bool'>
               2 >= 123456789 = False <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               2 + 12345678901234567890123456789 = 12345678901234567890123456791 <type 'long'>
               2 - 12345678901234567890123456789 = -12345678901234567890123456787 <type 'long'>
               2 * 12345678901234567890123456789 = 24691357802469135780246913578 <type 'long'>
               2 / 12345678901234567890123456789 = 0 <type 'long'>
skipping pow of really big number
               2 % 12345678901234567890123456789 = 2 <type 'long'>
               2 < 12345678901234567890123456789 = True <type 'bool'>
               2 = 12345678901234567890123456789 = False <type 'bool'>
               2 > 12345678901234567890123456789 = False <type 'bool'>
               2 <= 12345678901234567890123456789 = True <type 'bool'>
               2 != 12345678901234567890123456789 = True <type 'bool'>
               2 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'int'> -2
     Op 2 :::  <type 'int'> 1
               -2 + 1 = -1 <type 'int'>
               -2 - 1 = -3 <type 'int'>
               -2 * 1 = -2 <type 'int'>
               -2 / 1 = -2 <type 'int'>
               -2 ** 1 = -2 <type 'int'>
               -2 % 1 = 0 <type 'int'>
               -2 < 1 = True <type 'bool'>
               -2 = 1 = False <type 'bool'>
               -2 > 1 = False <type 'bool'>
               -2 <= 1 = True <type 'bool'>
               -2 != 1 = True <type 'bool'>
               -2 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               -2 + 1.0 = -1.0 <type 'float'>
               -2 - 1.0 = -3.0 <type 'float'>
               -2 * 1.0 = -2.0 <type 'float'>
               -2 / 1.0 = -2.0 <type 'float'>
               -2 ** 1.0 = -2.0 <type 'float'>
               -2 % 1.0 = 0.0 <type 'float'>
               -2 < 1.0 = True <type 'bool'>
               -2 = 1.0 = False <type 'bool'>
               -2 > 1.0 = False <type 'bool'>
               -2 <= 1.0 = True <type 'bool'>
               -2 != 1.0 = True <type 'bool'>
               -2 >= 1.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 1
               -2 + 1 = -1 <type 'long'>
               -2 - 1 = -3 <type 'long'>
               -2 * 1 = -2 <type 'long'>
               -2 / 1 = -2 <type 'long'>
               -2 ** 1 = -2 <type 'long'>
               -2 % 1 = 0 <type 'long'>
               -2 < 1 = True <type 'bool'>
               -2 = 1 = False <type 'bool'>
               -2 > 1 = False <type 'bool'>
               -2 <= 1 = True <type 'bool'>
               -2 != 1 = True <type 'bool'>
               -2 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'int'> -1
               -2 + -1 = -3 <type 'int'>
               -2 - -1 = -1 <type 'int'>
               -2 * -1 = 2 <type 'int'>
               -2 / -1 = 2 <type 'int'>
               -2 ** -1 = -0.5 <type 'float'>
               -2 % -1 = 0 <type 'int'>
               -2 < -1 = True <type 'bool'>
               -2 = -1 = False <type 'bool'>
               -2 > -1 = False <type 'bool'>
               -2 <= -1 = True <type 'bool'>
               -2 != -1 = True <type 'bool'>
               -2 >= -1 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               -2 + -1.0 = -3.0 <type 'float'>
               -2 - -1.0 = -1.0 <type 'float'>
               -2 * -1.0 = 2.0 <type 'float'>
               -2 / -1.0 = 2.0 <type 'float'>
               -2 ** -1.0 = -0.5 <type 'float'>
               -2 % -1.0 = 0.0 <type 'float'>
               -2 < -1.0 = True <type 'bool'>
               -2 = -1.0 = False <type 'bool'>
               -2 > -1.0 = False <type 'bool'>
               -2 <= -1.0 = True <type 'bool'>
               -2 != -1.0 = True <type 'bool'>
               -2 >= -1.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> -1
               -2 + -1 = -3 <type 'long'>
               -2 - -1 = -1 <type 'long'>
               -2 * -1 = 2 <type 'long'>
               -2 / -1 = 2 <type 'long'>
               -2 ** -1 = -0.5 <type 'float'>
               -2 % -1 = 0 <type 'long'>
               -2 < -1 = True <type 'bool'>
               -2 = -1 = False <type 'bool'>
               -2 > -1 = False <type 'bool'>
               -2 <= -1 = True <type 'bool'>
               -2 != -1 = True <type 'bool'>
               -2 >= -1 = False <type 'bool'>
     Op 2 :::  <type 'int'> 2
               -2 + 2 = 0 <type 'int'>
               -2 - 2 = -4 <type 'int'>
               -2 * 2 = -4 <type 'int'>
               -2 / 2 = -1 <type 'int'>
               -2 ** 2 = 4 <type 'int'>
               -2 % 2 = 0 <type 'int'>
               -2 < 2 = True <type 'bool'>
               -2 = 2 = False <type 'bool'>
               -2 > 2 = False <type 'bool'>
               -2 <= 2 = True <type 'bool'>
               -2 != 2 = True <type 'bool'>
               -2 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               -2 + 2.0 = 0.0 <type 'float'>
               -2 - 2.0 = -4.0 <type 'float'>
               -2 * 2.0 = -4.0 <type 'float'>
               -2 / 2.0 = -1.0 <type 'float'>
               -2 ** 2.0 = 4.0 <type 'float'>
               -2 % 2.0 = 0.0 <type 'float'>
               -2 < 2.0 = True <type 'bool'>
               -2 = 2.0 = False <type 'bool'>
               -2 > 2.0 = False <type 'bool'>
               -2 <= 2.0 = True <type 'bool'>
               -2 != 2.0 = True <type 'bool'>
               -2 >= 2.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 2
               -2 + 2 = 0 <type 'long'>
               -2 - 2 = -4 <type 'long'>
               -2 * 2 = -4 <type 'long'>
               -2 / 2 = -1 <type 'long'>
               -2 ** 2 = 4 <type 'long'>
               -2 % 2 = 0 <type 'long'>
               -2 < 2 = True <type 'bool'>
               -2 = 2 = False <type 'bool'>
               -2 > 2 = False <type 'bool'>
               -2 <= 2 = True <type 'bool'>
               -2 != 2 = True <type 'bool'>
               -2 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'int'> -2
               -2 + -2 = -4 <type 'int'>
               -2 - -2 = 0 <type 'int'>
               -2 * -2 = 4 <type 'int'>
               -2 / -2 = 1 <type 'int'>
               -2 ** -2 = 0.25 <type 'float'>
               -2 % -2 = 0 <type 'int'>
               -2 < -2 = False <type 'bool'>
               -2 = -2 = True <type 'bool'>
               -2 > -2 = False <type 'bool'>
               -2 <= -2 = True <type 'bool'>
               -2 != -2 = False <type 'bool'>
               -2 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               -2 + -2.0 = -4.0 <type 'float'>
               -2 - -2.0 = 0.0 <type 'float'>
               -2 * -2.0 = 4.0 <type 'float'>
               -2 / -2.0 = 1.0 <type 'float'>
               -2 ** -2.0 = 0.25 <type 'float'>
               -2 % -2.0 = 0.0 <type 'float'>
               -2 < -2.0 = False <type 'bool'>
               -2 = -2.0 = True <type 'bool'>
               -2 > -2.0 = False <type 'bool'>
               -2 <= -2.0 = True <type 'bool'>
               -2 != -2.0 = False <type 'bool'>
               -2 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               -2 + -2 = -4 <type 'long'>
               -2 - -2 = 0 <type 'long'>
               -2 * -2 = 4 <type 'long'>
               -2 / -2 = 1 <type 'long'>
               -2 ** -2 = 0.25 <type 'float'>
               -2 % -2 = 0 <type 'long'>
               -2 < -2 = False <type 'bool'>
               -2 = -2 = True <type 'bool'>
               -2 > -2 = False <type 'bool'>
               -2 <= -2 = True <type 'bool'>
               -2 != -2 = False <type 'bool'>
               -2 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               -2 + 1000000000.0 = 999999998.0 <type 'float'>
               -2 - 1000000000.0 = -1000000002.0 <type 'float'>
               -2 * 1000000000.0 = -2000000000.0 <type 'float'>
               -2 / 1000000000.0 = -2e-09 <type 'float'>
skipping pow of really big number
               -2 % 1000000000.0 = 999999998.0 <type 'float'>
               -2 < 1000000000.0 = True <type 'bool'>
               -2 = 1000000000.0 = False <type 'bool'>
               -2 > 1000000000.0 = False <type 'bool'>
               -2 <= 1000000000.0 = True <type 'bool'>
               -2 != 1000000000.0 = True <type 'bool'>
               -2 >= 1000000000.0 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               -2 + -1000000000.0 = -1000000002.0 <type 'float'>
               -2 - -1000000000.0 = 999999998.0 <type 'float'>
               -2 * -1000000000.0 = 2000000000.0 <type 'float'>
               -2 / -1000000000.0 = 2e-09 <type 'float'>
               -2 ** -1000000000.0 = 0.0 <type 'float'>
               -2 % -1000000000.0 = -2.0 <type 'float'>
               -2 < -1000000000.0 = False <type 'bool'>
               -2 = -1000000000.0 = False <type 'bool'>
               -2 > -1000000000.0 = True <type 'bool'>
               -2 <= -1000000000.0 = False <type 'bool'>
               -2 != -1000000000.0 = True <type 'bool'>
               -2 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               -2 + 1e-09 = -1.999999999 <type 'float'>
               -2 - 1e-09 = -2.000000001 <type 'float'>
               -2 * 1e-09 = -2e-09 <type 'float'>
               -2 / 1e-09 = -2000000000.0 <type 'float'>
               -2 ** 1e-09 = Can't  <type 'int'> ** <type 'float'>
               -2 % 1e-09 = 1.24563182916e-16 <type 'float'>
               -2 < 1e-09 = True <type 'bool'>
               -2 = 1e-09 = False <type 'bool'>
               -2 > 1e-09 = False <type 'bool'>
               -2 <= 1e-09 = True <type 'bool'>
               -2 != 1e-09 = True <type 'bool'>
               -2 >= 1e-09 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               -2 + -1e-09 = -2.000000001 <type 'float'>
               -2 - -1e-09 = -1.999999999 <type 'float'>
               -2 * -1e-09 = 2e-09 <type 'float'>
               -2 / -1e-09 = 2000000000.0 <type 'float'>
               -2 ** -1e-09 = Can't  <type 'int'> ** <type 'float'>
               -2 % -1e-09 = -9.99999875437e-10 <type 'float'>
               -2 < -1e-09 = True <type 'bool'>
               -2 = -1e-09 = False <type 'bool'>
               -2 > -1e-09 = False <type 'bool'>
               -2 <= -1e-09 = True <type 'bool'>
               -2 != -1e-09 = True <type 'bool'>
               -2 >= -1e-09 = False <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               -2 + 123456789 = 123456787 <type 'long'>
               -2 - 123456789 = -123456791 <type 'long'>
               -2 * 123456789 = -246913578 <type 'long'>
               -2 / 123456789 = -1 <type 'long'>
skipping pow of really big number
               -2 % 123456789 = 123456787 <type 'long'>
               -2 < 123456789 = True <type 'bool'>
               -2 = 123456789 = False <type 'bool'>
               -2 > 123456789 = False <type 'bool'>
               -2 <= 123456789 = True <type 'bool'>
               -2 != 123456789 = True <type 'bool'>
               -2 >= 123456789 = False <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               -2 + 12345678901234567890123456789 = 12345678901234567890123456787 <type 'long'>
               -2 - 12345678901234567890123456789 = -12345678901234567890123456791 <type 'long'>
               -2 * 12345678901234567890123456789 = -24691357802469135780246913578 <type 'long'>
               -2 / 12345678901234567890123456789 = -1 <type 'long'>
skipping pow of really big number
               -2 % 12345678901234567890123456789 = 12345678901234567890123456787 <type 'long'>
               -2 < 12345678901234567890123456789 = True <type 'bool'>
               -2 = 12345678901234567890123456789 = False <type 'bool'>
               -2 > 12345678901234567890123456789 = False <type 'bool'>
               -2 <= 12345678901234567890123456789 = True <type 'bool'>
               -2 != 12345678901234567890123456789 = True <type 'bool'>
               -2 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'float'> -2.0
     Op 2 :::  <type 'int'> 1
               -2.0 + 1 = -1.0 <type 'float'>
               -2.0 - 1 = -3.0 <type 'float'>
               -2.0 * 1 = -2.0 <type 'float'>
               -2.0 / 1 = -2.0 <type 'float'>
               -2.0 ** 1 = -2.0 <type 'float'>
               -2.0 % 1 = 0.0 <type 'float'>
               -2.0 < 1 = True <type 'bool'>
               -2.0 = 1 = False <type 'bool'>
               -2.0 > 1 = False <type 'bool'>
               -2.0 <= 1 = True <type 'bool'>
               -2.0 != 1 = True <type 'bool'>
               -2.0 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               -2.0 + 1.0 = -1.0 <type 'float'>
               -2.0 - 1.0 = -3.0 <type 'float'>
               -2.0 * 1.0 = -2.0 <type 'float'>
               -2.0 / 1.0 = -2.0 <type 'float'>
               -2.0 ** 1.0 = -2.0 <type 'float'>
               -2.0 % 1.0 = 0.0 <type 'float'>
               -2.0 < 1.0 = True <type 'bool'>
               -2.0 = 1.0 = False <type 'bool'>
               -2.0 > 1.0 = False <type 'bool'>
               -2.0 <= 1.0 = True <type 'bool'>
               -2.0 != 1.0 = True <type 'bool'>
               -2.0 >= 1.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 1
               -2.0 + 1 = -1.0 <type 'float'>
               -2.0 - 1 = -3.0 <type 'float'>
               -2.0 * 1 = -2.0 <type 'float'>
               -2.0 / 1 = -2.0 <type 'float'>
               -2.0 ** 1 = -2.0 <type 'float'>
               -2.0 % 1 = 0.0 <type 'float'>
               -2.0 < 1 = True <type 'bool'>
               -2.0 = 1 = False <type 'bool'>
               -2.0 > 1 = False <type 'bool'>
               -2.0 <= 1 = True <type 'bool'>
               -2.0 != 1 = True <type 'bool'>
               -2.0 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'int'> -1
               -2.0 + -1 = -3.0 <type 'float'>
               -2.0 - -1 = -1.0 <type 'float'>
               -2.0 * -1 = 2.0 <type 'float'>
               -2.0 / -1 = 2.0 <type 'float'>
               -2.0 ** -1 = -0.5 <type 'float'>
               -2.0 % -1 = 0.0 <type 'float'>
               -2.0 < -1 = True <type 'bool'>
               -2.0 = -1 = False <type 'bool'>
               -2.0 > -1 = False <type 'bool'>
               -2.0 <= -1 = True <type 'bool'>
               -2.0 != -1 = True <type 'bool'>
               -2.0 >= -1 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               -2.0 + -1.0 = -3.0 <type 'float'>
               -2.0 - -1.0 = -1.0 <type 'float'>
               -2.0 * -1.0 = 2.0 <type 'float'>
               -2.0 / -1.0 = 2.0 <type 'float'>
               -2.0 ** -1.0 = -0.5 <type 'float'>
               -2.0 % -1.0 = 0.0 <type 'float'>
               -2.0 < -1.0 = True <type 'bool'>
               -2.0 = -1.0 = False <type 'bool'>
               -2.0 > -1.0 = False <type 'bool'>
               -2.0 <= -1.0 = True <type 'bool'>
               -2.0 != -1.0 = True <type 'bool'>
               -2.0 >= -1.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> -1
               -2.0 + -1 = -3.0 <type 'float'>
               -2.0 - -1 = -1.0 <type 'float'>
               -2.0 * -1 = 2.0 <type 'float'>
               -2.0 / -1 = 2.0 <type 'float'>
               -2.0 ** -1 = -0.5 <type 'float'>
               -2.0 % -1 = 0.0 <type 'float'>
               -2.0 < -1 = True <type 'bool'>
               -2.0 = -1 = False <type 'bool'>
               -2.0 > -1 = False <type 'bool'>
               -2.0 <= -1 = True <type 'bool'>
               -2.0 != -1 = True <type 'bool'>
               -2.0 >= -1 = False <type 'bool'>
     Op 2 :::  <type 'int'> 2
               -2.0 + 2 = 0.0 <type 'float'>
               -2.0 - 2 = -4.0 <type 'float'>
               -2.0 * 2 = -4.0 <type 'float'>
               -2.0 / 2 = -1.0 <type 'float'>
               -2.0 ** 2 = 4.0 <type 'float'>
               -2.0 % 2 = 0.0 <type 'float'>
               -2.0 < 2 = True <type 'bool'>
               -2.0 = 2 = False <type 'bool'>
               -2.0 > 2 = False <type 'bool'>
               -2.0 <= 2 = True <type 'bool'>
               -2.0 != 2 = True <type 'bool'>
               -2.0 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               -2.0 + 2.0 = 0.0 <type 'float'>
               -2.0 - 2.0 = -4.0 <type 'float'>
               -2.0 * 2.0 = -4.0 <type 'float'>
               -2.0 / 2.0 = -1.0 <type 'float'>
               -2.0 ** 2.0 = 4.0 <type 'float'>
               -2.0 % 2.0 = 0.0 <type 'float'>
               -2.0 < 2.0 = True <type 'bool'>
               -2.0 = 2.0 = False <type 'bool'>
               -2.0 > 2.0 = False <type 'bool'>
               -2.0 <= 2.0 = True <type 'bool'>
               -2.0 != 2.0 = True <type 'bool'>
               -2.0 >= 2.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 2
               -2.0 + 2 = 0.0 <type 'float'>
               -2.0 - 2 = -4.0 <type 'float'>
               -2.0 * 2 = -4.0 <type 'float'>
               -2.0 / 2 = -1.0 <type 'float'>
               -2.0 ** 2 = 4.0 <type 'float'>
               -2.0 % 2 = 0.0 <type 'float'>
               -2.0 < 2 = True <type 'bool'>
               -2.0 = 2 = False <type 'bool'>
               -2.0 > 2 = False <type 'bool'>
               -2.0 <= 2 = True <type 'bool'>
               -2.0 != 2 = True <type 'bool'>
               -2.0 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'int'> -2
               -2.0 + -2 = -4.0 <type 'float'>
               -2.0 - -2 = 0.0 <type 'float'>
               -2.0 * -2 = 4.0 <type 'float'>
               -2.0 / -2 = 1.0 <type 'float'>
               -2.0 ** -2 = 0.25 <type 'float'>
               -2.0 % -2 = 0.0 <type 'float'>
               -2.0 < -2 = False <type 'bool'>
               -2.0 = -2 = True <type 'bool'>
               -2.0 > -2 = False <type 'bool'>
               -2.0 <= -2 = True <type 'bool'>
               -2.0 != -2 = False <type 'bool'>
               -2.0 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               -2.0 + -2.0 = -4.0 <type 'float'>
               -2.0 - -2.0 = 0.0 <type 'float'>
               -2.0 * -2.0 = 4.0 <type 'float'>
               -2.0 / -2.0 = 1.0 <type 'float'>
               -2.0 ** -2.0 = 0.25 <type 'float'>
               -2.0 % -2.0 = 0.0 <type 'float'>
               -2.0 < -2.0 = False <type 'bool'>
               -2.0 = -2.0 = True <type 'bool'>
               -2.0 > -2.0 = False <type 'bool'>
               -2.0 <= -2.0 = True <type 'bool'>
               -2.0 != -2.0 = False <type 'bool'>
               -2.0 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               -2.0 + -2 = -4.0 <type 'float'>
               -2.0 - -2 = 0.0 <type 'float'>
               -2.0 * -2 = 4.0 <type 'float'>
               -2.0 / -2 = 1.0 <type 'float'>
               -2.0 ** -2 = 0.25 <type 'float'>
               -2.0 % -2 = 0.0 <type 'float'>
               -2.0 < -2 = False <type 'bool'>
               -2.0 = -2 = True <type 'bool'>
               -2.0 > -2 = False <type 'bool'>
               -2.0 <= -2 = True <type 'bool'>
               -2.0 != -2 = False <type 'bool'>
               -2.0 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               -2.0 + 1000000000.0 = 999999998.0 <type 'float'>
               -2.0 - 1000000000.0 = -1000000002.0 <type 'float'>
               -2.0 * 1000000000.0 = -2000000000.0 <type 'float'>
               -2.0 / 1000000000.0 = -2e-09 <type 'float'>
skipping pow of really big number
               -2.0 % 1000000000.0 = 999999998.0 <type 'float'>
               -2.0 < 1000000000.0 = True <type 'bool'>
               -2.0 = 1000000000.0 = False <type 'bool'>
               -2.0 > 1000000000.0 = False <type 'bool'>
               -2.0 <= 1000000000.0 = True <type 'bool'>
               -2.0 != 1000000000.0 = True <type 'bool'>
               -2.0 >= 1000000000.0 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               -2.0 + -1000000000.0 = -1000000002.0 <type 'float'>
               -2.0 - -1000000000.0 = 999999998.0 <type 'float'>
               -2.0 * -1000000000.0 = 2000000000.0 <type 'float'>
               -2.0 / -1000000000.0 = 2e-09 <type 'float'>
               -2.0 ** -1000000000.0 = 0.0 <type 'float'>
               -2.0 % -1000000000.0 = -2.0 <type 'float'>
               -2.0 < -1000000000.0 = False <type 'bool'>
               -2.0 = -1000000000.0 = False <type 'bool'>
               -2.0 > -1000000000.0 = True <type 'bool'>
               -2.0 <= -1000000000.0 = False <type 'bool'>
               -2.0 != -1000000000.0 = True <type 'bool'>
               -2.0 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               -2.0 + 1e-09 = -1.999999999 <type 'float'>
               -2.0 - 1e-09 = -2.000000001 <type 'float'>
               -2.0 * 1e-09 = -2e-09 <type 'float'>
               -2.0 / 1e-09 = -2000000000.0 <type 'float'>
               -2.0 ** 1e-09 = Can't  <type 'float'> ** <type 'float'>
               -2.0 % 1e-09 = 1.24563182916e-16 <type 'float'>
               -2.0 < 1e-09 = True <type 'bool'>
               -2.0 = 1e-09 = False <type 'bool'>
               -2.0 > 1e-09 = False <type 'bool'>
               -2.0 <= 1e-09 = True <type 'bool'>
               -2.0 != 1e-09 = True <type 'bool'>
               -2.0 >= 1e-09 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               -2.0 + -1e-09 = -2.000000001 <type 'float'>
               -2.0 - -1e-09 = -1.999999999 <type 'float'>
               -2.0 * -1e-09 = 2e-09 <type 'float'>
               -2.0 / -1e-09 = 2000000000.0 <type 'float'>
               -2.0 ** -1e-09 = Can't  <type 'float'> ** <type 'float'>
               -2.0 % -1e-09 = -9.99999875437e-10 <type 'float'>
               -2.0 < -1e-09 = True <type 'bool'>
               -2.0 = -1e-09 = False <type 'bool'>
               -2.0 > -1e-09 = False <type 'bool'>
               -2.0 <= -1e-09 = True <type 'bool'>
               -2.0 != -1e-09 = True <type 'bool'>
               -2.0 >= -1e-09 = False <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               -2.0 + 123456789 = 123456787.0 <type 'float'>
               -2.0 - 123456789 = -123456791.0 <type 'float'>
               -2.0 * 123456789 = -246913578.0 <type 'float'>
               -2.0 / 123456789 = -1.62000001474e-08 <type 'float'>
skipping pow of really big number
               -2.0 % 123456789 = 123456787.0 <type 'float'>
               -2.0 < 123456789 = True <type 'bool'>
               -2.0 = 123456789 = False <type 'bool'>
               -2.0 > 123456789 = False <type 'bool'>
               -2.0 <= 123456789 = True <type 'bool'>
               -2.0 != 123456789 = True <type 'bool'>
               -2.0 >= 123456789 = False <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               -2.0 + 12345678901234567890123456789 = 1.23456789012e+28 <type 'float'>
               -2.0 - 12345678901234567890123456789 = -1.23456789012e+28 <type 'float'>
               -2.0 * 12345678901234567890123456789 = -2.46913578025e+28 <type 'float'>
               -2.0 / 12345678901234567890123456789 = -1.62000001458e-28 <type 'float'>
skipping pow of really big number
               -2.0 % 12345678901234567890123456789 = 1.23456789012e+28 <type 'float'>
               -2.0 < 12345678901234567890123456789 = True <type 'bool'>
               -2.0 = 12345678901234567890123456789 = False <type 'bool'>
               -2.0 > 12345678901234567890123456789 = False <type 'bool'>
               -2.0 <= 12345678901234567890123456789 = True <type 'bool'>
               -2.0 != 12345678901234567890123456789 = True <type 'bool'>
               -2.0 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'long'> -2
     Op 2 :::  <type 'int'> 1
               -2 + 1 = -1 <type 'long'>
               -2 - 1 = -3 <type 'long'>
               -2 * 1 = -2 <type 'long'>
               -2 / 1 = -2 <type 'long'>
               -2 ** 1 = -2 <type 'long'>
               -2 % 1 = 0 <type 'long'>
               -2 < 1 = True <type 'bool'>
               -2 = 1 = False <type 'bool'>
               -2 > 1 = False <type 'bool'>
               -2 <= 1 = True <type 'bool'>
               -2 != 1 = True <type 'bool'>
               -2 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               -2 + 1.0 = -1.0 <type 'float'>
               -2 - 1.0 = -3.0 <type 'float'>
               -2 * 1.0 = -2.0 <type 'float'>
               -2 / 1.0 = -2.0 <type 'float'>
               -2 ** 1.0 = -2.0 <type 'float'>
               -2 % 1.0 = 0.0 <type 'float'>
               -2 < 1.0 = True <type 'bool'>
               -2 = 1.0 = False <type 'bool'>
               -2 > 1.0 = False <type 'bool'>
               -2 <= 1.0 = True <type 'bool'>
               -2 != 1.0 = True <type 'bool'>
               -2 >= 1.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 1
               -2 + 1 = -1 <type 'long'>
               -2 - 1 = -3 <type 'long'>
               -2 * 1 = -2 <type 'long'>
               -2 / 1 = -2 <type 'long'>
               -2 ** 1 = -2 <type 'long'>
               -2 % 1 = 0 <type 'long'>
               -2 < 1 = True <type 'bool'>
               -2 = 1 = False <type 'bool'>
               -2 > 1 = False <type 'bool'>
               -2 <= 1 = True <type 'bool'>
               -2 != 1 = True <type 'bool'>
               -2 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'int'> -1
               -2 + -1 = -3 <type 'long'>
               -2 - -1 = -1 <type 'long'>
               -2 * -1 = 2 <type 'long'>
               -2 / -1 = 2 <type 'long'>
               -2 ** -1 = -0.5 <type 'float'>
               -2 % -1 = 0 <type 'long'>
               -2 < -1 = True <type 'bool'>
               -2 = -1 = False <type 'bool'>
               -2 > -1 = False <type 'bool'>
               -2 <= -1 = True <type 'bool'>
               -2 != -1 = True <type 'bool'>
               -2 >= -1 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               -2 + -1.0 = -3.0 <type 'float'>
               -2 - -1.0 = -1.0 <type 'float'>
               -2 * -1.0 = 2.0 <type 'float'>
               -2 / -1.0 = 2.0 <type 'float'>
               -2 ** -1.0 = -0.5 <type 'float'>
               -2 % -1.0 = 0.0 <type 'float'>
               -2 < -1.0 = True <type 'bool'>
               -2 = -1.0 = False <type 'bool'>
               -2 > -1.0 = False <type 'bool'>
               -2 <= -1.0 = True <type 'bool'>
               -2 != -1.0 = True <type 'bool'>
               -2 >= -1.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> -1
               -2 + -1 = -3 <type 'long'>
               -2 - -1 = -1 <type 'long'>
               -2 * -1 = 2 <type 'long'>
               -2 / -1 = 2 <type 'long'>
               -2 ** -1 = -0.5 <type 'float'>
               -2 % -1 = 0 <type 'long'>
               -2 < -1 = True <type 'bool'>
               -2 = -1 = False <type 'bool'>
               -2 > -1 = False <type 'bool'>
               -2 <= -1 = True <type 'bool'>
               -2 != -1 = True <type 'bool'>
               -2 >= -1 = False <type 'bool'>
     Op 2 :::  <type 'int'> 2
               -2 + 2 = 0 <type 'long'>
               -2 - 2 = -4 <type 'long'>
               -2 * 2 = -4 <type 'long'>
               -2 / 2 = -1 <type 'long'>
               -2 ** 2 = 4 <type 'long'>
               -2 % 2 = 0 <type 'long'>
               -2 < 2 = True <type 'bool'>
               -2 = 2 = False <type 'bool'>
               -2 > 2 = False <type 'bool'>
               -2 <= 2 = True <type 'bool'>
               -2 != 2 = True <type 'bool'>
               -2 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               -2 + 2.0 = 0.0 <type 'float'>
               -2 - 2.0 = -4.0 <type 'float'>
               -2 * 2.0 = -4.0 <type 'float'>
               -2 / 2.0 = -1.0 <type 'float'>
               -2 ** 2.0 = 4.0 <type 'float'>
               -2 % 2.0 = 0.0 <type 'float'>
               -2 < 2.0 = True <type 'bool'>
               -2 = 2.0 = False <type 'bool'>
               -2 > 2.0 = False <type 'bool'>
               -2 <= 2.0 = True <type 'bool'>
               -2 != 2.0 = True <type 'bool'>
               -2 >= 2.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 2
               -2 + 2 = 0 <type 'long'>
               -2 - 2 = -4 <type 'long'>
               -2 * 2 = -4 <type 'long'>
               -2 / 2 = -1 <type 'long'>
               -2 ** 2 = 4 <type 'long'>
               -2 % 2 = 0 <type 'long'>
               -2 < 2 = True <type 'bool'>
               -2 = 2 = False <type 'bool'>
               -2 > 2 = False <type 'bool'>
               -2 <= 2 = True <type 'bool'>
               -2 != 2 = True <type 'bool'>
               -2 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'int'> -2
               -2 + -2 = -4 <type 'long'>
               -2 - -2 = 0 <type 'long'>
               -2 * -2 = 4 <type 'long'>
               -2 / -2 = 1 <type 'long'>
               -2 ** -2 = 0.25 <type 'float'>
               -2 % -2 = 0 <type 'long'>
               -2 < -2 = False <type 'bool'>
               -2 = -2 = True <type 'bool'>
               -2 > -2 = False <type 'bool'>
               -2 <= -2 = True <type 'bool'>
               -2 != -2 = False <type 'bool'>
               -2 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               -2 + -2.0 = -4.0 <type 'float'>
               -2 - -2.0 = 0.0 <type 'float'>
               -2 * -2.0 = 4.0 <type 'float'>
               -2 / -2.0 = 1.0 <type 'float'>
               -2 ** -2.0 = 0.25 <type 'float'>
               -2 % -2.0 = 0.0 <type 'float'>
               -2 < -2.0 = False <type 'bool'>
               -2 = -2.0 = True <type 'bool'>
               -2 > -2.0 = False <type 'bool'>
               -2 <= -2.0 = True <type 'bool'>
               -2 != -2.0 = False <type 'bool'>
               -2 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               -2 + -2 = -4 <type 'long'>
               -2 - -2 = 0 <type 'long'>
               -2 * -2 = 4 <type 'long'>
               -2 / -2 = 1 <type 'long'>
               -2 ** -2 = 0.25 <type 'float'>
               -2 % -2 = 0 <type 'long'>
               -2 < -2 = False <type 'bool'>
               -2 = -2 = True <type 'bool'>
               -2 > -2 = False <type 'bool'>
               -2 <= -2 = True <type 'bool'>
               -2 != -2 = False <type 'bool'>
               -2 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               -2 + 1000000000.0 = 999999998.0 <type 'float'>
               -2 - 1000000000.0 = -1000000002.0 <type 'float'>
               -2 * 1000000000.0 = -2000000000.0 <type 'float'>
               -2 / 1000000000.0 = -2e-09 <type 'float'>
skipping pow of really big number
               -2 % 1000000000.0 = 999999998.0 <type 'float'>
               -2 < 1000000000.0 = True <type 'bool'>
               -2 = 1000000000.0 = False <type 'bool'>
               -2 > 1000000000.0 = False <type 'bool'>
               -2 <= 1000000000.0 = True <type 'bool'>
               -2 != 1000000000.0 = True <type 'bool'>
               -2 >= 1000000000.0 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               -2 + -1000000000.0 = -1000000002.0 <type 'float'>
               -2 - -1000000000.0 = 999999998.0 <type 'float'>
               -2 * -1000000000.0 = 2000000000.0 <type 'float'>
               -2 / -1000000000.0 = 2e-09 <type 'float'>
               -2 ** -1000000000.0 = 0.0 <type 'float'>
               -2 % -1000000000.0 = -2.0 <type 'float'>
               -2 < -1000000000.0 = False <type 'bool'>
               -2 = -1000000000.0 = False <type 'bool'>
               -2 > -1000000000.0 = True <type 'bool'>
               -2 <= -1000000000.0 = False <type 'bool'>
               -2 != -1000000000.0 = True <type 'bool'>
               -2 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               -2 + 1e-09 = -1.999999999 <type 'float'>
               -2 - 1e-09 = -2.000000001 <type 'float'>
               -2 * 1e-09 = -2e-09 <type 'float'>
               -2 / 1e-09 = -2000000000.0 <type 'float'>
               -2 ** 1e-09 = Can't  <type 'long'> ** <type 'float'>
               -2 % 1e-09 = 1.24563182916e-16 <type 'float'>
               -2 < 1e-09 = True <type 'bool'>
               -2 = 1e-09 = False <type 'bool'>
               -2 > 1e-09 = False <type 'bool'>
               -2 <= 1e-09 = True <type 'bool'>
               -2 != 1e-09 = True <type 'bool'>
               -2 >= 1e-09 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               -2 + -1e-09 = -2.000000001 <type 'float'>
               -2 - -1e-09 = -1.999999999 <type 'float'>
               -2 * -1e-09 = 2e-09 <type 'float'>
               -2 / -1e-09 = 2000000000.0 <type 'float'>
               -2 ** -1e-09 = Can't  <type 'long'> ** <type 'float'>
               -2 % -1e-09 = -9.99999875437e-10 <type 'float'>
               -2 < -1e-09 = True <type 'bool'>
               -2 = -1e-09 = False <type 'bool'>
               -2 > -1e-09 = False <type 'bool'>
               -2 <= -1e-09 = True <type 'bool'>
               -2 != -1e-09 = True <type 'bool'>
               -2 >= -1e-09 = False <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               -2 + 123456789 = 123456787 <type 'long'>
               -2 - 123456789 = -123456791 <type 'long'>
               -2 * 123456789 = -246913578 <type 'long'>
               -2 / 123456789 = -1 <type 'long'>
skipping pow of really big number
               -2 % 123456789 = 123456787 <type 'long'>
               -2 < 123456789 = True <type 'bool'>
               -2 = 123456789 = False <type 'bool'>
               -2 > 123456789 = False <type 'bool'>
               -2 <= 123456789 = True <type 'bool'>
               -2 != 123456789 = True <type 'bool'>
               -2 >= 123456789 = False <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               -2 + 12345678901234567890123456789 = 12345678901234567890123456787 <type 'long'>
               -2 - 12345678901234567890123456789 = -12345678901234567890123456791 <type 'long'>
               -2 * 12345678901234567890123456789 = -24691357802469135780246913578 <type 'long'>
               -2 / 12345678901234567890123456789 = -1 <type 'long'>
skipping pow of really big number
               -2 % 12345678901234567890123456789 = 12345678901234567890123456787 <type 'long'>
               -2 < 12345678901234567890123456789 = True <type 'bool'>
               -2 = 12345678901234567890123456789 = False <type 'bool'>
               -2 > 12345678901234567890123456789 = False <type 'bool'>
               -2 <= 12345678901234567890123456789 = True <type 'bool'>
               -2 != 12345678901234567890123456789 = True <type 'bool'>
               -2 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'float'> 1000000000.0
     Op 2 :::  <type 'int'> 1
               1000000000.0 + 1 = 1000000001.0 <type 'float'>
               1000000000.0 - 1 = 999999999.0 <type 'float'>
               1000000000.0 * 1 = 1000000000.0 <type 'float'>
               1000000000.0 / 1 = 1000000000.0 <type 'float'>
               1000000000.0 ** 1 = 1000000000.0 <type 'float'>
               1000000000.0 % 1 = 0.0 <type 'float'>
               1000000000.0 < 1 = False <type 'bool'>
               1000000000.0 = 1 = False <type 'bool'>
               1000000000.0 > 1 = True <type 'bool'>
               1000000000.0 <= 1 = False <type 'bool'>
               1000000000.0 != 1 = True <type 'bool'>
               1000000000.0 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               1000000000.0 + 1.0 = 1000000001.0 <type 'float'>
               1000000000.0 - 1.0 = 999999999.0 <type 'float'>
               1000000000.0 * 1.0 = 1000000000.0 <type 'float'>
               1000000000.0 / 1.0 = 1000000000.0 <type 'float'>
               1000000000.0 ** 1.0 = 1000000000.0 <type 'float'>
               1000000000.0 % 1.0 = 0.0 <type 'float'>
               1000000000.0 < 1.0 = False <type 'bool'>
               1000000000.0 = 1.0 = False <type 'bool'>
               1000000000.0 > 1.0 = True <type 'bool'>
               1000000000.0 <= 1.0 = False <type 'bool'>
               1000000000.0 != 1.0 = True <type 'bool'>
               1000000000.0 >= 1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> 1
               1000000000.0 + 1 = 1000000001.0 <type 'float'>
               1000000000.0 - 1 = 999999999.0 <type 'float'>
               1000000000.0 * 1 = 1000000000.0 <type 'float'>
               1000000000.0 / 1 = 1000000000.0 <type 'float'>
               1000000000.0 ** 1 = 1000000000.0 <type 'float'>
               1000000000.0 % 1 = 0.0 <type 'float'>
               1000000000.0 < 1 = False <type 'bool'>
               1000000000.0 = 1 = False <type 'bool'>
               1000000000.0 > 1 = True <type 'bool'>
               1000000000.0 <= 1 = False <type 'bool'>
               1000000000.0 != 1 = True <type 'bool'>
               1000000000.0 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'int'> -1
               1000000000.0 + -1 = 999999999.0 <type 'float'>
               1000000000.0 - -1 = 1000000001.0 <type 'float'>
               1000000000.0 * -1 = -1000000000.0 <type 'float'>
               1000000000.0 / -1 = -1000000000.0 <type 'float'>
               1000000000.0 ** -1 = 1e-09 <type 'float'>
               1000000000.0 % -1 = 0.0 <type 'float'>
               1000000000.0 < -1 = False <type 'bool'>
               1000000000.0 = -1 = False <type 'bool'>
               1000000000.0 > -1 = True <type 'bool'>
               1000000000.0 <= -1 = False <type 'bool'>
               1000000000.0 != -1 = True <type 'bool'>
               1000000000.0 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               1000000000.0 + -1.0 = 999999999.0 <type 'float'>
               1000000000.0 - -1.0 = 1000000001.0 <type 'float'>
               1000000000.0 * -1.0 = -1000000000.0 <type 'float'>
               1000000000.0 / -1.0 = -1000000000.0 <type 'float'>
               1000000000.0 ** -1.0 = 1e-09 <type 'float'>
               1000000000.0 % -1.0 = 0.0 <type 'float'>
               1000000000.0 < -1.0 = False <type 'bool'>
               1000000000.0 = -1.0 = False <type 'bool'>
               1000000000.0 > -1.0 = True <type 'bool'>
               1000000000.0 <= -1.0 = False <type 'bool'>
               1000000000.0 != -1.0 = True <type 'bool'>
               1000000000.0 >= -1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -1
               1000000000.0 + -1 = 999999999.0 <type 'float'>
               1000000000.0 - -1 = 1000000001.0 <type 'float'>
               1000000000.0 * -1 = -1000000000.0 <type 'float'>
               1000000000.0 / -1 = -1000000000.0 <type 'float'>
               1000000000.0 ** -1 = 1e-09 <type 'float'>
               1000000000.0 % -1 = 0.0 <type 'float'>
               1000000000.0 < -1 = False <type 'bool'>
               1000000000.0 = -1 = False <type 'bool'>
               1000000000.0 > -1 = True <type 'bool'>
               1000000000.0 <= -1 = False <type 'bool'>
               1000000000.0 != -1 = True <type 'bool'>
               1000000000.0 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'int'> 2
               1000000000.0 + 2 = 1000000002.0 <type 'float'>
               1000000000.0 - 2 = 999999998.0 <type 'float'>
               1000000000.0 * 2 = 2000000000.0 <type 'float'>
               1000000000.0 / 2 = 500000000.0 <type 'float'>
               1000000000.0 ** 2 = 1e+18 <type 'float'>
               1000000000.0 % 2 = 0.0 <type 'float'>
               1000000000.0 < 2 = False <type 'bool'>
               1000000000.0 = 2 = False <type 'bool'>
               1000000000.0 > 2 = True <type 'bool'>
               1000000000.0 <= 2 = False <type 'bool'>
               1000000000.0 != 2 = True <type 'bool'>
               1000000000.0 >= 2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               1000000000.0 + 2.0 = 1000000002.0 <type 'float'>
               1000000000.0 - 2.0 = 999999998.0 <type 'float'>
               1000000000.0 * 2.0 = 2000000000.0 <type 'float'>
               1000000000.0 / 2.0 = 500000000.0 <type 'float'>
               1000000000.0 ** 2.0 = 1e+18 <type 'float'>
               1000000000.0 % 2.0 = 0.0 <type 'float'>
               1000000000.0 < 2.0 = False <type 'bool'>
               1000000000.0 = 2.0 = False <type 'bool'>
               1000000000.0 > 2.0 = True <type 'bool'>
               1000000000.0 <= 2.0 = False <type 'bool'>
               1000000000.0 != 2.0 = True <type 'bool'>
               1000000000.0 >= 2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> 2
               1000000000.0 + 2 = 1000000002.0 <type 'float'>
               1000000000.0 - 2 = 999999998.0 <type 'float'>
               1000000000.0 * 2 = 2000000000.0 <type 'float'>
               1000000000.0 / 2 = 500000000.0 <type 'float'>
               1000000000.0 ** 2 = 1e+18 <type 'float'>
               1000000000.0 % 2 = 0.0 <type 'float'>
               1000000000.0 < 2 = False <type 'bool'>
               1000000000.0 = 2 = False <type 'bool'>
               1000000000.0 > 2 = True <type 'bool'>
               1000000000.0 <= 2 = False <type 'bool'>
               1000000000.0 != 2 = True <type 'bool'>
               1000000000.0 >= 2 = True <type 'bool'>
     Op 2 :::  <type 'int'> -2
               1000000000.0 + -2 = 999999998.0 <type 'float'>
               1000000000.0 - -2 = 1000000002.0 <type 'float'>
               1000000000.0 * -2 = -2000000000.0 <type 'float'>
               1000000000.0 / -2 = -500000000.0 <type 'float'>
               1000000000.0 ** -2 = 1e-18 <type 'float'>
               1000000000.0 % -2 = 0.0 <type 'float'>
               1000000000.0 < -2 = False <type 'bool'>
               1000000000.0 = -2 = False <type 'bool'>
               1000000000.0 > -2 = True <type 'bool'>
               1000000000.0 <= -2 = False <type 'bool'>
               1000000000.0 != -2 = True <type 'bool'>
               1000000000.0 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               1000000000.0 + -2.0 = 999999998.0 <type 'float'>
               1000000000.0 - -2.0 = 1000000002.0 <type 'float'>
               1000000000.0 * -2.0 = -2000000000.0 <type 'float'>
               1000000000.0 / -2.0 = -500000000.0 <type 'float'>
               1000000000.0 ** -2.0 = 1e-18 <type 'float'>
               1000000000.0 % -2.0 = 0.0 <type 'float'>
               1000000000.0 < -2.0 = False <type 'bool'>
               1000000000.0 = -2.0 = False <type 'bool'>
               1000000000.0 > -2.0 = True <type 'bool'>
               1000000000.0 <= -2.0 = False <type 'bool'>
               1000000000.0 != -2.0 = True <type 'bool'>
               1000000000.0 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               1000000000.0 + -2 = 999999998.0 <type 'float'>
               1000000000.0 - -2 = 1000000002.0 <type 'float'>
               1000000000.0 * -2 = -2000000000.0 <type 'float'>
               1000000000.0 / -2 = -500000000.0 <type 'float'>
               1000000000.0 ** -2 = 1e-18 <type 'float'>
               1000000000.0 % -2 = 0.0 <type 'float'>
               1000000000.0 < -2 = False <type 'bool'>
               1000000000.0 = -2 = False <type 'bool'>
               1000000000.0 > -2 = True <type 'bool'>
               1000000000.0 <= -2 = False <type 'bool'>
               1000000000.0 != -2 = True <type 'bool'>
               1000000000.0 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               1000000000.0 + 1000000000.0 = 2000000000.0 <type 'float'>
               1000000000.0 - 1000000000.0 = 0.0 <type 'float'>
               1000000000.0 * 1000000000.0 = 1e+18 <type 'float'>
               1000000000.0 / 1000000000.0 = 1.0 <type 'float'>
skipping pow of really big number
               1000000000.0 % 1000000000.0 = 0.0 <type 'float'>
               1000000000.0 < 1000000000.0 = False <type 'bool'>
               1000000000.0 = 1000000000.0 = True <type 'bool'>
               1000000000.0 > 1000000000.0 = False <type 'bool'>
               1000000000.0 <= 1000000000.0 = True <type 'bool'>
               1000000000.0 != 1000000000.0 = False <type 'bool'>
               1000000000.0 >= 1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               1000000000.0 + -1000000000.0 = 0.0 <type 'float'>
               1000000000.0 - -1000000000.0 = 2000000000.0 <type 'float'>
               1000000000.0 * -1000000000.0 = -1e+18 <type 'float'>
               1000000000.0 / -1000000000.0 = -1.0 <type 'float'>
               1000000000.0 ** -1000000000.0 = 0.0 <type 'float'>
               1000000000.0 % -1000000000.0 = 0.0 <type 'float'>
               1000000000.0 < -1000000000.0 = False <type 'bool'>
               1000000000.0 = -1000000000.0 = False <type 'bool'>
               1000000000.0 > -1000000000.0 = True <type 'bool'>
               1000000000.0 <= -1000000000.0 = False <type 'bool'>
               1000000000.0 != -1000000000.0 = True <type 'bool'>
               1000000000.0 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               1000000000.0 + 1e-09 = 1000000000.0 <type 'float'>
               1000000000.0 - 1e-09 = 1000000000.0 <type 'float'>
               1000000000.0 * 1e-09 = 1.0 <type 'float'>
               1000000000.0 / 1e-09 = 1e+18 <type 'float'>
               1000000000.0 ** 1e-09 = 1.00000002072 <type 'float'>
               1000000000.0 % 1e-09 = 7.1840854222e-10 <type 'float'>
               1000000000.0 < 1e-09 = False <type 'bool'>
               1000000000.0 = 1e-09 = False <type 'bool'>
               1000000000.0 > 1e-09 = True <type 'bool'>
               1000000000.0 <= 1e-09 = False <type 'bool'>
               1000000000.0 != 1e-09 = True <type 'bool'>
               1000000000.0 >= 1e-09 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               1000000000.0 + -1e-09 = 1000000000.0 <type 'float'>
               1000000000.0 - -1e-09 = 1000000000.0 <type 'float'>
               1000000000.0 * -1e-09 = -1.0 <type 'float'>
               1000000000.0 / -1e-09 = -1e+18 <type 'float'>
               1000000000.0 ** -1e-09 = 0.999999979277 <type 'float'>
               1000000000.0 % -1e-09 = -2.8159145778e-10 <type 'float'>
               1000000000.0 < -1e-09 = False <type 'bool'>
               1000000000.0 = -1e-09 = False <type 'bool'>
               1000000000.0 > -1e-09 = True <type 'bool'>
               1000000000.0 <= -1e-09 = False <type 'bool'>
               1000000000.0 != -1e-09 = True <type 'bool'>
               1000000000.0 >= -1e-09 = True <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               1000000000.0 + 123456789 = 1123456789.0 <type 'float'>
               1000000000.0 - 123456789 = 876543211.0 <type 'float'>
               1000000000.0 * 123456789 = 1.23456789e+17 <type 'float'>
               1000000000.0 / 123456789 = 8.10000007371 <type 'float'>
skipping pow of really big number
               1000000000.0 % 123456789 = 12345688.0 <type 'float'>
               1000000000.0 < 123456789 = False <type 'bool'>
               1000000000.0 = 123456789 = False <type 'bool'>
               1000000000.0 > 123456789 = True <type 'bool'>
               1000000000.0 <= 123456789 = False <type 'bool'>
               1000000000.0 != 123456789 = True <type 'bool'>
               1000000000.0 >= 123456789 = True <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               1000000000.0 + 12345678901234567890123456789 = 1.23456789012e+28 <type 'float'>
               1000000000.0 - 12345678901234567890123456789 = -1.23456789012e+28 <type 'float'>
               1000000000.0 * 12345678901234567890123456789 = 1.23456789012e+37 <type 'float'>
               1000000000.0 / 12345678901234567890123456789 = 8.1000000729e-20 <type 'float'>
skipping pow of really big number
               1000000000.0 % 12345678901234567890123456789 = 1000000000.0 <type 'float'>
               1000000000.0 < 12345678901234567890123456789 = True <type 'bool'>
               1000000000.0 = 12345678901234567890123456789 = False <type 'bool'>
               1000000000.0 > 12345678901234567890123456789 = False <type 'bool'>
               1000000000.0 <= 12345678901234567890123456789 = True <type 'bool'>
               1000000000.0 != 12345678901234567890123456789 = True <type 'bool'>
               1000000000.0 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'float'> -1000000000.0
     Op 2 :::  <type 'int'> 1
               -1000000000.0 + 1 = -999999999.0 <type 'float'>
               -1000000000.0 - 1 = -1000000001.0 <type 'float'>
               -1000000000.0 * 1 = -1000000000.0 <type 'float'>
               -1000000000.0 / 1 = -1000000000.0 <type 'float'>
               -1000000000.0 ** 1 = -1000000000.0 <type 'float'>
               -1000000000.0 % 1 = 0.0 <type 'float'>
               -1000000000.0 < 1 = True <type 'bool'>
               -1000000000.0 = 1 = False <type 'bool'>
               -1000000000.0 > 1 = False <type 'bool'>
               -1000000000.0 <= 1 = True <type 'bool'>
               -1000000000.0 != 1 = True <type 'bool'>
               -1000000000.0 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               -1000000000.0 + 1.0 = -999999999.0 <type 'float'>
               -1000000000.0 - 1.0 = -1000000001.0 <type 'float'>
               -1000000000.0 * 1.0 = -1000000000.0 <type 'float'>
               -1000000000.0 / 1.0 = -1000000000.0 <type 'float'>
               -1000000000.0 ** 1.0 = -1000000000.0 <type 'float'>
               -1000000000.0 % 1.0 = 0.0 <type 'float'>
               -1000000000.0 < 1.0 = True <type 'bool'>
               -1000000000.0 = 1.0 = False <type 'bool'>
               -1000000000.0 > 1.0 = False <type 'bool'>
               -1000000000.0 <= 1.0 = True <type 'bool'>
               -1000000000.0 != 1.0 = True <type 'bool'>
               -1000000000.0 >= 1.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 1
               -1000000000.0 + 1 = -999999999.0 <type 'float'>
               -1000000000.0 - 1 = -1000000001.0 <type 'float'>
               -1000000000.0 * 1 = -1000000000.0 <type 'float'>
               -1000000000.0 / 1 = -1000000000.0 <type 'float'>
               -1000000000.0 ** 1 = -1000000000.0 <type 'float'>
               -1000000000.0 % 1 = 0.0 <type 'float'>
               -1000000000.0 < 1 = True <type 'bool'>
               -1000000000.0 = 1 = False <type 'bool'>
               -1000000000.0 > 1 = False <type 'bool'>
               -1000000000.0 <= 1 = True <type 'bool'>
               -1000000000.0 != 1 = True <type 'bool'>
               -1000000000.0 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'int'> -1
               -1000000000.0 + -1 = -1000000001.0 <type 'float'>
               -1000000000.0 - -1 = -999999999.0 <type 'float'>
               -1000000000.0 * -1 = 1000000000.0 <type 'float'>
               -1000000000.0 / -1 = 1000000000.0 <type 'float'>
               -1000000000.0 ** -1 = -1e-09 <type 'float'>
               -1000000000.0 % -1 = 0.0 <type 'float'>
               -1000000000.0 < -1 = True <type 'bool'>
               -1000000000.0 = -1 = False <type 'bool'>
               -1000000000.0 > -1 = False <type 'bool'>
               -1000000000.0 <= -1 = True <type 'bool'>
               -1000000000.0 != -1 = True <type 'bool'>
               -1000000000.0 >= -1 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               -1000000000.0 + -1.0 = -1000000001.0 <type 'float'>
               -1000000000.0 - -1.0 = -999999999.0 <type 'float'>
               -1000000000.0 * -1.0 = 1000000000.0 <type 'float'>
               -1000000000.0 / -1.0 = 1000000000.0 <type 'float'>
               -1000000000.0 ** -1.0 = -1e-09 <type 'float'>
               -1000000000.0 % -1.0 = 0.0 <type 'float'>
               -1000000000.0 < -1.0 = True <type 'bool'>
               -1000000000.0 = -1.0 = False <type 'bool'>
               -1000000000.0 > -1.0 = False <type 'bool'>
               -1000000000.0 <= -1.0 = True <type 'bool'>
               -1000000000.0 != -1.0 = True <type 'bool'>
               -1000000000.0 >= -1.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> -1
               -1000000000.0 + -1 = -1000000001.0 <type 'float'>
               -1000000000.0 - -1 = -999999999.0 <type 'float'>
               -1000000000.0 * -1 = 1000000000.0 <type 'float'>
               -1000000000.0 / -1 = 1000000000.0 <type 'float'>
               -1000000000.0 ** -1 = -1e-09 <type 'float'>
               -1000000000.0 % -1 = 0.0 <type 'float'>
               -1000000000.0 < -1 = True <type 'bool'>
               -1000000000.0 = -1 = False <type 'bool'>
               -1000000000.0 > -1 = False <type 'bool'>
               -1000000000.0 <= -1 = True <type 'bool'>
               -1000000000.0 != -1 = True <type 'bool'>
               -1000000000.0 >= -1 = False <type 'bool'>
     Op 2 :::  <type 'int'> 2
               -1000000000.0 + 2 = -999999998.0 <type 'float'>
               -1000000000.0 - 2 = -1000000002.0 <type 'float'>
               -1000000000.0 * 2 = -2000000000.0 <type 'float'>
               -1000000000.0 / 2 = -500000000.0 <type 'float'>
               -1000000000.0 ** 2 = 1e+18 <type 'float'>
               -1000000000.0 % 2 = 0.0 <type 'float'>
               -1000000000.0 < 2 = True <type 'bool'>
               -1000000000.0 = 2 = False <type 'bool'>
               -1000000000.0 > 2 = False <type 'bool'>
               -1000000000.0 <= 2 = True <type 'bool'>
               -1000000000.0 != 2 = True <type 'bool'>
               -1000000000.0 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               -1000000000.0 + 2.0 = -999999998.0 <type 'float'>
               -1000000000.0 - 2.0 = -1000000002.0 <type 'float'>
               -1000000000.0 * 2.0 = -2000000000.0 <type 'float'>
               -1000000000.0 / 2.0 = -500000000.0 <type 'float'>
               -1000000000.0 ** 2.0 = 1e+18 <type 'float'>
               -1000000000.0 % 2.0 = 0.0 <type 'float'>
               -1000000000.0 < 2.0 = True <type 'bool'>
               -1000000000.0 = 2.0 = False <type 'bool'>
               -1000000000.0 > 2.0 = False <type 'bool'>
               -1000000000.0 <= 2.0 = True <type 'bool'>
               -1000000000.0 != 2.0 = True <type 'bool'>
               -1000000000.0 >= 2.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 2
               -1000000000.0 + 2 = -999999998.0 <type 'float'>
               -1000000000.0 - 2 = -1000000002.0 <type 'float'>
               -1000000000.0 * 2 = -2000000000.0 <type 'float'>
               -1000000000.0 / 2 = -500000000.0 <type 'float'>
               -1000000000.0 ** 2 = 1e+18 <type 'float'>
               -1000000000.0 % 2 = 0.0 <type 'float'>
               -1000000000.0 < 2 = True <type 'bool'>
               -1000000000.0 = 2 = False <type 'bool'>
               -1000000000.0 > 2 = False <type 'bool'>
               -1000000000.0 <= 2 = True <type 'bool'>
               -1000000000.0 != 2 = True <type 'bool'>
               -1000000000.0 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'int'> -2
               -1000000000.0 + -2 = -1000000002.0 <type 'float'>
               -1000000000.0 - -2 = -999999998.0 <type 'float'>
               -1000000000.0 * -2 = 2000000000.0 <type 'float'>
               -1000000000.0 / -2 = 500000000.0 <type 'float'>
               -1000000000.0 ** -2 = 1e-18 <type 'float'>
               -1000000000.0 % -2 = 0.0 <type 'float'>
               -1000000000.0 < -2 = True <type 'bool'>
               -1000000000.0 = -2 = False <type 'bool'>
               -1000000000.0 > -2 = False <type 'bool'>
               -1000000000.0 <= -2 = True <type 'bool'>
               -1000000000.0 != -2 = True <type 'bool'>
               -1000000000.0 >= -2 = False <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               -1000000000.0 + -2.0 = -1000000002.0 <type 'float'>
               -1000000000.0 - -2.0 = -999999998.0 <type 'float'>
               -1000000000.0 * -2.0 = 2000000000.0 <type 'float'>
               -1000000000.0 / -2.0 = 500000000.0 <type 'float'>
               -1000000000.0 ** -2.0 = 1e-18 <type 'float'>
               -1000000000.0 % -2.0 = 0.0 <type 'float'>
               -1000000000.0 < -2.0 = True <type 'bool'>
               -1000000000.0 = -2.0 = False <type 'bool'>
               -1000000000.0 > -2.0 = False <type 'bool'>
               -1000000000.0 <= -2.0 = True <type 'bool'>
               -1000000000.0 != -2.0 = True <type 'bool'>
               -1000000000.0 >= -2.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> -2
               -1000000000.0 + -2 = -1000000002.0 <type 'float'>
               -1000000000.0 - -2 = -999999998.0 <type 'float'>
               -1000000000.0 * -2 = 2000000000.0 <type 'float'>
               -1000000000.0 / -2 = 500000000.0 <type 'float'>
               -1000000000.0 ** -2 = 1e-18 <type 'float'>
               -1000000000.0 % -2 = 0.0 <type 'float'>
               -1000000000.0 < -2 = True <type 'bool'>
               -1000000000.0 = -2 = False <type 'bool'>
               -1000000000.0 > -2 = False <type 'bool'>
               -1000000000.0 <= -2 = True <type 'bool'>
               -1000000000.0 != -2 = True <type 'bool'>
               -1000000000.0 >= -2 = False <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               -1000000000.0 + 1000000000.0 = 0.0 <type 'float'>
               -1000000000.0 - 1000000000.0 = -2000000000.0 <type 'float'>
               -1000000000.0 * 1000000000.0 = -1e+18 <type 'float'>
               -1000000000.0 / 1000000000.0 = -1.0 <type 'float'>
skipping pow of really big number
               -1000000000.0 % 1000000000.0 = 0.0 <type 'float'>
               -1000000000.0 < 1000000000.0 = True <type 'bool'>
               -1000000000.0 = 1000000000.0 = False <type 'bool'>
               -1000000000.0 > 1000000000.0 = False <type 'bool'>
               -1000000000.0 <= 1000000000.0 = True <type 'bool'>
               -1000000000.0 != 1000000000.0 = True <type 'bool'>
               -1000000000.0 >= 1000000000.0 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               -1000000000.0 + -1000000000.0 = -2000000000.0 <type 'float'>
               -1000000000.0 - -1000000000.0 = 0.0 <type 'float'>
               -1000000000.0 * -1000000000.0 = 1e+18 <type 'float'>
               -1000000000.0 / -1000000000.0 = 1.0 <type 'float'>
               -1000000000.0 ** -1000000000.0 = 0.0 <type 'float'>
               -1000000000.0 % -1000000000.0 = 0.0 <type 'float'>
               -1000000000.0 < -1000000000.0 = False <type 'bool'>
               -1000000000.0 = -1000000000.0 = True <type 'bool'>
               -1000000000.0 > -1000000000.0 = False <type 'bool'>
               -1000000000.0 <= -1000000000.0 = True <type 'bool'>
               -1000000000.0 != -1000000000.0 = False <type 'bool'>
               -1000000000.0 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               -1000000000.0 + 1e-09 = -1000000000.0 <type 'float'>
               -1000000000.0 - 1e-09 = -1000000000.0 <type 'float'>
               -1000000000.0 * 1e-09 = -1.0 <type 'float'>
               -1000000000.0 / 1e-09 = -1e+18 <type 'float'>
               -1000000000.0 ** 1e-09 = Can't  <type 'float'> ** <type 'float'>
               -1000000000.0 % 1e-09 = 2.8159145778e-10 <type 'float'>
               -1000000000.0 < 1e-09 = True <type 'bool'>
               -1000000000.0 = 1e-09 = False <type 'bool'>
               -1000000000.0 > 1e-09 = False <type 'bool'>
               -1000000000.0 <= 1e-09 = True <type 'bool'>
               -1000000000.0 != 1e-09 = True <type 'bool'>
               -1000000000.0 >= 1e-09 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               -1000000000.0 + -1e-09 = -1000000000.0 <type 'float'>
               -1000000000.0 - -1e-09 = -1000000000.0 <type 'float'>
               -1000000000.0 * -1e-09 = 1.0 <type 'float'>
               -1000000000.0 / -1e-09 = 1e+18 <type 'float'>
               -1000000000.0 ** -1e-09 = Can't  <type 'float'> ** <type 'float'>
               -1000000000.0 % -1e-09 = -7.1840854222e-10 <type 'float'>
               -1000000000.0 < -1e-09 = True <type 'bool'>
               -1000000000.0 = -1e-09 = False <type 'bool'>
               -1000000000.0 > -1e-09 = False <type 'bool'>
               -1000000000.0 <= -1e-09 = True <type 'bool'>
               -1000000000.0 != -1e-09 = True <type 'bool'>
               -1000000000.0 >= -1e-09 = False <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               -1000000000.0 + 123456789 = -876543211.0 <type 'float'>
               -1000000000.0 - 123456789 = -1123456789.0 <type 'float'>
               -1000000000.0 * 123456789 = -1.23456789e+17 <type 'float'>
               -1000000000.0 / 123456789 = -8.10000007371 <type 'float'>
skipping pow of really big number
               -1000000000.0 % 123456789 = 111111101.0 <type 'float'>
               -1000000000.0 < 123456789 = True <type 'bool'>
               -1000000000.0 = 123456789 = False <type 'bool'>
               -1000000000.0 > 123456789 = False <type 'bool'>
               -1000000000.0 <= 123456789 = True <type 'bool'>
               -1000000000.0 != 123456789 = True <type 'bool'>
               -1000000000.0 >= 123456789 = False <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               -1000000000.0 + 12345678901234567890123456789 = 1.23456789012e+28 <type 'float'>
               -1000000000.0 - 12345678901234567890123456789 = -1.23456789012e+28 <type 'float'>
               -1000000000.0 * 12345678901234567890123456789 = -1.23456789012e+37 <type 'float'>
               -1000000000.0 / 12345678901234567890123456789 = -8.1000000729e-20 <type 'float'>
skipping pow of really big number
               -1000000000.0 % 12345678901234567890123456789 = 1.23456789012e+28 <type 'float'>
               -1000000000.0 < 12345678901234567890123456789 = True <type 'bool'>
               -1000000000.0 = 12345678901234567890123456789 = False <type 'bool'>
               -1000000000.0 > 12345678901234567890123456789 = False <type 'bool'>
               -1000000000.0 <= 12345678901234567890123456789 = True <type 'bool'>
               -1000000000.0 != 12345678901234567890123456789 = True <type 'bool'>
               -1000000000.0 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'float'> 1e-09
     Op 2 :::  <type 'int'> 1
               1e-09 + 1 = 1.000000001 <type 'float'>
               1e-09 - 1 = -0.999999999 <type 'float'>
               1e-09 * 1 = 1e-09 <type 'float'>
               1e-09 / 1 = 1e-09 <type 'float'>
               1e-09 ** 1 = 1e-09 <type 'float'>
               1e-09 % 1 = 1e-09 <type 'float'>
               1e-09 < 1 = True <type 'bool'>
               1e-09 = 1 = False <type 'bool'>
               1e-09 > 1 = False <type 'bool'>
               1e-09 <= 1 = True <type 'bool'>
               1e-09 != 1 = True <type 'bool'>
               1e-09 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               1e-09 + 1.0 = 1.000000001 <type 'float'>
               1e-09 - 1.0 = -0.999999999 <type 'float'>
               1e-09 * 1.0 = 1e-09 <type 'float'>
               1e-09 / 1.0 = 1e-09 <type 'float'>
               1e-09 ** 1.0 = 1e-09 <type 'float'>
               1e-09 % 1.0 = 1e-09 <type 'float'>
               1e-09 < 1.0 = True <type 'bool'>
               1e-09 = 1.0 = False <type 'bool'>
               1e-09 > 1.0 = False <type 'bool'>
               1e-09 <= 1.0 = True <type 'bool'>
               1e-09 != 1.0 = True <type 'bool'>
               1e-09 >= 1.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 1
               1e-09 + 1 = 1.000000001 <type 'float'>
               1e-09 - 1 = -0.999999999 <type 'float'>
               1e-09 * 1 = 1e-09 <type 'float'>
               1e-09 / 1 = 1e-09 <type 'float'>
               1e-09 ** 1 = 1e-09 <type 'float'>
               1e-09 % 1 = 1e-09 <type 'float'>
               1e-09 < 1 = True <type 'bool'>
               1e-09 = 1 = False <type 'bool'>
               1e-09 > 1 = False <type 'bool'>
               1e-09 <= 1 = True <type 'bool'>
               1e-09 != 1 = True <type 'bool'>
               1e-09 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'int'> -1
               1e-09 + -1 = -0.999999999 <type 'float'>
               1e-09 - -1 = 1.000000001 <type 'float'>
               1e-09 * -1 = -1e-09 <type 'float'>
               1e-09 / -1 = -1e-09 <type 'float'>
               1e-09 ** -1 = 1000000000.0 <type 'float'>
               1e-09 % -1 = -0.999999999 <type 'float'>
               1e-09 < -1 = False <type 'bool'>
               1e-09 = -1 = False <type 'bool'>
               1e-09 > -1 = True <type 'bool'>
               1e-09 <= -1 = False <type 'bool'>
               1e-09 != -1 = True <type 'bool'>
               1e-09 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               1e-09 + -1.0 = -0.999999999 <type 'float'>
               1e-09 - -1.0 = 1.000000001 <type 'float'>
               1e-09 * -1.0 = -1e-09 <type 'float'>
               1e-09 / -1.0 = -1e-09 <type 'float'>
               1e-09 ** -1.0 = 1000000000.0 <type 'float'>
               1e-09 % -1.0 = -0.999999999 <type 'float'>
               1e-09 < -1.0 = False <type 'bool'>
               1e-09 = -1.0 = False <type 'bool'>
               1e-09 > -1.0 = True <type 'bool'>
               1e-09 <= -1.0 = False <type 'bool'>
               1e-09 != -1.0 = True <type 'bool'>
               1e-09 >= -1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -1
               1e-09 + -1 = -0.999999999 <type 'float'>
               1e-09 - -1 = 1.000000001 <type 'float'>
               1e-09 * -1 = -1e-09 <type 'float'>
               1e-09 / -1 = -1e-09 <type 'float'>
               1e-09 ** -1 = 1000000000.0 <type 'float'>
               1e-09 % -1 = -0.999999999 <type 'float'>
               1e-09 < -1 = False <type 'bool'>
               1e-09 = -1 = False <type 'bool'>
               1e-09 > -1 = True <type 'bool'>
               1e-09 <= -1 = False <type 'bool'>
               1e-09 != -1 = True <type 'bool'>
               1e-09 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'int'> 2
               1e-09 + 2 = 2.000000001 <type 'float'>
               1e-09 - 2 = -1.999999999 <type 'float'>
               1e-09 * 2 = 2e-09 <type 'float'>
               1e-09 / 2 = 5e-10 <type 'float'>
               1e-09 ** 2 = 1e-18 <type 'float'>
               1e-09 % 2 = 1e-09 <type 'float'>
               1e-09 < 2 = True <type 'bool'>
               1e-09 = 2 = False <type 'bool'>
               1e-09 > 2 = False <type 'bool'>
               1e-09 <= 2 = True <type 'bool'>
               1e-09 != 2 = True <type 'bool'>
               1e-09 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               1e-09 + 2.0 = 2.000000001 <type 'float'>
               1e-09 - 2.0 = -1.999999999 <type 'float'>
               1e-09 * 2.0 = 2e-09 <type 'float'>
               1e-09 / 2.0 = 5e-10 <type 'float'>
               1e-09 ** 2.0 = 1e-18 <type 'float'>
               1e-09 % 2.0 = 1e-09 <type 'float'>
               1e-09 < 2.0 = True <type 'bool'>
               1e-09 = 2.0 = False <type 'bool'>
               1e-09 > 2.0 = False <type 'bool'>
               1e-09 <= 2.0 = True <type 'bool'>
               1e-09 != 2.0 = True <type 'bool'>
               1e-09 >= 2.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 2
               1e-09 + 2 = 2.000000001 <type 'float'>
               1e-09 - 2 = -1.999999999 <type 'float'>
               1e-09 * 2 = 2e-09 <type 'float'>
               1e-09 / 2 = 5e-10 <type 'float'>
               1e-09 ** 2 = 1e-18 <type 'float'>
               1e-09 % 2 = 1e-09 <type 'float'>
               1e-09 < 2 = True <type 'bool'>
               1e-09 = 2 = False <type 'bool'>
               1e-09 > 2 = False <type 'bool'>
               1e-09 <= 2 = True <type 'bool'>
               1e-09 != 2 = True <type 'bool'>
               1e-09 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'int'> -2
               1e-09 + -2 = -1.999999999 <type 'float'>
               1e-09 - -2 = 2.000000001 <type 'float'>
               1e-09 * -2 = -2e-09 <type 'float'>
               1e-09 / -2 = -5e-10 <type 'float'>
               1e-09 ** -2 = 1e+18 <type 'float'>
               1e-09 % -2 = -1.999999999 <type 'float'>
               1e-09 < -2 = False <type 'bool'>
               1e-09 = -2 = False <type 'bool'>
               1e-09 > -2 = True <type 'bool'>
               1e-09 <= -2 = False <type 'bool'>
               1e-09 != -2 = True <type 'bool'>
               1e-09 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               1e-09 + -2.0 = -1.999999999 <type 'float'>
               1e-09 - -2.0 = 2.000000001 <type 'float'>
               1e-09 * -2.0 = -2e-09 <type 'float'>
               1e-09 / -2.0 = -5e-10 <type 'float'>
               1e-09 ** -2.0 = 1e+18 <type 'float'>
               1e-09 % -2.0 = -1.999999999 <type 'float'>
               1e-09 < -2.0 = False <type 'bool'>
               1e-09 = -2.0 = False <type 'bool'>
               1e-09 > -2.0 = True <type 'bool'>
               1e-09 <= -2.0 = False <type 'bool'>
               1e-09 != -2.0 = True <type 'bool'>
               1e-09 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               1e-09 + -2 = -1.999999999 <type 'float'>
               1e-09 - -2 = 2.000000001 <type 'float'>
               1e-09 * -2 = -2e-09 <type 'float'>
               1e-09 / -2 = -5e-10 <type 'float'>
               1e-09 ** -2 = 1e+18 <type 'float'>
               1e-09 % -2 = -1.999999999 <type 'float'>
               1e-09 < -2 = False <type 'bool'>
               1e-09 = -2 = False <type 'bool'>
               1e-09 > -2 = True <type 'bool'>
               1e-09 <= -2 = False <type 'bool'>
               1e-09 != -2 = True <type 'bool'>
               1e-09 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               1e-09 + 1000000000.0 = 1000000000.0 <type 'float'>
               1e-09 - 1000000000.0 = -1000000000.0 <type 'float'>
               1e-09 * 1000000000.0 = 1.0 <type 'float'>
               1e-09 / 1000000000.0 = 1e-18 <type 'float'>
skipping pow of really big number
               1e-09 % 1000000000.0 = 1e-09 <type 'float'>
               1e-09 < 1000000000.0 = True <type 'bool'>
               1e-09 = 1000000000.0 = False <type 'bool'>
               1e-09 > 1000000000.0 = False <type 'bool'>
               1e-09 <= 1000000000.0 = True <type 'bool'>
               1e-09 != 1000000000.0 = True <type 'bool'>
               1e-09 >= 1000000000.0 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               1e-09 + -1000000000.0 = -1000000000.0 <type 'float'>
               1e-09 - -1000000000.0 = 1000000000.0 <type 'float'>
               1e-09 * -1000000000.0 = -1.0 <type 'float'>
               1e-09 / -1000000000.0 = -1e-18 <type 'float'>
               1e-09 ** -1000000000.0 = Can't  <type 'float'> ** <type 'float'>
               1e-09 % -1000000000.0 = -1000000000.0 <type 'float'>
               1e-09 < -1000000000.0 = False <type 'bool'>
               1e-09 = -1000000000.0 = False <type 'bool'>
               1e-09 > -1000000000.0 = True <type 'bool'>
               1e-09 <= -1000000000.0 = False <type 'bool'>
               1e-09 != -1000000000.0 = True <type 'bool'>
               1e-09 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               1e-09 + 1e-09 = 2e-09 <type 'float'>
               1e-09 - 1e-09 = 0.0 <type 'float'>
               1e-09 * 1e-09 = 1e-18 <type 'float'>
               1e-09 / 1e-09 = 1.0 <type 'float'>
               1e-09 ** 1e-09 = 0.999999979277 <type 'float'>
               1e-09 % 1e-09 = 0.0 <type 'float'>
               1e-09 < 1e-09 = False <type 'bool'>
               1e-09 = 1e-09 = True <type 'bool'>
               1e-09 > 1e-09 = False <type 'bool'>
               1e-09 <= 1e-09 = True <type 'bool'>
               1e-09 != 1e-09 = False <type 'bool'>
               1e-09 >= 1e-09 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               1e-09 + -1e-09 = 0.0 <type 'float'>
               1e-09 - -1e-09 = 2e-09 <type 'float'>
               1e-09 * -1e-09 = -1e-18 <type 'float'>
               1e-09 / -1e-09 = -1.0 <type 'float'>
               1e-09 ** -1e-09 = 1.00000002072 <type 'float'>
               1e-09 % -1e-09 = 0.0 <type 'float'>
               1e-09 < -1e-09 = False <type 'bool'>
               1e-09 = -1e-09 = False <type 'bool'>
               1e-09 > -1e-09 = True <type 'bool'>
               1e-09 <= -1e-09 = False <type 'bool'>
               1e-09 != -1e-09 = True <type 'bool'>
               1e-09 >= -1e-09 = True <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               1e-09 + 123456789 = 123456789.0 <type 'float'>
               1e-09 - 123456789 = -123456789.0 <type 'float'>
               1e-09 * 123456789 = 0.123456789 <type 'float'>
               1e-09 / 123456789 = 8.10000007371e-18 <type 'float'>
skipping pow of really big number
               1e-09 % 123456789 = 1e-09 <type 'float'>
               1e-09 < 123456789 = True <type 'bool'>
               1e-09 = 123456789 = False <type 'bool'>
               1e-09 > 123456789 = False <type 'bool'>
               1e-09 <= 123456789 = True <type 'bool'>
               1e-09 != 123456789 = True <type 'bool'>
               1e-09 >= 123456789 = False <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               1e-09 + 12345678901234567890123456789 = 1.23456789012e+28 <type 'float'>
               1e-09 - 12345678901234567890123456789 = -1.23456789012e+28 <type 'float'>
               1e-09 * 12345678901234567890123456789 = 1.23456789012e+19 <type 'float'>
               1e-09 / 12345678901234567890123456789 = 8.1000000729e-38 <type 'float'>
skipping pow of really big number
               1e-09 % 12345678901234567890123456789 = 1e-09 <type 'float'>
               1e-09 < 12345678901234567890123456789 = True <type 'bool'>
               1e-09 = 12345678901234567890123456789 = False <type 'bool'>
               1e-09 > 12345678901234567890123456789 = False <type 'bool'>
               1e-09 <= 12345678901234567890123456789 = True <type 'bool'>
               1e-09 != 12345678901234567890123456789 = True <type 'bool'>
               1e-09 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'float'> -1e-09
     Op 2 :::  <type 'int'> 1
               -1e-09 + 1 = 0.999999999 <type 'float'>
               -1e-09 - 1 = -1.000000001 <type 'float'>
               -1e-09 * 1 = -1e-09 <type 'float'>
               -1e-09 / 1 = -1e-09 <type 'float'>
               -1e-09 ** 1 = -1e-09 <type 'float'>
               -1e-09 % 1 = 0.999999999 <type 'float'>
               -1e-09 < 1 = True <type 'bool'>
               -1e-09 = 1 = False <type 'bool'>
               -1e-09 > 1 = False <type 'bool'>
               -1e-09 <= 1 = True <type 'bool'>
               -1e-09 != 1 = True <type 'bool'>
               -1e-09 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               -1e-09 + 1.0 = 0.999999999 <type 'float'>
               -1e-09 - 1.0 = -1.000000001 <type 'float'>
               -1e-09 * 1.0 = -1e-09 <type 'float'>
               -1e-09 / 1.0 = -1e-09 <type 'float'>
               -1e-09 ** 1.0 = -1e-09 <type 'float'>
               -1e-09 % 1.0 = 0.999999999 <type 'float'>
               -1e-09 < 1.0 = True <type 'bool'>
               -1e-09 = 1.0 = False <type 'bool'>
               -1e-09 > 1.0 = False <type 'bool'>
               -1e-09 <= 1.0 = True <type 'bool'>
               -1e-09 != 1.0 = True <type 'bool'>
               -1e-09 >= 1.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 1
               -1e-09 + 1 = 0.999999999 <type 'float'>
               -1e-09 - 1 = -1.000000001 <type 'float'>
               -1e-09 * 1 = -1e-09 <type 'float'>
               -1e-09 / 1 = -1e-09 <type 'float'>
               -1e-09 ** 1 = -1e-09 <type 'float'>
               -1e-09 % 1 = 0.999999999 <type 'float'>
               -1e-09 < 1 = True <type 'bool'>
               -1e-09 = 1 = False <type 'bool'>
               -1e-09 > 1 = False <type 'bool'>
               -1e-09 <= 1 = True <type 'bool'>
               -1e-09 != 1 = True <type 'bool'>
               -1e-09 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'int'> -1
               -1e-09 + -1 = -1.000000001 <type 'float'>
               -1e-09 - -1 = 0.999999999 <type 'float'>
               -1e-09 * -1 = 1e-09 <type 'float'>
               -1e-09 / -1 = 1e-09 <type 'float'>
               -1e-09 ** -1 = -1000000000.0 <type 'float'>
               -1e-09 % -1 = -1e-09 <type 'float'>
               -1e-09 < -1 = False <type 'bool'>
               -1e-09 = -1 = False <type 'bool'>
               -1e-09 > -1 = True <type 'bool'>
               -1e-09 <= -1 = False <type 'bool'>
               -1e-09 != -1 = True <type 'bool'>
               -1e-09 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               -1e-09 + -1.0 = -1.000000001 <type 'float'>
               -1e-09 - -1.0 = 0.999999999 <type 'float'>
               -1e-09 * -1.0 = 1e-09 <type 'float'>
               -1e-09 / -1.0 = 1e-09 <type 'float'>
               -1e-09 ** -1.0 = -1000000000.0 <type 'float'>
               -1e-09 % -1.0 = -1e-09 <type 'float'>
               -1e-09 < -1.0 = False <type 'bool'>
               -1e-09 = -1.0 = False <type 'bool'>
               -1e-09 > -1.0 = True <type 'bool'>
               -1e-09 <= -1.0 = False <type 'bool'>
               -1e-09 != -1.0 = True <type 'bool'>
               -1e-09 >= -1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -1
               -1e-09 + -1 = -1.000000001 <type 'float'>
               -1e-09 - -1 = 0.999999999 <type 'float'>
               -1e-09 * -1 = 1e-09 <type 'float'>
               -1e-09 / -1 = 1e-09 <type 'float'>
               -1e-09 ** -1 = -1000000000.0 <type 'float'>
               -1e-09 % -1 = -1e-09 <type 'float'>
               -1e-09 < -1 = False <type 'bool'>
               -1e-09 = -1 = False <type 'bool'>
               -1e-09 > -1 = True <type 'bool'>
               -1e-09 <= -1 = False <type 'bool'>
               -1e-09 != -1 = True <type 'bool'>
               -1e-09 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'int'> 2
               -1e-09 + 2 = 1.999999999 <type 'float'>
               -1e-09 - 2 = -2.000000001 <type 'float'>
               -1e-09 * 2 = -2e-09 <type 'float'>
               -1e-09 / 2 = -5e-10 <type 'float'>
               -1e-09 ** 2 = 1e-18 <type 'float'>
               -1e-09 % 2 = 1.999999999 <type 'float'>
               -1e-09 < 2 = True <type 'bool'>
               -1e-09 = 2 = False <type 'bool'>
               -1e-09 > 2 = False <type 'bool'>
               -1e-09 <= 2 = True <type 'bool'>
               -1e-09 != 2 = True <type 'bool'>
               -1e-09 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               -1e-09 + 2.0 = 1.999999999 <type 'float'>
               -1e-09 - 2.0 = -2.000000001 <type 'float'>
               -1e-09 * 2.0 = -2e-09 <type 'float'>
               -1e-09 / 2.0 = -5e-10 <type 'float'>
               -1e-09 ** 2.0 = 1e-18 <type 'float'>
               -1e-09 % 2.0 = 1.999999999 <type 'float'>
               -1e-09 < 2.0 = True <type 'bool'>
               -1e-09 = 2.0 = False <type 'bool'>
               -1e-09 > 2.0 = False <type 'bool'>
               -1e-09 <= 2.0 = True <type 'bool'>
               -1e-09 != 2.0 = True <type 'bool'>
               -1e-09 >= 2.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 2
               -1e-09 + 2 = 1.999999999 <type 'float'>
               -1e-09 - 2 = -2.000000001 <type 'float'>
               -1e-09 * 2 = -2e-09 <type 'float'>
               -1e-09 / 2 = -5e-10 <type 'float'>
               -1e-09 ** 2 = 1e-18 <type 'float'>
               -1e-09 % 2 = 1.999999999 <type 'float'>
               -1e-09 < 2 = True <type 'bool'>
               -1e-09 = 2 = False <type 'bool'>
               -1e-09 > 2 = False <type 'bool'>
               -1e-09 <= 2 = True <type 'bool'>
               -1e-09 != 2 = True <type 'bool'>
               -1e-09 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'int'> -2
               -1e-09 + -2 = -2.000000001 <type 'float'>
               -1e-09 - -2 = 1.999999999 <type 'float'>
               -1e-09 * -2 = 2e-09 <type 'float'>
               -1e-09 / -2 = 5e-10 <type 'float'>
               -1e-09 ** -2 = 1e+18 <type 'float'>
               -1e-09 % -2 = -1e-09 <type 'float'>
               -1e-09 < -2 = False <type 'bool'>
               -1e-09 = -2 = False <type 'bool'>
               -1e-09 > -2 = True <type 'bool'>
               -1e-09 <= -2 = False <type 'bool'>
               -1e-09 != -2 = True <type 'bool'>
               -1e-09 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               -1e-09 + -2.0 = -2.000000001 <type 'float'>
               -1e-09 - -2.0 = 1.999999999 <type 'float'>
               -1e-09 * -2.0 = 2e-09 <type 'float'>
               -1e-09 / -2.0 = 5e-10 <type 'float'>
               -1e-09 ** -2.0 = 1e+18 <type 'float'>
               -1e-09 % -2.0 = -1e-09 <type 'float'>
               -1e-09 < -2.0 = False <type 'bool'>
               -1e-09 = -2.0 = False <type 'bool'>
               -1e-09 > -2.0 = True <type 'bool'>
               -1e-09 <= -2.0 = False <type 'bool'>
               -1e-09 != -2.0 = True <type 'bool'>
               -1e-09 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               -1e-09 + -2 = -2.000000001 <type 'float'>
               -1e-09 - -2 = 1.999999999 <type 'float'>
               -1e-09 * -2 = 2e-09 <type 'float'>
               -1e-09 / -2 = 5e-10 <type 'float'>
               -1e-09 ** -2 = 1e+18 <type 'float'>
               -1e-09 % -2 = -1e-09 <type 'float'>
               -1e-09 < -2 = False <type 'bool'>
               -1e-09 = -2 = False <type 'bool'>
               -1e-09 > -2 = True <type 'bool'>
               -1e-09 <= -2 = False <type 'bool'>
               -1e-09 != -2 = True <type 'bool'>
               -1e-09 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               -1e-09 + 1000000000.0 = 1000000000.0 <type 'float'>
               -1e-09 - 1000000000.0 = -1000000000.0 <type 'float'>
               -1e-09 * 1000000000.0 = -1.0 <type 'float'>
               -1e-09 / 1000000000.0 = -1e-18 <type 'float'>
skipping pow of really big number
               -1e-09 % 1000000000.0 = 1000000000.0 <type 'float'>
               -1e-09 < 1000000000.0 = True <type 'bool'>
               -1e-09 = 1000000000.0 = False <type 'bool'>
               -1e-09 > 1000000000.0 = False <type 'bool'>
               -1e-09 <= 1000000000.0 = True <type 'bool'>
               -1e-09 != 1000000000.0 = True <type 'bool'>
               -1e-09 >= 1000000000.0 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               -1e-09 + -1000000000.0 = -1000000000.0 <type 'float'>
               -1e-09 - -1000000000.0 = 1000000000.0 <type 'float'>
               -1e-09 * -1000000000.0 = 1.0 <type 'float'>
               -1e-09 / -1000000000.0 = 1e-18 <type 'float'>
               -1e-09 ** -1000000000.0 = Can't  <type 'float'> ** <type 'float'>
               -1e-09 % -1000000000.0 = -1e-09 <type 'float'>
               -1e-09 < -1000000000.0 = False <type 'bool'>
               -1e-09 = -1000000000.0 = False <type 'bool'>
               -1e-09 > -1000000000.0 = True <type 'bool'>
               -1e-09 <= -1000000000.0 = False <type 'bool'>
               -1e-09 != -1000000000.0 = True <type 'bool'>
               -1e-09 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               -1e-09 + 1e-09 = 0.0 <type 'float'>
               -1e-09 - 1e-09 = -2e-09 <type 'float'>
               -1e-09 * 1e-09 = -1e-18 <type 'float'>
               -1e-09 / 1e-09 = -1.0 <type 'float'>
               -1e-09 ** 1e-09 = Can't  <type 'float'> ** <type 'float'>
               -1e-09 % 1e-09 = 0.0 <type 'float'>
               -1e-09 < 1e-09 = True <type 'bool'>
               -1e-09 = 1e-09 = False <type 'bool'>
               -1e-09 > 1e-09 = False <type 'bool'>
               -1e-09 <= 1e-09 = True <type 'bool'>
               -1e-09 != 1e-09 = True <type 'bool'>
               -1e-09 >= 1e-09 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               -1e-09 + -1e-09 = -2e-09 <type 'float'>
               -1e-09 - -1e-09 = 0.0 <type 'float'>
               -1e-09 * -1e-09 = 1e-18 <type 'float'>
               -1e-09 / -1e-09 = 1.0 <type 'float'>
               -1e-09 ** -1e-09 = Can't  <type 'float'> ** <type 'float'>
               -1e-09 % -1e-09 = 0.0 <type 'float'>
               -1e-09 < -1e-09 = False <type 'bool'>
               -1e-09 = -1e-09 = True <type 'bool'>
               -1e-09 > -1e-09 = False <type 'bool'>
               -1e-09 <= -1e-09 = True <type 'bool'>
               -1e-09 != -1e-09 = False <type 'bool'>
               -1e-09 >= -1e-09 = True <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               -1e-09 + 123456789 = 123456789.0 <type 'float'>
               -1e-09 - 123456789 = -123456789.0 <type 'float'>
               -1e-09 * 123456789 = -0.123456789 <type 'float'>
               -1e-09 / 123456789 = -8.10000007371e-18 <type 'float'>
skipping pow of really big number
               -1e-09 % 123456789 = 123456789.0 <type 'float'>
               -1e-09 < 123456789 = True <type 'bool'>
               -1e-09 = 123456789 = False <type 'bool'>
               -1e-09 > 123456789 = False <type 'bool'>
               -1e-09 <= 123456789 = True <type 'bool'>
               -1e-09 != 123456789 = True <type 'bool'>
               -1e-09 >= 123456789 = False <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               -1e-09 + 12345678901234567890123456789 = 1.23456789012e+28 <type 'float'>
               -1e-09 - 12345678901234567890123456789 = -1.23456789012e+28 <type 'float'>
               -1e-09 * 12345678901234567890123456789 = -1.23456789012e+19 <type 'float'>
               -1e-09 / 12345678901234567890123456789 = -8.1000000729e-38 <type 'float'>
skipping pow of really big number
               -1e-09 % 12345678901234567890123456789 = 1.23456789012e+28 <type 'float'>
               -1e-09 < 12345678901234567890123456789 = True <type 'bool'>
               -1e-09 = 12345678901234567890123456789 = False <type 'bool'>
               -1e-09 > 12345678901234567890123456789 = False <type 'bool'>
               -1e-09 <= 12345678901234567890123456789 = True <type 'bool'>
               -1e-09 != 12345678901234567890123456789 = True <type 'bool'>
               -1e-09 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'long'> 123456789
     Op 2 :::  <type 'int'> 1
               123456789 + 1 = 123456790 <type 'long'>
               123456789 - 1 = 123456788 <type 'long'>
               123456789 * 1 = 123456789 <type 'long'>
               123456789 / 1 = 123456789 <type 'long'>
               123456789 ** 1 = 123456789 <type 'long'>
               123456789 % 1 = 0 <type 'long'>
               123456789 < 1 = False <type 'bool'>
               123456789 = 1 = False <type 'bool'>
               123456789 > 1 = True <type 'bool'>
               123456789 <= 1 = False <type 'bool'>
               123456789 != 1 = True <type 'bool'>
               123456789 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               123456789 + 1.0 = 123456790.0 <type 'float'>
               123456789 - 1.0 = 123456788.0 <type 'float'>
               123456789 * 1.0 = 123456789.0 <type 'float'>
               123456789 / 1.0 = 123456789.0 <type 'float'>
               123456789 ** 1.0 = 123456789.0 <type 'float'>
               123456789 % 1.0 = 0.0 <type 'float'>
               123456789 < 1.0 = False <type 'bool'>
               123456789 = 1.0 = False <type 'bool'>
               123456789 > 1.0 = True <type 'bool'>
               123456789 <= 1.0 = False <type 'bool'>
               123456789 != 1.0 = True <type 'bool'>
               123456789 >= 1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> 1
               123456789 + 1 = 123456790 <type 'long'>
               123456789 - 1 = 123456788 <type 'long'>
               123456789 * 1 = 123456789 <type 'long'>
               123456789 / 1 = 123456789 <type 'long'>
               123456789 ** 1 = 123456789 <type 'long'>
               123456789 % 1 = 0 <type 'long'>
               123456789 < 1 = False <type 'bool'>
               123456789 = 1 = False <type 'bool'>
               123456789 > 1 = True <type 'bool'>
               123456789 <= 1 = False <type 'bool'>
               123456789 != 1 = True <type 'bool'>
               123456789 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'int'> -1
               123456789 + -1 = 123456788 <type 'long'>
               123456789 - -1 = 123456790 <type 'long'>
               123456789 * -1 = -123456789 <type 'long'>
               123456789 / -1 = -123456789 <type 'long'>
               123456789 ** -1 = 8.10000007371e-09 <type 'float'>
               123456789 % -1 = 0 <type 'long'>
               123456789 < -1 = False <type 'bool'>
               123456789 = -1 = False <type 'bool'>
               123456789 > -1 = True <type 'bool'>
               123456789 <= -1 = False <type 'bool'>
               123456789 != -1 = True <type 'bool'>
               123456789 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               123456789 + -1.0 = 123456788.0 <type 'float'>
               123456789 - -1.0 = 123456790.0 <type 'float'>
               123456789 * -1.0 = -123456789.0 <type 'float'>
               123456789 / -1.0 = -123456789.0 <type 'float'>
               123456789 ** -1.0 = 8.10000007371e-09 <type 'float'>
               123456789 % -1.0 = 0.0 <type 'float'>
               123456789 < -1.0 = False <type 'bool'>
               123456789 = -1.0 = False <type 'bool'>
               123456789 > -1.0 = True <type 'bool'>
               123456789 <= -1.0 = False <type 'bool'>
               123456789 != -1.0 = True <type 'bool'>
               123456789 >= -1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -1
               123456789 + -1 = 123456788 <type 'long'>
               123456789 - -1 = 123456790 <type 'long'>
               123456789 * -1 = -123456789 <type 'long'>
               123456789 / -1 = -123456789 <type 'long'>
               123456789 ** -1 = 8.10000007371e-09 <type 'float'>
               123456789 % -1 = 0 <type 'long'>
               123456789 < -1 = False <type 'bool'>
               123456789 = -1 = False <type 'bool'>
               123456789 > -1 = True <type 'bool'>
               123456789 <= -1 = False <type 'bool'>
               123456789 != -1 = True <type 'bool'>
               123456789 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'int'> 2
               123456789 + 2 = 123456791 <type 'long'>
               123456789 - 2 = 123456787 <type 'long'>
               123456789 * 2 = 246913578 <type 'long'>
               123456789 / 2 = 61728394 <type 'long'>
               123456789 ** 2 = 15241578750190521 <type 'long'>
               123456789 % 2 = 1 <type 'long'>
               123456789 < 2 = False <type 'bool'>
               123456789 = 2 = False <type 'bool'>
               123456789 > 2 = True <type 'bool'>
               123456789 <= 2 = False <type 'bool'>
               123456789 != 2 = True <type 'bool'>
               123456789 >= 2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               123456789 + 2.0 = 123456791.0 <type 'float'>
               123456789 - 2.0 = 123456787.0 <type 'float'>
               123456789 * 2.0 = 246913578.0 <type 'float'>
               123456789 / 2.0 = 61728394.5 <type 'float'>
               123456789 ** 2.0 = 1.52415787502e+16 <type 'float'>
               123456789 % 2.0 = 1.0 <type 'float'>
               123456789 < 2.0 = False <type 'bool'>
               123456789 = 2.0 = False <type 'bool'>
               123456789 > 2.0 = True <type 'bool'>
               123456789 <= 2.0 = False <type 'bool'>
               123456789 != 2.0 = True <type 'bool'>
               123456789 >= 2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> 2
               123456789 + 2 = 123456791 <type 'long'>
               123456789 - 2 = 123456787 <type 'long'>
               123456789 * 2 = 246913578 <type 'long'>
               123456789 / 2 = 61728394 <type 'long'>
               123456789 ** 2 = 15241578750190521 <type 'long'>
               123456789 % 2 = 1 <type 'long'>
               123456789 < 2 = False <type 'bool'>
               123456789 = 2 = False <type 'bool'>
               123456789 > 2 = True <type 'bool'>
               123456789 <= 2 = False <type 'bool'>
               123456789 != 2 = True <type 'bool'>
               123456789 >= 2 = True <type 'bool'>
     Op 2 :::  <type 'int'> -2
               123456789 + -2 = 123456787 <type 'long'>
               123456789 - -2 = 123456791 <type 'long'>
               123456789 * -2 = -246913578 <type 'long'>
               123456789 / -2 = -61728395 <type 'long'>
               123456789 ** -2 = 6.56100011941e-17 <type 'float'>
               123456789 % -2 = -1 <type 'long'>
               123456789 < -2 = False <type 'bool'>
               123456789 = -2 = False <type 'bool'>
               123456789 > -2 = True <type 'bool'>
               123456789 <= -2 = False <type 'bool'>
               123456789 != -2 = True <type 'bool'>
               123456789 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               123456789 + -2.0 = 123456787.0 <type 'float'>
               123456789 - -2.0 = 123456791.0 <type 'float'>
               123456789 * -2.0 = -246913578.0 <type 'float'>
               123456789 / -2.0 = -61728394.5 <type 'float'>
               123456789 ** -2.0 = 6.56100011941e-17 <type 'float'>
               123456789 % -2.0 = -1.0 <type 'float'>
               123456789 < -2.0 = False <type 'bool'>
               123456789 = -2.0 = False <type 'bool'>
               123456789 > -2.0 = True <type 'bool'>
               123456789 <= -2.0 = False <type 'bool'>
               123456789 != -2.0 = True <type 'bool'>
               123456789 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               123456789 + -2 = 123456787 <type 'long'>
               123456789 - -2 = 123456791 <type 'long'>
               123456789 * -2 = -246913578 <type 'long'>
               123456789 / -2 = -61728395 <type 'long'>
               123456789 ** -2 = 6.56100011941e-17 <type 'float'>
               123456789 % -2 = -1 <type 'long'>
               123456789 < -2 = False <type 'bool'>
               123456789 = -2 = False <type 'bool'>
               123456789 > -2 = True <type 'bool'>
               123456789 <= -2 = False <type 'bool'>
               123456789 != -2 = True <type 'bool'>
               123456789 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               123456789 + 1000000000.0 = 1123456789.0 <type 'float'>
               123456789 - 1000000000.0 = -876543211.0 <type 'float'>
               123456789 * 1000000000.0 = 1.23456789e+17 <type 'float'>
               123456789 / 1000000000.0 = 0.123456789 <type 'float'>
skipping pow of really big number
               123456789 % 1000000000.0 = 123456789.0 <type 'float'>
               123456789 < 1000000000.0 = True <type 'bool'>
               123456789 = 1000000000.0 = False <type 'bool'>
               123456789 > 1000000000.0 = False <type 'bool'>
               123456789 <= 1000000000.0 = True <type 'bool'>
               123456789 != 1000000000.0 = True <type 'bool'>
               123456789 >= 1000000000.0 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               123456789 + -1000000000.0 = -876543211.0 <type 'float'>
               123456789 - -1000000000.0 = 1123456789.0 <type 'float'>
               123456789 * -1000000000.0 = -1.23456789e+17 <type 'float'>
               123456789 / -1000000000.0 = -0.123456789 <type 'float'>
               123456789 ** -1000000000.0 = 0.0 <type 'float'>
               123456789 % -1000000000.0 = -876543211.0 <type 'float'>
               123456789 < -1000000000.0 = False <type 'bool'>
               123456789 = -1000000000.0 = False <type 'bool'>
               123456789 > -1000000000.0 = True <type 'bool'>
               123456789 <= -1000000000.0 = False <type 'bool'>
               123456789 != -1000000000.0 = True <type 'bool'>
               123456789 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               123456789 + 1e-09 = 123456789.0 <type 'float'>
               123456789 - 1e-09 = 123456789.0 <type 'float'>
               123456789 * 1e-09 = 0.123456789 <type 'float'>
               123456789 / 1e-09 = 1.23456789e+17 <type 'float'>
               123456789 ** 1e-09 = 1.00000001863 <type 'float'>
               123456789 % 1e-09 = 3.10914704813e-10 <type 'float'>
               123456789 < 1e-09 = False <type 'bool'>
               123456789 = 1e-09 = False <type 'bool'>
               123456789 > 1e-09 = True <type 'bool'>
               123456789 <= 1e-09 = False <type 'bool'>
               123456789 != 1e-09 = True <type 'bool'>
               123456789 >= 1e-09 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               123456789 + -1e-09 = 123456789.0 <type 'float'>
               123456789 - -1e-09 = 123456789.0 <type 'float'>
               123456789 * -1e-09 = -0.123456789 <type 'float'>
               123456789 / -1e-09 = -1.23456789e+17 <type 'float'>
               123456789 ** -1e-09 = 0.999999981369 <type 'float'>
               123456789 % -1e-09 = -6.89085295187e-10 <type 'float'>
               123456789 < -1e-09 = False <type 'bool'>
               123456789 = -1e-09 = False <type 'bool'>
               123456789 > -1e-09 = True <type 'bool'>
               123456789 <= -1e-09 = False <type 'bool'>
               123456789 != -1e-09 = True <type 'bool'>
               123456789 >= -1e-09 = True <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               123456789 + 123456789 = 246913578 <type 'long'>
               123456789 - 123456789 = 0 <type 'long'>
               123456789 * 123456789 = 15241578750190521 <type 'long'>
               123456789 / 123456789 = 1 <type 'long'>
skipping pow of really big number
               123456789 % 123456789 = 0 <type 'long'>
               123456789 < 123456789 = False <type 'bool'>
               123456789 = 123456789 = True <type 'bool'>
               123456789 > 123456789 = False <type 'bool'>
               123456789 <= 123456789 = True <type 'bool'>
               123456789 != 123456789 = False <type 'bool'>
               123456789 >= 123456789 = True <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               123456789 + 12345678901234567890123456789 = 12345678901234567890246913578 <type 'long'>
               123456789 - 12345678901234567890123456789 = -12345678901234567890000000000 <type 'long'>
               123456789 * 12345678901234567890123456789 = 1524157875171467887517146788750190521 <type 'long'>
               123456789 / 12345678901234567890123456789 = 0 <type 'long'>
skipping pow of really big number
               123456789 % 12345678901234567890123456789 = 123456789 <type 'long'>
               123456789 < 12345678901234567890123456789 = True <type 'bool'>
               123456789 = 12345678901234567890123456789 = False <type 'bool'>
               123456789 > 12345678901234567890123456789 = False <type 'bool'>
               123456789 <= 12345678901234567890123456789 = True <type 'bool'>
               123456789 != 12345678901234567890123456789 = True <type 'bool'>
               123456789 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'long'> 12345678901234567890123456789
     Op 2 :::  <type 'int'> 1
               12345678901234567890123456789 + 1 = 12345678901234567890123456790 <type 'long'>
               12345678901234567890123456789 - 1 = 12345678901234567890123456788 <type 'long'>
               12345678901234567890123456789 * 1 = 12345678901234567890123456789 <type 'long'>
               12345678901234567890123456789 / 1 = 12345678901234567890123456789 <type 'long'>
               12345678901234567890123456789 ** 1 = 12345678901234567890123456789 <type 'long'>
               12345678901234567890123456789 % 1 = 0 <type 'long'>
               12345678901234567890123456789 < 1 = False <type 'bool'>
               12345678901234567890123456789 = 1 = False <type 'bool'>
               12345678901234567890123456789 > 1 = True <type 'bool'>
               12345678901234567890123456789 <= 1 = False <type 'bool'>
               12345678901234567890123456789 != 1 = True <type 'bool'>
               12345678901234567890123456789 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               12345678901234567890123456789 + 1.0 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 - 1.0 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 * 1.0 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 / 1.0 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 ** 1.0 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 % 1.0 = 0.0 <type 'float'>
               12345678901234567890123456789 < 1.0 = False <type 'bool'>
               12345678901234567890123456789 = 1.0 = False <type 'bool'>
               12345678901234567890123456789 > 1.0 = True <type 'bool'>
               12345678901234567890123456789 <= 1.0 = False <type 'bool'>
               12345678901234567890123456789 != 1.0 = True <type 'bool'>
               12345678901234567890123456789 >= 1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> 1
               12345678901234567890123456789 + 1 = 12345678901234567890123456790 <type 'long'>
               12345678901234567890123456789 - 1 = 12345678901234567890123456788 <type 'long'>
               12345678901234567890123456789 * 1 = 12345678901234567890123456789 <type 'long'>
               12345678901234567890123456789 / 1 = 12345678901234567890123456789 <type 'long'>
               12345678901234567890123456789 ** 1 = 12345678901234567890123456789 <type 'long'>
               12345678901234567890123456789 % 1 = 0 <type 'long'>
               12345678901234567890123456789 < 1 = False <type 'bool'>
               12345678901234567890123456789 = 1 = False <type 'bool'>
               12345678901234567890123456789 > 1 = True <type 'bool'>
               12345678901234567890123456789 <= 1 = False <type 'bool'>
               12345678901234567890123456789 != 1 = True <type 'bool'>
               12345678901234567890123456789 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'int'> -1
               12345678901234567890123456789 + -1 = 12345678901234567890123456788 <type 'long'>
               12345678901234567890123456789 - -1 = 12345678901234567890123456790 <type 'long'>
               12345678901234567890123456789 * -1 = -12345678901234567890123456789 <type 'long'>
               12345678901234567890123456789 / -1 = -12345678901234567890123456789 <type 'long'>
               12345678901234567890123456789 ** -1 = 8.1000000729e-29 <type 'float'>
               12345678901234567890123456789 % -1 = 0 <type 'long'>
               12345678901234567890123456789 < -1 = False <type 'bool'>
               12345678901234567890123456789 = -1 = False <type 'bool'>
               12345678901234567890123456789 > -1 = True <type 'bool'>
               12345678901234567890123456789 <= -1 = False <type 'bool'>
               12345678901234567890123456789 != -1 = True <type 'bool'>
               12345678901234567890123456789 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               12345678901234567890123456789 + -1.0 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 - -1.0 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 * -1.0 = -1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 / -1.0 = -1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 ** -1.0 = 8.1000000729e-29 <type 'float'>
               12345678901234567890123456789 % -1.0 = 0.0 <type 'float'>
               12345678901234567890123456789 < -1.0 = False <type 'bool'>
               12345678901234567890123456789 = -1.0 = False <type 'bool'>
               12345678901234567890123456789 > -1.0 = True <type 'bool'>
               12345678901234567890123456789 <= -1.0 = False <type 'bool'>
               12345678901234567890123456789 != -1.0 = True <type 'bool'>
               12345678901234567890123456789 >= -1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -1
               12345678901234567890123456789 + -1 = 12345678901234567890123456788 <type 'long'>
               12345678901234567890123456789 - -1 = 12345678901234567890123456790 <type 'long'>
               12345678901234567890123456789 * -1 = -12345678901234567890123456789 <type 'long'>
               12345678901234567890123456789 / -1 = -12345678901234567890123456789 <type 'long'>
               12345678901234567890123456789 ** -1 = 8.1000000729e-29 <type 'float'>
               12345678901234567890123456789 % -1 = 0 <type 'long'>
               12345678901234567890123456789 < -1 = False <type 'bool'>
               12345678901234567890123456789 = -1 = False <type 'bool'>
               12345678901234567890123456789 > -1 = True <type 'bool'>
               12345678901234567890123456789 <= -1 = False <type 'bool'>
               12345678901234567890123456789 != -1 = True <type 'bool'>
               12345678901234567890123456789 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'int'> 2
               12345678901234567890123456789 + 2 = 12345678901234567890123456791 <type 'long'>
               12345678901234567890123456789 - 2 = 12345678901234567890123456787 <type 'long'>
               12345678901234567890123456789 * 2 = 24691357802469135780246913578 <type 'long'>
               12345678901234567890123456789 / 2 = 6172839450617283945061728394 <type 'long'>
               12345678901234567890123456789 ** 2 = 152415787532388367504953515625361987875019051998750190521 <type 'long'>
               12345678901234567890123456789 % 2 = 1 <type 'long'>
               12345678901234567890123456789 < 2 = False <type 'bool'>
               12345678901234567890123456789 = 2 = False <type 'bool'>
               12345678901234567890123456789 > 2 = True <type 'bool'>
               12345678901234567890123456789 <= 2 = False <type 'bool'>
               12345678901234567890123456789 != 2 = True <type 'bool'>
               12345678901234567890123456789 >= 2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               12345678901234567890123456789 + 2.0 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 - 2.0 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 * 2.0 = 2.46913578025e+28 <type 'float'>
               12345678901234567890123456789 / 2.0 = 6.17283945062e+27 <type 'float'>
               12345678901234567890123456789 ** 2.0 = 1.52415787532e+56 <type 'float'>
               12345678901234567890123456789 % 2.0 = 0.0 <type 'float'>
               12345678901234567890123456789 < 2.0 = False <type 'bool'>
               12345678901234567890123456789 = 2.0 = False <type 'bool'>
               12345678901234567890123456789 > 2.0 = True <type 'bool'>
               12345678901234567890123456789 <= 2.0 = False <type 'bool'>
               12345678901234567890123456789 != 2.0 = True <type 'bool'>
               12345678901234567890123456789 >= 2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> 2
               12345678901234567890123456789 + 2 = 12345678901234567890123456791 <type 'long'>
               12345678901234567890123456789 - 2 = 12345678901234567890123456787 <type 'long'>
               12345678901234567890123456789 * 2 = 24691357802469135780246913578 <type 'long'>
               12345678901234567890123456789 / 2 = 6172839450617283945061728394 <type 'long'>
               12345678901234567890123456789 ** 2 = 152415787532388367504953515625361987875019051998750190521 <type 'long'>
               12345678901234567890123456789 % 2 = 1 <type 'long'>
               12345678901234567890123456789 < 2 = False <type 'bool'>
               12345678901234567890123456789 = 2 = False <type 'bool'>
               12345678901234567890123456789 > 2 = True <type 'bool'>
               12345678901234567890123456789 <= 2 = False <type 'bool'>
               12345678901234567890123456789 != 2 = True <type 'bool'>
               12345678901234567890123456789 >= 2 = True <type 'bool'>
     Op 2 :::  <type 'int'> -2
               12345678901234567890123456789 + -2 = 12345678901234567890123456787 <type 'long'>
               12345678901234567890123456789 - -2 = 12345678901234567890123456791 <type 'long'>
               12345678901234567890123456789 * -2 = -24691357802469135780246913578 <type 'long'>
               12345678901234567890123456789 / -2 = -6172839450617283945061728395 <type 'long'>
               12345678901234567890123456789 ** -2 = 6.5610001181e-57 <type 'float'>
               12345678901234567890123456789 % -2 = -1 <type 'long'>
               12345678901234567890123456789 < -2 = False <type 'bool'>
               12345678901234567890123456789 = -2 = False <type 'bool'>
               12345678901234567890123456789 > -2 = True <type 'bool'>
               12345678901234567890123456789 <= -2 = False <type 'bool'>
               12345678901234567890123456789 != -2 = True <type 'bool'>
               12345678901234567890123456789 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               12345678901234567890123456789 + -2.0 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 - -2.0 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 * -2.0 = -2.46913578025e+28 <type 'float'>
               12345678901234567890123456789 / -2.0 = -6.17283945062e+27 <type 'float'>
               12345678901234567890123456789 ** -2.0 = 6.5610001181e-57 <type 'float'>
               12345678901234567890123456789 % -2.0 = 0.0 <type 'float'>
               12345678901234567890123456789 < -2.0 = False <type 'bool'>
               12345678901234567890123456789 = -2.0 = False <type 'bool'>
               12345678901234567890123456789 > -2.0 = True <type 'bool'>
               12345678901234567890123456789 <= -2.0 = False <type 'bool'>
               12345678901234567890123456789 != -2.0 = True <type 'bool'>
               12345678901234567890123456789 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               12345678901234567890123456789 + -2 = 12345678901234567890123456787 <type 'long'>
               12345678901234567890123456789 - -2 = 12345678901234567890123456791 <type 'long'>
               12345678901234567890123456789 * -2 = -24691357802469135780246913578 <type 'long'>
               12345678901234567890123456789 / -2 = -6172839450617283945061728395 <type 'long'>
               12345678901234567890123456789 ** -2 = 6.5610001181e-57 <type 'float'>
               12345678901234567890123456789 % -2 = -1 <type 'long'>
               12345678901234567890123456789 < -2 = False <type 'bool'>
               12345678901234567890123456789 = -2 = False <type 'bool'>
               12345678901234567890123456789 > -2 = True <type 'bool'>
               12345678901234567890123456789 <= -2 = False <type 'bool'>
               12345678901234567890123456789 != -2 = True <type 'bool'>
               12345678901234567890123456789 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               12345678901234567890123456789 + 1000000000.0 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 - 1000000000.0 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 * 1000000000.0 = 1.23456789012e+37 <type 'float'>
               12345678901234567890123456789 / 1000000000.0 = 1.23456789012e+19 <type 'float'>
skipping pow of really big number
               12345678901234567890123456789 % 1000000000.0 = 576610816.0 <type 'float'>
               12345678901234567890123456789 < 1000000000.0 = False <type 'bool'>
               12345678901234567890123456789 = 1000000000.0 = False <type 'bool'>
               12345678901234567890123456789 > 1000000000.0 = True <type 'bool'>
               12345678901234567890123456789 <= 1000000000.0 = False <type 'bool'>
               12345678901234567890123456789 != 1000000000.0 = True <type 'bool'>
               12345678901234567890123456789 >= 1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               12345678901234567890123456789 + -1000000000.0 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 - -1000000000.0 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 * -1000000000.0 = -1.23456789012e+37 <type 'float'>
               12345678901234567890123456789 / -1000000000.0 = -1.23456789012e+19 <type 'float'>
               12345678901234567890123456789 ** -1000000000.0 = 0.0 <type 'float'>
               12345678901234567890123456789 % -1000000000.0 = -423389184.0 <type 'float'>
               12345678901234567890123456789 < -1000000000.0 = False <type 'bool'>
               12345678901234567890123456789 = -1000000000.0 = False <type 'bool'>
               12345678901234567890123456789 > -1000000000.0 = True <type 'bool'>
               12345678901234567890123456789 <= -1000000000.0 = False <type 'bool'>
               12345678901234567890123456789 != -1000000000.0 = True <type 'bool'>
               12345678901234567890123456789 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               12345678901234567890123456789 + 1e-09 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 - 1e-09 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 * 1e-09 = 1.23456789012e+19 <type 'float'>
               12345678901234567890123456789 / 1e-09 = 1.23456789012e+37 <type 'float'>
               12345678901234567890123456789 ** 1e-09 = 1.00000006468 <type 'float'>
               12345678901234567890123456789 % 1e-09 = 3.57944476856e-10 <type 'float'>
               12345678901234567890123456789 < 1e-09 = False <type 'bool'>
               12345678901234567890123456789 = 1e-09 = False <type 'bool'>
               12345678901234567890123456789 > 1e-09 = True <type 'bool'>
               12345678901234567890123456789 <= 1e-09 = False <type 'bool'>
               12345678901234567890123456789 != 1e-09 = True <type 'bool'>
               12345678901234567890123456789 >= 1e-09 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               12345678901234567890123456789 + -1e-09 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 - -1e-09 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 * -1e-09 = -1.23456789012e+19 <type 'float'>
               12345678901234567890123456789 / -1e-09 = -1.23456789012e+37 <type 'float'>
               12345678901234567890123456789 ** -1e-09 = 0.999999935317 <type 'float'>
               12345678901234567890123456789 % -1e-09 = -6.42055523144e-10 <type 'float'>
               12345678901234567890123456789 < -1e-09 = False <type 'bool'>
               12345678901234567890123456789 = -1e-09 = False <type 'bool'>
               12345678901234567890123456789 > -1e-09 = True <type 'bool'>
               12345678901234567890123456789 <= -1e-09 = False <type 'bool'>
               12345678901234567890123456789 != -1e-09 = True <type 'bool'>
               12345678901234567890123456789 >= -1e-09 = True <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               12345678901234567890123456789 + 123456789 = 12345678901234567890246913578 <type 'long'>
               12345678901234567890123456789 - 123456789 = 12345678901234567890000000000 <type 'long'>
               12345678901234567890123456789 * 123456789 = 1524157875171467887517146788750190521 <type 'long'>
               12345678901234567890123456789 / 123456789 = 100000000010000000001 <type 'long'>
skipping pow of really big number
               12345678901234567890123456789 % 123456789 = 0 <type 'long'>
               12345678901234567890123456789 < 123456789 = False <type 'bool'>
               12345678901234567890123456789 = 123456789 = False <type 'bool'>
               12345678901234567890123456789 > 123456789 = True <type 'bool'>
               12345678901234567890123456789 <= 123456789 = False <type 'bool'>
               12345678901234567890123456789 != 123456789 = True <type 'bool'>
               12345678901234567890123456789 >= 123456789 = True <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               12345678901234567890123456789 + 12345678901234567890123456789 = 24691357802469135780246913578 <type 'long'>
               12345678901234567890123456789 - 12345678901234567890123456789 = 0 <type 'long'>
               12345678901234567890123456789 * 12345678901234567890123456789 = 152415787532388367504953515625361987875019051998750190521 <type 'long'>
               12345678901234567890123456789 / 12345678901234567890123456789 = 1 <type 'long'>
skipping pow of really big number
               12345678901234567890123456789 % 12345678901234567890123456789 = 0 <type 'long'>
               12345678901234567890123456789 < 12345678901234567890123456789 = False <type 'bool'>
               12345678901234567890123456789 = 12345678901234567890123456789 = True <type 'bool'>
               12345678901234567890123456789 > 12345678901234567890123456789 = False <type 'bool'>
               12345678901234567890123456789 <= 12345678901234567890123456789 = True <type 'bool'>
               12345678901234567890123456789 != 12345678901234567890123456789 = False <type 'bool'>
               12345678901234567890123456789 >= 12345678901234567890123456789 = True <type 'bool'>

-----
DIFF:
-----
len got: 23

len wanted: 219293

firstdiff at: 0 got: 69 (EXCEPTION: SyntaxError
) expect: 66 (Big number test
Op 1 :::  <type 'int'> 1
     Op 2 :::  <type 'int'> 1
               1 + 1 = 2 <type 'int'>
               1 - 1 = 0 <type 'int'>
               1 * 1 = 1 <type 'int'>
               1 / 1 = 1 <type 'int'>
               1 ** 1 = 1 <type 'int'>
               1 % 1 = 0 <type 'int'>
               1 < 1 = False <type 'bool'>
               1 = 1 = True <type 'bool'>
               1 > 1 = False <type 'bool'>
               1 <= 1 = True <type 'bool'>
               1 != 1 = False <type 'bool'>
               1 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               1 + 1.0 = 2.0 <type 'float'>
               1 - 1.0 = 0.0 <type 'float'>
               1 * 1.0 = 1.0 <type 'float'>
               1 / 1.0 = 1.0 <type 'float'>
               1 ** 1.0 = 1.0 <type 'float'>
               1 % 1.0 = 0.0 <type 'float'>
               1 < 1.0 = False <type 'bool'>
               1 = 1.0 = True <type 'bool'>
               1 > 1.0 = False <type 'bool'>
               1 <= 1.0 = True <type 'bool'>
               1 != 1.0 = False <type 'bool'>
               1 >= 1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> 1
               1 + 1 = 2 <type 'long'>
               1 - 1 = 0 <type 'long'>
               1 * 1 = 1 <type 'long'>
               1 / 1 = 1 <type 'long'>
               1 ** 1 = 1 <type 'long'>
               1 % 1 = 0 <type 'long'>
               1 < 1 = False <type 'bool'>
               1 = 1 = True <type 'bool'>
               1 > 1 = False <type 'bool'>
               1 <= 1 = True <type 'bool'>
               1 != 1 = False <type 'bool'>
               1 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'int'> -1
               1 + -1 = 0 <type 'int'>
               1 - -1 = 2 <type 'int'>
               1 * -1 = -1 <type 'int'>
               1 / -1 = -1 <type 'int'>
               1 ** -1 = 1.0 <type 'float'>
               1 % -1 = 0 <type 'int'>
               1 < -1 = False <type 'bool'>
               1 = -1 = False <type 'bool'>
               1 > -1 = True <type 'bool'>
               1 <= -1 = False <type 'bool'>
               1 != -1 = True <type 'bool'>
               1 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               1 + -1.0 = 0.0 <type 'float'>
               1 - -1.0 = 2.0 <type 'float'>
               1 * -1.0 = -1.0 <type 'float'>
               1 / -1.0 = -1.0 <type 'float'>
               1 ** -1.0 = 1.0 <type 'float'>
               1 % -1.0 = 0.0 <type 'float'>
               1 < -1.0 = False <type 'bool'>
               1 = -1.0 = False <type 'bool'>
               1 > -1.0 = True <type 'bool'>
               1 <= -1.0 = False <type 'bool'>
               1 != -1.0 = True <type 'bool'>
               1 >= -1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -1
               1 + -1 = 0 <type 'long'>
               1 - -1 = 2 <type 'long'>
               1 * -1 = -1 <type 'long'>
               1 / -1 = -1 <type 'long'>
               1 ** -1 = 1.0 <type 'float'>
               1 % -1 = 0 <type 'long'>
               1 < -1 = False <type 'bool'>
               1 = -1 = False <type 'bool'>
               1 > -1 = True <type 'bool'>
               1 <= -1 = False <type 'bool'>
               1 != -1 = True <type 'bool'>
               1 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'int'> 2
               1 + 2 = 3 <type 'int'>
               1 - 2 = -1 <type 'int'>
               1 * 2 = 2 <type 'int'>
               1 / 2 = 0 <type 'int'>
               1 ** 2 = 1 <type 'int'>
               1 % 2 = 1 <type 'int'>
               1 < 2 = True <type 'bool'>
               1 = 2 = False <type 'bool'>
               1 > 2 = False <type 'bool'>
               1 <= 2 = True <type 'bool'>
               1 != 2 = True <type 'bool'>
               1 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               1 + 2.0 = 3.0 <type 'float'>
               1 - 2.0 = -1.0 <type 'float'>
               1 * 2.0 = 2.0 <type 'float'>
               1 / 2.0 = 0.5 <type 'float'>
               1 ** 2.0 = 1.0 <type 'float'>
               1 % 2.0 = 1.0 <type 'float'>
               1 < 2.0 = True <type 'bool'>
               1 = 2.0 = False <type 'bool'>
               1 > 2.0 = False <type 'bool'>
               1 <= 2.0 = True <type 'bool'>
               1 != 2.0 = True <type 'bool'>
               1 >= 2.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 2
               1 + 2 = 3 <type 'long'>
               1 - 2 = -1 <type 'long'>
               1 * 2 = 2 <type 'long'>
               1 / 2 = 0 <type 'long'>
               1 ** 2 = 1 <type 'long'>
               1 % 2 = 1 <type 'long'>
               1 < 2 = True <type 'bool'>
               1 = 2 = False <type 'bool'>
               1 > 2 = False <type 'bool'>
               1 <= 2 = True <type 'bool'>
               1 != 2 = True <type 'bool'>
               1 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'int'> -2
               1 + -2 = -1 <type 'int'>
               1 - -2 = 3 <type 'int'>
               1 * -2 = -2 <type 'int'>
               1 / -2 = -1 <type 'int'>
               1 ** -2 = 1.0 <type 'float'>
               1 % -2 = -1 <type 'int'>
               1 < -2 = False <type 'bool'>
               1 = -2 = False <type 'bool'>
               1 > -2 = True <type 'bool'>
               1 <= -2 = False <type 'bool'>
               1 != -2 = True <type 'bool'>
               1 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               1 + -2.0 = -1.0 <type 'float'>
               1 - -2.0 = 3.0 <type 'float'>
               1 * -2.0 = -2.0 <type 'float'>
               1 / -2.0 = -0.5 <type 'float'>
               1 ** -2.0 = 1.0 <type 'float'>
               1 % -2.0 = -1.0 <type 'float'>
               1 < -2.0 = False <type 'bool'>
               1 = -2.0 = False <type 'bool'>
               1 > -2.0 = True <type 'bool'>
               1 <= -2.0 = False <type 'bool'>
               1 != -2.0 = True <type 'bool'>
               1 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               1 + -2 = -1 <type 'long'>
               1 - -2 = 3 <type 'long'>
               1 * -2 = -2 <type 'long'>
               1 / -2 = -1 <type 'long'>
               1 ** -2 = 1.0 <type 'float'>
               1 % -2 = -1 <type 'long'>
               1 < -2 = False <type 'bool'>
               1 = -2 = False <type 'bool'>
               1 > -2 = True <type 'bool'>
               1 <= -2 = False <type 'bool'>
               1 != -2 = True <type 'bool'>
               1 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               1 + 1000000000.0 = 1000000001.0 <type 'float'>
               1 - 1000000000.0 = -999999999.0 <type 'float'>
               1 * 1000000000.0 = 1000000000.0 <type 'float'>
               1 / 1000000000.0 = 1e-09 <type 'float'>
skipping pow of really big number
               1 % 1000000000.0 = 1.0 <type 'float'>
               1 < 1000000000.0 = True <type 'bool'>
               1 = 1000000000.0 = False <type 'bool'>
               1 > 1000000000.0 = False <type 'bool'>
               1 <= 1000000000.0 = True <type 'bool'>
               1 != 1000000000.0 = True <type 'bool'>
               1 >= 1000000000.0 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               1 + -1000000000.0 = -999999999.0 <type 'float'>
               1 - -1000000000.0 = 1000000001.0 <type 'float'>
               1 * -1000000000.0 = -1000000000.0 <type 'float'>
               1 / -1000000000.0 = -1e-09 <type 'float'>
               1 ** -1000000000.0 = 1.0 <type 'float'>
               1 % -1000000000.0 = -999999999.0 <type 'float'>
               1 < -1000000000.0 = False <type 'bool'>
               1 = -1000000000.0 = False <type 'bool'>
               1 > -1000000000.0 = True <type 'bool'>
               1 <= -1000000000.0 = False <type 'bool'>
               1 != -1000000000.0 = True <type 'bool'>
               1 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               1 + 1e-09 = 1.000000001 <type 'float'>
               1 - 1e-09 = 0.999999999 <type 'float'>
               1 * 1e-09 = 1e-09 <type 'float'>
               1 / 1e-09 = 1000000000.0 <type 'float'>
               1 ** 1e-09 = 1.0 <type 'float'>
               1 % 1e-09 = 9.99999937718e-10 <type 'float'>
               1 < 1e-09 = False <type 'bool'>
               1 = 1e-09 = False <type 'bool'>
               1 > 1e-09 = True <type 'bool'>
               1 <= 1e-09 = False <type 'bool'>
               1 != 1e-09 = True <type 'bool'>
               1 >= 1e-09 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               1 + -1e-09 = 0.999999999 <type 'float'>
               1 - -1e-09 = 1.000000001 <type 'float'>
               1 * -1e-09 = -1e-09 <type 'float'>
               1 / -1e-09 = -1000000000.0 <type 'float'>
               1 ** -1e-09 = 1.0 <type 'float'>
               1 % -1e-09 = -6.22815914578e-17 <type 'float'>
               1 < -1e-09 = False <type 'bool'>
               1 = -1e-09 = False <type 'bool'>
               1 > -1e-09 = True <type 'bool'>
               1 <= -1e-09 = False <type 'bool'>
               1 != -1e-09 = True <type 'bool'>
               1 >= -1e-09 = True <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               1 + 123456789 = 123456790 <type 'long'>
               1 - 123456789 = -123456788 <type 'long'>
               1 * 123456789 = 123456789 <type 'long'>
               1 / 123456789 = 0 <type 'long'>
skipping pow of really big number
               1 % 123456789 = 1 <type 'long'>
               1 < 123456789 = True <type 'bool'>
               1 = 123456789 = False <type 'bool'>
               1 > 123456789 = False <type 'bool'>
               1 <= 123456789 = True <type 'bool'>
               1 != 123456789 = True <type 'bool'>
               1 >= 123456789 = False <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               1 + 12345678901234567890123456789 = 12345678901234567890123456790 <type 'long'>
               1 - 12345678901234567890123456789 = -12345678901234567890123456788 <type 'long'>
               1 * 12345678901234567890123456789 = 12345678901234567890123456789 <type 'long'>
               1 / 12345678901234567890123456789 = 0 <type 'long'>
skipping pow of really big number
               1 % 12345678901234567890123456789 = 1 <type 'long'>
               1 < 12345678901234567890123456789 = True <type 'bool'>
               1 = 12345678901234567890123456789 = False <type 'bool'>
               1 > 12345678901234567890123456789 = False <type 'bool'>
               1 <= 12345678901234567890123456789 = True <type 'bool'>
               1 != 12345678901234567890123456789 = True <type 'bool'>
               1 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'float'> 1.0
     Op 2 :::  <type 'int'> 1
               1.0 + 1 = 2.0 <type 'float'>
               1.0 - 1 = 0.0 <type 'float'>
               1.0 * 1 = 1.0 <type 'float'>
               1.0 / 1 = 1.0 <type 'float'>
               1.0 ** 1 = 1.0 <type 'float'>
               1.0 % 1 = 0.0 <type 'float'>
               1.0 < 1 = False <type 'bool'>
               1.0 = 1 = True <type 'bool'>
               1.0 > 1 = False <type 'bool'>
               1.0 <= 1 = True <type 'bool'>
               1.0 != 1 = False <type 'bool'>
               1.0 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               1.0 + 1.0 = 2.0 <type 'float'>
               1.0 - 1.0 = 0.0 <type 'float'>
               1.0 * 1.0 = 1.0 <type 'float'>
               1.0 / 1.0 = 1.0 <type 'float'>
               1.0 ** 1.0 = 1.0 <type 'float'>
               1.0 % 1.0 = 0.0 <type 'float'>
               1.0 < 1.0 = False <type 'bool'>
               1.0 = 1.0 = True <type 'bool'>
               1.0 > 1.0 = False <type 'bool'>
               1.0 <= 1.0 = True <type 'bool'>
               1.0 != 1.0 = False <type 'bool'>
               1.0 >= 1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> 1
               1.0 + 1 = 2.0 <type 'float'>
               1.0 - 1 = 0.0 <type 'float'>
               1.0 * 1 = 1.0 <type 'float'>
               1.0 / 1 = 1.0 <type 'float'>
               1.0 ** 1 = 1.0 <type 'float'>
               1.0 % 1 = 0.0 <type 'float'>
               1.0 < 1 = False <type 'bool'>
               1.0 = 1 = True <type 'bool'>
               1.0 > 1 = False <type 'bool'>
               1.0 <= 1 = True <type 'bool'>
               1.0 != 1 = False <type 'bool'>
               1.0 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'int'> -1
               1.0 + -1 = 0.0 <type 'float'>
               1.0 - -1 = 2.0 <type 'float'>
               1.0 * -1 = -1.0 <type 'float'>
               1.0 / -1 = -1.0 <type 'float'>
               1.0 ** -1 = 1.0 <type 'float'>
               1.0 % -1 = 0.0 <type 'float'>
               1.0 < -1 = False <type 'bool'>
               1.0 = -1 = False <type 'bool'>
               1.0 > -1 = True <type 'bool'>
               1.0 <= -1 = False <type 'bool'>
               1.0 != -1 = True <type 'bool'>
               1.0 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               1.0 + -1.0 = 0.0 <type 'float'>
               1.0 - -1.0 = 2.0 <type 'float'>
               1.0 * -1.0 = -1.0 <type 'float'>
               1.0 / -1.0 = -1.0 <type 'float'>
               1.0 ** -1.0 = 1.0 <type 'float'>
               1.0 % -1.0 = 0.0 <type 'float'>
               1.0 < -1.0 = False <type 'bool'>
               1.0 = -1.0 = False <type 'bool'>
               1.0 > -1.0 = True <type 'bool'>
               1.0 <= -1.0 = False <type 'bool'>
               1.0 != -1.0 = True <type 'bool'>
               1.0 >= -1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -1
               1.0 + -1 = 0.0 <type 'float'>
               1.0 - -1 = 2.0 <type 'float'>
               1.0 * -1 = -1.0 <type 'float'>
               1.0 / -1 = -1.0 <type 'float'>
               1.0 ** -1 = 1.0 <type 'float'>
               1.0 % -1 = 0.0 <type 'float'>
               1.0 < -1 = False <type 'bool'>
               1.0 = -1 = False <type 'bool'>
               1.0 > -1 = True <type 'bool'>
               1.0 <= -1 = False <type 'bool'>
               1.0 != -1 = True <type 'bool'>
               1.0 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'int'> 2
               1.0 + 2 = 3.0 <type 'float'>
               1.0 - 2 = -1.0 <type 'float'>
               1.0 * 2 = 2.0 <type 'float'>
               1.0 / 2 = 0.5 <type 'float'>
               1.0 ** 2 = 1.0 <type 'float'>
               1.0 % 2 = 1.0 <type 'float'>
               1.0 < 2 = True <type 'bool'>
               1.0 = 2 = False <type 'bool'>
               1.0 > 2 = False <type 'bool'>
               1.0 <= 2 = True <type 'bool'>
               1.0 != 2 = True <type 'bool'>
               1.0 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               1.0 + 2.0 = 3.0 <type 'float'>
               1.0 - 2.0 = -1.0 <type 'float'>
               1.0 * 2.0 = 2.0 <type 'float'>
               1.0 / 2.0 = 0.5 <type 'float'>
               1.0 ** 2.0 = 1.0 <type 'float'>
               1.0 % 2.0 = 1.0 <type 'float'>
               1.0 < 2.0 = True <type 'bool'>
               1.0 = 2.0 = False <type 'bool'>
               1.0 > 2.0 = False <type 'bool'>
               1.0 <= 2.0 = True <type 'bool'>
               1.0 != 2.0 = True <type 'bool'>
               1.0 >= 2.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 2
               1.0 + 2 = 3.0 <type 'float'>
               1.0 - 2 = -1.0 <type 'float'>
               1.0 * 2 = 2.0 <type 'float'>
               1.0 / 2 = 0.5 <type 'float'>
               1.0 ** 2 = 1.0 <type 'float'>
               1.0 % 2 = 1.0 <type 'float'>
               1.0 < 2 = True <type 'bool'>
               1.0 = 2 = False <type 'bool'>
               1.0 > 2 = False <type 'bool'>
               1.0 <= 2 = True <type 'bool'>
               1.0 != 2 = True <type 'bool'>
               1.0 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'int'> -2
               1.0 + -2 = -1.0 <type 'float'>
               1.0 - -2 = 3.0 <type 'float'>
               1.0 * -2 = -2.0 <type 'float'>
               1.0 / -2 = -0.5 <type 'float'>
               1.0 ** -2 = 1.0 <type 'float'>
               1.0 % -2 = -1.0 <type 'float'>
               1.0 < -2 = False <type 'bool'>
               1.0 = -2 = False <type 'bool'>
               1.0 > -2 = True <type 'bool'>
               1.0 <= -2 = False <type 'bool'>
               1.0 != -2 = True <type 'bool'>
               1.0 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               1.0 + -2.0 = -1.0 <type 'float'>
               1.0 - -2.0 = 3.0 <type 'float'>
               1.0 * -2.0 = -2.0 <type 'float'>
               1.0 / -2.0 = -0.5 <type 'float'>
               1.0 ** -2.0 = 1.0 <type 'float'>
               1.0 % -2.0 = -1.0 <type 'float'>
               1.0 < -2.0 = False <type 'bool'>
               1.0 = -2.0 = False <type 'bool'>
               1.0 > -2.0 = True <type 'bool'>
               1.0 <= -2.0 = False <type 'bool'>
               1.0 != -2.0 = True <type 'bool'>
               1.0 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               1.0 + -2 = -1.0 <type 'float'>
               1.0 - -2 = 3.0 <type 'float'>
               1.0 * -2 = -2.0 <type 'float'>
               1.0 / -2 = -0.5 <type 'float'>
               1.0 ** -2 = 1.0 <type 'float'>
               1.0 % -2 = -1.0 <type 'float'>
               1.0 < -2 = False <type 'bool'>
               1.0 = -2 = False <type 'bool'>
               1.0 > -2 = True <type 'bool'>
               1.0 <= -2 = False <type 'bool'>
               1.0 != -2 = True <type 'bool'>
               1.0 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               1.0 + 1000000000.0 = 1000000001.0 <type 'float'>
               1.0 - 1000000000.0 = -999999999.0 <type 'float'>
               1.0 * 1000000000.0 = 1000000000.0 <type 'float'>
               1.0 / 1000000000.0 = 1e-09 <type 'float'>
skipping pow of really big number
               1.0 % 1000000000.0 = 1.0 <type 'float'>
               1.0 < 1000000000.0 = True <type 'bool'>
               1.0 = 1000000000.0 = False <type 'bool'>
               1.0 > 1000000000.0 = False <type 'bool'>
               1.0 <= 1000000000.0 = True <type 'bool'>
               1.0 != 1000000000.0 = True <type 'bool'>
               1.0 >= 1000000000.0 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               1.0 + -1000000000.0 = -999999999.0 <type 'float'>
               1.0 - -1000000000.0 = 1000000001.0 <type 'float'>
               1.0 * -1000000000.0 = -1000000000.0 <type 'float'>
               1.0 / -1000000000.0 = -1e-09 <type 'float'>
               1.0 ** -1000000000.0 = 1.0 <type 'float'>
               1.0 % -1000000000.0 = -999999999.0 <type 'float'>
               1.0 < -1000000000.0 = False <type 'bool'>
               1.0 = -1000000000.0 = False <type 'bool'>
               1.0 > -1000000000.0 = True <type 'bool'>
               1.0 <= -1000000000.0 = False <type 'bool'>
               1.0 != -1000000000.0 = True <type 'bool'>
               1.0 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               1.0 + 1e-09 = 1.000000001 <type 'float'>
               1.0 - 1e-09 = 0.999999999 <type 'float'>
               1.0 * 1e-09 = 1e-09 <type 'float'>
               1.0 / 1e-09 = 1000000000.0 <type 'float'>
               1.0 ** 1e-09 = 1.0 <type 'float'>
               1.0 % 1e-09 = 9.99999937718e-10 <type 'float'>
               1.0 < 1e-09 = False <type 'bool'>
               1.0 = 1e-09 = False <type 'bool'>
               1.0 > 1e-09 = True <type 'bool'>
               1.0 <= 1e-09 = False <type 'bool'>
               1.0 != 1e-09 = True <type 'bool'>
               1.0 >= 1e-09 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               1.0 + -1e-09 = 0.999999999 <type 'float'>
               1.0 - -1e-09 = 1.000000001 <type 'float'>
               1.0 * -1e-09 = -1e-09 <type 'float'>
               1.0 / -1e-09 = -1000000000.0 <type 'float'>
               1.0 ** -1e-09 = 1.0 <type 'float'>
               1.0 % -1e-09 = -6.22815914578e-17 <type 'float'>
               1.0 < -1e-09 = False <type 'bool'>
               1.0 = -1e-09 = False <type 'bool'>
               1.0 > -1e-09 = True <type 'bool'>
               1.0 <= -1e-09 = False <type 'bool'>
               1.0 != -1e-09 = True <type 'bool'>
               1.0 >= -1e-09 = True <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               1.0 + 123456789 = 123456790.0 <type 'float'>
               1.0 - 123456789 = -123456788.0 <type 'float'>
               1.0 * 123456789 = 123456789.0 <type 'float'>
               1.0 / 123456789 = 8.10000007371e-09 <type 'float'>
skipping pow of really big number
               1.0 % 123456789 = 1.0 <type 'float'>
               1.0 < 123456789 = True <type 'bool'>
               1.0 = 123456789 = False <type 'bool'>
               1.0 > 123456789 = False <type 'bool'>
               1.0 <= 123456789 = True <type 'bool'>
               1.0 != 123456789 = True <type 'bool'>
               1.0 >= 123456789 = False <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               1.0 + 12345678901234567890123456789 = 1.23456789012e+28 <type 'float'>
               1.0 - 12345678901234567890123456789 = -1.23456789012e+28 <type 'float'>
               1.0 * 12345678901234567890123456789 = 1.23456789012e+28 <type 'float'>
               1.0 / 12345678901234567890123456789 = 8.1000000729e-29 <type 'float'>
skipping pow of really big number
               1.0 % 12345678901234567890123456789 = 1.0 <type 'float'>
               1.0 < 12345678901234567890123456789 = True <type 'bool'>
               1.0 = 12345678901234567890123456789 = False <type 'bool'>
               1.0 > 12345678901234567890123456789 = False <type 'bool'>
               1.0 <= 12345678901234567890123456789 = True <type 'bool'>
               1.0 != 12345678901234567890123456789 = True <type 'bool'>
               1.0 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'long'> 1
     Op 2 :::  <type 'int'> 1
               1 + 1 = 2 <type 'long'>
               1 - 1 = 0 <type 'long'>
               1 * 1 = 1 <type 'long'>
               1 / 1 = 1 <type 'long'>
               1 ** 1 = 1 <type 'long'>
               1 % 1 = 0 <type 'long'>
               1 < 1 = False <type 'bool'>
               1 = 1 = True <type 'bool'>
               1 > 1 = False <type 'bool'>
               1 <= 1 = True <type 'bool'>
               1 != 1 = False <type 'bool'>
               1 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               1 + 1.0 = 2.0 <type 'float'>
               1 - 1.0 = 0.0 <type 'float'>
               1 * 1.0 = 1.0 <type 'float'>
               1 / 1.0 = 1.0 <type 'float'>
               1 ** 1.0 = 1.0 <type 'float'>
               1 % 1.0 = 0.0 <type 'float'>
               1 < 1.0 = False <type 'bool'>
               1 = 1.0 = True <type 'bool'>
               1 > 1.0 = False <type 'bool'>
               1 <= 1.0 = True <type 'bool'>
               1 != 1.0 = False <type 'bool'>
               1 >= 1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> 1
               1 + 1 = 2 <type 'long'>
               1 - 1 = 0 <type 'long'>
               1 * 1 = 1 <type 'long'>
               1 / 1 = 1 <type 'long'>
               1 ** 1 = 1 <type 'long'>
               1 % 1 = 0 <type 'long'>
               1 < 1 = False <type 'bool'>
               1 = 1 = True <type 'bool'>
               1 > 1 = False <type 'bool'>
               1 <= 1 = True <type 'bool'>
               1 != 1 = False <type 'bool'>
               1 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'int'> -1
               1 + -1 = 0 <type 'long'>
               1 - -1 = 2 <type 'long'>
               1 * -1 = -1 <type 'long'>
               1 / -1 = -1 <type 'long'>
               1 ** -1 = 1.0 <type 'float'>
               1 % -1 = 0 <type 'long'>
               1 < -1 = False <type 'bool'>
               1 = -1 = False <type 'bool'>
               1 > -1 = True <type 'bool'>
               1 <= -1 = False <type 'bool'>
               1 != -1 = True <type 'bool'>
               1 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               1 + -1.0 = 0.0 <type 'float'>
               1 - -1.0 = 2.0 <type 'float'>
               1 * -1.0 = -1.0 <type 'float'>
               1 / -1.0 = -1.0 <type 'float'>
               1 ** -1.0 = 1.0 <type 'float'>
               1 % -1.0 = 0.0 <type 'float'>
               1 < -1.0 = False <type 'bool'>
               1 = -1.0 = False <type 'bool'>
               1 > -1.0 = True <type 'bool'>
               1 <= -1.0 = False <type 'bool'>
               1 != -1.0 = True <type 'bool'>
               1 >= -1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -1
               1 + -1 = 0 <type 'long'>
               1 - -1 = 2 <type 'long'>
               1 * -1 = -1 <type 'long'>
               1 / -1 = -1 <type 'long'>
               1 ** -1 = 1.0 <type 'float'>
               1 % -1 = 0 <type 'long'>
               1 < -1 = False <type 'bool'>
               1 = -1 = False <type 'bool'>
               1 > -1 = True <type 'bool'>
               1 <= -1 = False <type 'bool'>
               1 != -1 = True <type 'bool'>
               1 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'int'> 2
               1 + 2 = 3 <type 'long'>
               1 - 2 = -1 <type 'long'>
               1 * 2 = 2 <type 'long'>
               1 / 2 = 0 <type 'long'>
               1 ** 2 = 1 <type 'long'>
               1 % 2 = 1 <type 'long'>
               1 < 2 = True <type 'bool'>
               1 = 2 = False <type 'bool'>
               1 > 2 = False <type 'bool'>
               1 <= 2 = True <type 'bool'>
               1 != 2 = True <type 'bool'>
               1 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               1 + 2.0 = 3.0 <type 'float'>
               1 - 2.0 = -1.0 <type 'float'>
               1 * 2.0 = 2.0 <type 'float'>
               1 / 2.0 = 0.5 <type 'float'>
               1 ** 2.0 = 1.0 <type 'float'>
               1 % 2.0 = 1.0 <type 'float'>
               1 < 2.0 = True <type 'bool'>
               1 = 2.0 = False <type 'bool'>
               1 > 2.0 = False <type 'bool'>
               1 <= 2.0 = True <type 'bool'>
               1 != 2.0 = True <type 'bool'>
               1 >= 2.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 2
               1 + 2 = 3 <type 'long'>
               1 - 2 = -1 <type 'long'>
               1 * 2 = 2 <type 'long'>
               1 / 2 = 0 <type 'long'>
               1 ** 2 = 1 <type 'long'>
               1 % 2 = 1 <type 'long'>
               1 < 2 = True <type 'bool'>
               1 = 2 = False <type 'bool'>
               1 > 2 = False <type 'bool'>
               1 <= 2 = True <type 'bool'>
               1 != 2 = True <type 'bool'>
               1 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'int'> -2
               1 + -2 = -1 <type 'long'>
               1 - -2 = 3 <type 'long'>
               1 * -2 = -2 <type 'long'>
               1 / -2 = -1 <type 'long'>
               1 ** -2 = 1.0 <type 'float'>
               1 % -2 = -1 <type 'long'>
               1 < -2 = False <type 'bool'>
               1 = -2 = False <type 'bool'>
               1 > -2 = True <type 'bool'>
               1 <= -2 = False <type 'bool'>
               1 != -2 = True <type 'bool'>
               1 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               1 + -2.0 = -1.0 <type 'float'>
               1 - -2.0 = 3.0 <type 'float'>
               1 * -2.0 = -2.0 <type 'float'>
               1 / -2.0 = -0.5 <type 'float'>
               1 ** -2.0 = 1.0 <type 'float'>
               1 % -2.0 = -1.0 <type 'float'>
               1 < -2.0 = False <type 'bool'>
               1 = -2.0 = False <type 'bool'>
               1 > -2.0 = True <type 'bool'>
               1 <= -2.0 = False <type 'bool'>
               1 != -2.0 = True <type 'bool'>
               1 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               1 + -2 = -1 <type 'long'>
               1 - -2 = 3 <type 'long'>
               1 * -2 = -2 <type 'long'>
               1 / -2 = -1 <type 'long'>
               1 ** -2 = 1.0 <type 'float'>
               1 % -2 = -1 <type 'long'>
               1 < -2 = False <type 'bool'>
               1 = -2 = False <type 'bool'>
               1 > -2 = True <type 'bool'>
               1 <= -2 = False <type 'bool'>
               1 != -2 = True <type 'bool'>
               1 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               1 + 1000000000.0 = 1000000001.0 <type 'float'>
               1 - 1000000000.0 = -999999999.0 <type 'float'>
               1 * 1000000000.0 = 1000000000.0 <type 'float'>
               1 / 1000000000.0 = 1e-09 <type 'float'>
skipping pow of really big number
               1 % 1000000000.0 = 1.0 <type 'float'>
               1 < 1000000000.0 = True <type 'bool'>
               1 = 1000000000.0 = False <type 'bool'>
               1 > 1000000000.0 = False <type 'bool'>
               1 <= 1000000000.0 = True <type 'bool'>
               1 != 1000000000.0 = True <type 'bool'>
               1 >= 1000000000.0 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               1 + -1000000000.0 = -999999999.0 <type 'float'>
               1 - -1000000000.0 = 1000000001.0 <type 'float'>
               1 * -1000000000.0 = -1000000000.0 <type 'float'>
               1 / -1000000000.0 = -1e-09 <type 'float'>
               1 ** -1000000000.0 = 1.0 <type 'float'>
               1 % -1000000000.0 = -999999999.0 <type 'float'>
               1 < -1000000000.0 = False <type 'bool'>
               1 = -1000000000.0 = False <type 'bool'>
               1 > -1000000000.0 = True <type 'bool'>
               1 <= -1000000000.0 = False <type 'bool'>
               1 != -1000000000.0 = True <type 'bool'>
               1 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               1 + 1e-09 = 1.000000001 <type 'float'>
               1 - 1e-09 = 0.999999999 <type 'float'>
               1 * 1e-09 = 1e-09 <type 'float'>
               1 / 1e-09 = 1000000000.0 <type 'float'>
               1 ** 1e-09 = 1.0 <type 'float'>
               1 % 1e-09 = 9.99999937718e-10 <type 'float'>
               1 < 1e-09 = False <type 'bool'>
               1 = 1e-09 = False <type 'bool'>
               1 > 1e-09 = True <type 'bool'>
               1 <= 1e-09 = False <type 'bool'>
               1 != 1e-09 = True <type 'bool'>
               1 >= 1e-09 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               1 + -1e-09 = 0.999999999 <type 'float'>
               1 - -1e-09 = 1.000000001 <type 'float'>
               1 * -1e-09 = -1e-09 <type 'float'>
               1 / -1e-09 = -1000000000.0 <type 'float'>
               1 ** -1e-09 = 1.0 <type 'float'>
               1 % -1e-09 = -6.22815914578e-17 <type 'float'>
               1 < -1e-09 = False <type 'bool'>
               1 = -1e-09 = False <type 'bool'>
               1 > -1e-09 = True <type 'bool'>
               1 <= -1e-09 = False <type 'bool'>
               1 != -1e-09 = True <type 'bool'>
               1 >= -1e-09 = True <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               1 + 123456789 = 123456790 <type 'long'>
               1 - 123456789 = -123456788 <type 'long'>
               1 * 123456789 = 123456789 <type 'long'>
               1 / 123456789 = 0 <type 'long'>
skipping pow of really big number
               1 % 123456789 = 1 <type 'long'>
               1 < 123456789 = True <type 'bool'>
               1 = 123456789 = False <type 'bool'>
               1 > 123456789 = False <type 'bool'>
               1 <= 123456789 = True <type 'bool'>
               1 != 123456789 = True <type 'bool'>
               1 >= 123456789 = False <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               1 + 12345678901234567890123456789 = 12345678901234567890123456790 <type 'long'>
               1 - 12345678901234567890123456789 = -12345678901234567890123456788 <type 'long'>
               1 * 12345678901234567890123456789 = 12345678901234567890123456789 <type 'long'>
               1 / 12345678901234567890123456789 = 0 <type 'long'>
skipping pow of really big number
               1 % 12345678901234567890123456789 = 1 <type 'long'>
               1 < 12345678901234567890123456789 = True <type 'bool'>
               1 = 12345678901234567890123456789 = False <type 'bool'>
               1 > 12345678901234567890123456789 = False <type 'bool'>
               1 <= 12345678901234567890123456789 = True <type 'bool'>
               1 != 12345678901234567890123456789 = True <type 'bool'>
               1 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'int'> -1
     Op 2 :::  <type 'int'> 1
               -1 + 1 = 0 <type 'int'>
               -1 - 1 = -2 <type 'int'>
               -1 * 1 = -1 <type 'int'>
               -1 / 1 = -1 <type 'int'>
               -1 ** 1 = -1 <type 'int'>
               -1 % 1 = 0 <type 'int'>
               -1 < 1 = True <type 'bool'>
               -1 = 1 = False <type 'bool'>
               -1 > 1 = False <type 'bool'>
               -1 <= 1 = True <type 'bool'>
               -1 != 1 = True <type 'bool'>
               -1 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               -1 + 1.0 = 0.0 <type 'float'>
               -1 - 1.0 = -2.0 <type 'float'>
               -1 * 1.0 = -1.0 <type 'float'>
               -1 / 1.0 = -1.0 <type 'float'>
               -1 ** 1.0 = -1.0 <type 'float'>
               -1 % 1.0 = 0.0 <type 'float'>
               -1 < 1.0 = True <type 'bool'>
               -1 = 1.0 = False <type 'bool'>
               -1 > 1.0 = False <type 'bool'>
               -1 <= 1.0 = True <type 'bool'>
               -1 != 1.0 = True <type 'bool'>
               -1 >= 1.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 1
               -1 + 1 = 0 <type 'long'>
               -1 - 1 = -2 <type 'long'>
               -1 * 1 = -1 <type 'long'>
               -1 / 1 = -1 <type 'long'>
               -1 ** 1 = -1 <type 'long'>
               -1 % 1 = 0 <type 'long'>
               -1 < 1 = True <type 'bool'>
               -1 = 1 = False <type 'bool'>
               -1 > 1 = False <type 'bool'>
               -1 <= 1 = True <type 'bool'>
               -1 != 1 = True <type 'bool'>
               -1 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'int'> -1
               -1 + -1 = -2 <type 'int'>
               -1 - -1 = 0 <type 'int'>
               -1 * -1 = 1 <type 'int'>
               -1 / -1 = 1 <type 'int'>
               -1 ** -1 = -1.0 <type 'float'>
               -1 % -1 = 0 <type 'int'>
               -1 < -1 = False <type 'bool'>
               -1 = -1 = True <type 'bool'>
               -1 > -1 = False <type 'bool'>
               -1 <= -1 = True <type 'bool'>
               -1 != -1 = False <type 'bool'>
               -1 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               -1 + -1.0 = -2.0 <type 'float'>
               -1 - -1.0 = 0.0 <type 'float'>
               -1 * -1.0 = 1.0 <type 'float'>
               -1 / -1.0 = 1.0 <type 'float'>
               -1 ** -1.0 = -1.0 <type 'float'>
               -1 % -1.0 = 0.0 <type 'float'>
               -1 < -1.0 = False <type 'bool'>
               -1 = -1.0 = True <type 'bool'>
               -1 > -1.0 = False <type 'bool'>
               -1 <= -1.0 = True <type 'bool'>
               -1 != -1.0 = False <type 'bool'>
               -1 >= -1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -1
               -1 + -1 = -2 <type 'long'>
               -1 - -1 = 0 <type 'long'>
               -1 * -1 = 1 <type 'long'>
               -1 / -1 = 1 <type 'long'>
               -1 ** -1 = -1.0 <type 'float'>
               -1 % -1 = 0 <type 'long'>
               -1 < -1 = False <type 'bool'>
               -1 = -1 = True <type 'bool'>
               -1 > -1 = False <type 'bool'>
               -1 <= -1 = True <type 'bool'>
               -1 != -1 = False <type 'bool'>
               -1 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'int'> 2
               -1 + 2 = 1 <type 'int'>
               -1 - 2 = -3 <type 'int'>
               -1 * 2 = -2 <type 'int'>
               -1 / 2 = -1 <type 'int'>
               -1 ** 2 = 1 <type 'int'>
               -1 % 2 = 1 <type 'int'>
               -1 < 2 = True <type 'bool'>
               -1 = 2 = False <type 'bool'>
               -1 > 2 = False <type 'bool'>
               -1 <= 2 = True <type 'bool'>
               -1 != 2 = True <type 'bool'>
               -1 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               -1 + 2.0 = 1.0 <type 'float'>
               -1 - 2.0 = -3.0 <type 'float'>
               -1 * 2.0 = -2.0 <type 'float'>
               -1 / 2.0 = -0.5 <type 'float'>
               -1 ** 2.0 = 1.0 <type 'float'>
               -1 % 2.0 = 1.0 <type 'float'>
               -1 < 2.0 = True <type 'bool'>
               -1 = 2.0 = False <type 'bool'>
               -1 > 2.0 = False <type 'bool'>
               -1 <= 2.0 = True <type 'bool'>
               -1 != 2.0 = True <type 'bool'>
               -1 >= 2.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 2
               -1 + 2 = 1 <type 'long'>
               -1 - 2 = -3 <type 'long'>
               -1 * 2 = -2 <type 'long'>
               -1 / 2 = -1 <type 'long'>
               -1 ** 2 = 1 <type 'long'>
               -1 % 2 = 1 <type 'long'>
               -1 < 2 = True <type 'bool'>
               -1 = 2 = False <type 'bool'>
               -1 > 2 = False <type 'bool'>
               -1 <= 2 = True <type 'bool'>
               -1 != 2 = True <type 'bool'>
               -1 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'int'> -2
               -1 + -2 = -3 <type 'int'>
               -1 - -2 = 1 <type 'int'>
               -1 * -2 = 2 <type 'int'>
               -1 / -2 = 0 <type 'int'>
               -1 ** -2 = 1.0 <type 'float'>
               -1 % -2 = -1 <type 'int'>
               -1 < -2 = False <type 'bool'>
               -1 = -2 = False <type 'bool'>
               -1 > -2 = True <type 'bool'>
               -1 <= -2 = False <type 'bool'>
               -1 != -2 = True <type 'bool'>
               -1 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               -1 + -2.0 = -3.0 <type 'float'>
               -1 - -2.0 = 1.0 <type 'float'>
               -1 * -2.0 = 2.0 <type 'float'>
               -1 / -2.0 = 0.5 <type 'float'>
               -1 ** -2.0 = 1.0 <type 'float'>
               -1 % -2.0 = -1.0 <type 'float'>
               -1 < -2.0 = False <type 'bool'>
               -1 = -2.0 = False <type 'bool'>
               -1 > -2.0 = True <type 'bool'>
               -1 <= -2.0 = False <type 'bool'>
               -1 != -2.0 = True <type 'bool'>
               -1 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               -1 + -2 = -3 <type 'long'>
               -1 - -2 = 1 <type 'long'>
               -1 * -2 = 2 <type 'long'>
               -1 / -2 = 0 <type 'long'>
               -1 ** -2 = 1.0 <type 'float'>
               -1 % -2 = -1 <type 'long'>
               -1 < -2 = False <type 'bool'>
               -1 = -2 = False <type 'bool'>
               -1 > -2 = True <type 'bool'>
               -1 <= -2 = False <type 'bool'>
               -1 != -2 = True <type 'bool'>
               -1 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               -1 + 1000000000.0 = 999999999.0 <type 'float'>
               -1 - 1000000000.0 = -1000000001.0 <type 'float'>
               -1 * 1000000000.0 = -1000000000.0 <type 'float'>
               -1 / 1000000000.0 = -1e-09 <type 'float'>
skipping pow of really big number
               -1 % 1000000000.0 = 999999999.0 <type 'float'>
               -1 < 1000000000.0 = True <type 'bool'>
               -1 = 1000000000.0 = False <type 'bool'>
               -1 > 1000000000.0 = False <type 'bool'>
               -1 <= 1000000000.0 = True <type 'bool'>
               -1 != 1000000000.0 = True <type 'bool'>
               -1 >= 1000000000.0 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               -1 + -1000000000.0 = -1000000001.0 <type 'float'>
               -1 - -1000000000.0 = 999999999.0 <type 'float'>
               -1 * -1000000000.0 = 1000000000.0 <type 'float'>
               -1 / -1000000000.0 = 1e-09 <type 'float'>
               -1 ** -1000000000.0 = 1.0 <type 'float'>
               -1 % -1000000000.0 = -1.0 <type 'float'>
               -1 < -1000000000.0 = False <type 'bool'>
               -1 = -1000000000.0 = False <type 'bool'>
               -1 > -1000000000.0 = True <type 'bool'>
               -1 <= -1000000000.0 = False <type 'bool'>
               -1 != -1000000000.0 = True <type 'bool'>
               -1 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               -1 + 1e-09 = -0.999999999 <type 'float'>
               -1 - 1e-09 = -1.000000001 <type 'float'>
               -1 * 1e-09 = -1e-09 <type 'float'>
               -1 / 1e-09 = -1000000000.0 <type 'float'>
               -1 ** 1e-09 = Can't  <type 'int'> ** <type 'float'>
               -1 % 1e-09 = 6.22815914578e-17 <type 'float'>
               -1 < 1e-09 = True <type 'bool'>
               -1 = 1e-09 = False <type 'bool'>
               -1 > 1e-09 = False <type 'bool'>
               -1 <= 1e-09 = True <type 'bool'>
               -1 != 1e-09 = True <type 'bool'>
               -1 >= 1e-09 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               -1 + -1e-09 = -1.000000001 <type 'float'>
               -1 - -1e-09 = -0.999999999 <type 'float'>
               -1 * -1e-09 = 1e-09 <type 'float'>
               -1 / -1e-09 = 1000000000.0 <type 'float'>
               -1 ** -1e-09 = Can't  <type 'int'> ** <type 'float'>
               -1 % -1e-09 = -9.99999937718e-10 <type 'float'>
               -1 < -1e-09 = True <type 'bool'>
               -1 = -1e-09 = False <type 'bool'>
               -1 > -1e-09 = False <type 'bool'>
               -1 <= -1e-09 = True <type 'bool'>
               -1 != -1e-09 = True <type 'bool'>
               -1 >= -1e-09 = False <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               -1 + 123456789 = 123456788 <type 'long'>
               -1 - 123456789 = -123456790 <type 'long'>
               -1 * 123456789 = -123456789 <type 'long'>
               -1 / 123456789 = -1 <type 'long'>
skipping pow of really big number
               -1 % 123456789 = 123456788 <type 'long'>
               -1 < 123456789 = True <type 'bool'>
               -1 = 123456789 = False <type 'bool'>
               -1 > 123456789 = False <type 'bool'>
               -1 <= 123456789 = True <type 'bool'>
               -1 != 123456789 = True <type 'bool'>
               -1 >= 123456789 = False <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               -1 + 12345678901234567890123456789 = 12345678901234567890123456788 <type 'long'>
               -1 - 12345678901234567890123456789 = -12345678901234567890123456790 <type 'long'>
               -1 * 12345678901234567890123456789 = -12345678901234567890123456789 <type 'long'>
               -1 / 12345678901234567890123456789 = -1 <type 'long'>
skipping pow of really big number
               -1 % 12345678901234567890123456789 = 12345678901234567890123456788 <type 'long'>
               -1 < 12345678901234567890123456789 = True <type 'bool'>
               -1 = 12345678901234567890123456789 = False <type 'bool'>
               -1 > 12345678901234567890123456789 = False <type 'bool'>
               -1 <= 12345678901234567890123456789 = True <type 'bool'>
               -1 != 12345678901234567890123456789 = True <type 'bool'>
               -1 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'float'> -1.0
     Op 2 :::  <type 'int'> 1
               -1.0 + 1 = 0.0 <type 'float'>
               -1.0 - 1 = -2.0 <type 'float'>
               -1.0 * 1 = -1.0 <type 'float'>
               -1.0 / 1 = -1.0 <type 'float'>
               -1.0 ** 1 = -1.0 <type 'float'>
               -1.0 % 1 = 0.0 <type 'float'>
               -1.0 < 1 = True <type 'bool'>
               -1.0 = 1 = False <type 'bool'>
               -1.0 > 1 = False <type 'bool'>
               -1.0 <= 1 = True <type 'bool'>
               -1.0 != 1 = True <type 'bool'>
               -1.0 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               -1.0 + 1.0 = 0.0 <type 'float'>
               -1.0 - 1.0 = -2.0 <type 'float'>
               -1.0 * 1.0 = -1.0 <type 'float'>
               -1.0 / 1.0 = -1.0 <type 'float'>
               -1.0 ** 1.0 = -1.0 <type 'float'>
               -1.0 % 1.0 = 0.0 <type 'float'>
               -1.0 < 1.0 = True <type 'bool'>
               -1.0 = 1.0 = False <type 'bool'>
               -1.0 > 1.0 = False <type 'bool'>
               -1.0 <= 1.0 = True <type 'bool'>
               -1.0 != 1.0 = True <type 'bool'>
               -1.0 >= 1.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 1
               -1.0 + 1 = 0.0 <type 'float'>
               -1.0 - 1 = -2.0 <type 'float'>
               -1.0 * 1 = -1.0 <type 'float'>
               -1.0 / 1 = -1.0 <type 'float'>
               -1.0 ** 1 = -1.0 <type 'float'>
               -1.0 % 1 = 0.0 <type 'float'>
               -1.0 < 1 = True <type 'bool'>
               -1.0 = 1 = False <type 'bool'>
               -1.0 > 1 = False <type 'bool'>
               -1.0 <= 1 = True <type 'bool'>
               -1.0 != 1 = True <type 'bool'>
               -1.0 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'int'> -1
               -1.0 + -1 = -2.0 <type 'float'>
               -1.0 - -1 = 0.0 <type 'float'>
               -1.0 * -1 = 1.0 <type 'float'>
               -1.0 / -1 = 1.0 <type 'float'>
               -1.0 ** -1 = -1.0 <type 'float'>
               -1.0 % -1 = 0.0 <type 'float'>
               -1.0 < -1 = False <type 'bool'>
               -1.0 = -1 = True <type 'bool'>
               -1.0 > -1 = False <type 'bool'>
               -1.0 <= -1 = True <type 'bool'>
               -1.0 != -1 = False <type 'bool'>
               -1.0 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               -1.0 + -1.0 = -2.0 <type 'float'>
               -1.0 - -1.0 = 0.0 <type 'float'>
               -1.0 * -1.0 = 1.0 <type 'float'>
               -1.0 / -1.0 = 1.0 <type 'float'>
               -1.0 ** -1.0 = -1.0 <type 'float'>
               -1.0 % -1.0 = 0.0 <type 'float'>
               -1.0 < -1.0 = False <type 'bool'>
               -1.0 = -1.0 = True <type 'bool'>
               -1.0 > -1.0 = False <type 'bool'>
               -1.0 <= -1.0 = True <type 'bool'>
               -1.0 != -1.0 = False <type 'bool'>
               -1.0 >= -1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -1
               -1.0 + -1 = -2.0 <type 'float'>
               -1.0 - -1 = 0.0 <type 'float'>
               -1.0 * -1 = 1.0 <type 'float'>
               -1.0 / -1 = 1.0 <type 'float'>
               -1.0 ** -1 = -1.0 <type 'float'>
               -1.0 % -1 = 0.0 <type 'float'>
               -1.0 < -1 = False <type 'bool'>
               -1.0 = -1 = True <type 'bool'>
               -1.0 > -1 = False <type 'bool'>
               -1.0 <= -1 = True <type 'bool'>
               -1.0 != -1 = False <type 'bool'>
               -1.0 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'int'> 2
               -1.0 + 2 = 1.0 <type 'float'>
               -1.0 - 2 = -3.0 <type 'float'>
               -1.0 * 2 = -2.0 <type 'float'>
               -1.0 / 2 = -0.5 <type 'float'>
               -1.0 ** 2 = 1.0 <type 'float'>
               -1.0 % 2 = 1.0 <type 'float'>
               -1.0 < 2 = True <type 'bool'>
               -1.0 = 2 = False <type 'bool'>
               -1.0 > 2 = False <type 'bool'>
               -1.0 <= 2 = True <type 'bool'>
               -1.0 != 2 = True <type 'bool'>
               -1.0 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               -1.0 + 2.0 = 1.0 <type 'float'>
               -1.0 - 2.0 = -3.0 <type 'float'>
               -1.0 * 2.0 = -2.0 <type 'float'>
               -1.0 / 2.0 = -0.5 <type 'float'>
               -1.0 ** 2.0 = 1.0 <type 'float'>
               -1.0 % 2.0 = 1.0 <type 'float'>
               -1.0 < 2.0 = True <type 'bool'>
               -1.0 = 2.0 = False <type 'bool'>
               -1.0 > 2.0 = False <type 'bool'>
               -1.0 <= 2.0 = True <type 'bool'>
               -1.0 != 2.0 = True <type 'bool'>
               -1.0 >= 2.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 2
               -1.0 + 2 = 1.0 <type 'float'>
               -1.0 - 2 = -3.0 <type 'float'>
               -1.0 * 2 = -2.0 <type 'float'>
               -1.0 / 2 = -0.5 <type 'float'>
               -1.0 ** 2 = 1.0 <type 'float'>
               -1.0 % 2 = 1.0 <type 'float'>
               -1.0 < 2 = True <type 'bool'>
               -1.0 = 2 = False <type 'bool'>
               -1.0 > 2 = False <type 'bool'>
               -1.0 <= 2 = True <type 'bool'>
               -1.0 != 2 = True <type 'bool'>
               -1.0 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'int'> -2
               -1.0 + -2 = -3.0 <type 'float'>
               -1.0 - -2 = 1.0 <type 'float'>
               -1.0 * -2 = 2.0 <type 'float'>
               -1.0 / -2 = 0.5 <type 'float'>
               -1.0 ** -2 = 1.0 <type 'float'>
               -1.0 % -2 = -1.0 <type 'float'>
               -1.0 < -2 = False <type 'bool'>
               -1.0 = -2 = False <type 'bool'>
               -1.0 > -2 = True <type 'bool'>
               -1.0 <= -2 = False <type 'bool'>
               -1.0 != -2 = True <type 'bool'>
               -1.0 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               -1.0 + -2.0 = -3.0 <type 'float'>
               -1.0 - -2.0 = 1.0 <type 'float'>
               -1.0 * -2.0 = 2.0 <type 'float'>
               -1.0 / -2.0 = 0.5 <type 'float'>
               -1.0 ** -2.0 = 1.0 <type 'float'>
               -1.0 % -2.0 = -1.0 <type 'float'>
               -1.0 < -2.0 = False <type 'bool'>
               -1.0 = -2.0 = False <type 'bool'>
               -1.0 > -2.0 = True <type 'bool'>
               -1.0 <= -2.0 = False <type 'bool'>
               -1.0 != -2.0 = True <type 'bool'>
               -1.0 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               -1.0 + -2 = -3.0 <type 'float'>
               -1.0 - -2 = 1.0 <type 'float'>
               -1.0 * -2 = 2.0 <type 'float'>
               -1.0 / -2 = 0.5 <type 'float'>
               -1.0 ** -2 = 1.0 <type 'float'>
               -1.0 % -2 = -1.0 <type 'float'>
               -1.0 < -2 = False <type 'bool'>
               -1.0 = -2 = False <type 'bool'>
               -1.0 > -2 = True <type 'bool'>
               -1.0 <= -2 = False <type 'bool'>
               -1.0 != -2 = True <type 'bool'>
               -1.0 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               -1.0 + 1000000000.0 = 999999999.0 <type 'float'>
               -1.0 - 1000000000.0 = -1000000001.0 <type 'float'>
               -1.0 * 1000000000.0 = -1000000000.0 <type 'float'>
               -1.0 / 1000000000.0 = -1e-09 <type 'float'>
skipping pow of really big number
               -1.0 % 1000000000.0 = 999999999.0 <type 'float'>
               -1.0 < 1000000000.0 = True <type 'bool'>
               -1.0 = 1000000000.0 = False <type 'bool'>
               -1.0 > 1000000000.0 = False <type 'bool'>
               -1.0 <= 1000000000.0 = True <type 'bool'>
               -1.0 != 1000000000.0 = True <type 'bool'>
               -1.0 >= 1000000000.0 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               -1.0 + -1000000000.0 = -1000000001.0 <type 'float'>
               -1.0 - -1000000000.0 = 999999999.0 <type 'float'>
               -1.0 * -1000000000.0 = 1000000000.0 <type 'float'>
               -1.0 / -1000000000.0 = 1e-09 <type 'float'>
               -1.0 ** -1000000000.0 = 1.0 <type 'float'>
               -1.0 % -1000000000.0 = -1.0 <type 'float'>
               -1.0 < -1000000000.0 = False <type 'bool'>
               -1.0 = -1000000000.0 = False <type 'bool'>
               -1.0 > -1000000000.0 = True <type 'bool'>
               -1.0 <= -1000000000.0 = False <type 'bool'>
               -1.0 != -1000000000.0 = True <type 'bool'>
               -1.0 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               -1.0 + 1e-09 = -0.999999999 <type 'float'>
               -1.0 - 1e-09 = -1.000000001 <type 'float'>
               -1.0 * 1e-09 = -1e-09 <type 'float'>
               -1.0 / 1e-09 = -1000000000.0 <type 'float'>
               -1.0 ** 1e-09 = Can't  <type 'float'> ** <type 'float'>
               -1.0 % 1e-09 = 6.22815914578e-17 <type 'float'>
               -1.0 < 1e-09 = True <type 'bool'>
               -1.0 = 1e-09 = False <type 'bool'>
               -1.0 > 1e-09 = False <type 'bool'>
               -1.0 <= 1e-09 = True <type 'bool'>
               -1.0 != 1e-09 = True <type 'bool'>
               -1.0 >= 1e-09 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               -1.0 + -1e-09 = -1.000000001 <type 'float'>
               -1.0 - -1e-09 = -0.999999999 <type 'float'>
               -1.0 * -1e-09 = 1e-09 <type 'float'>
               -1.0 / -1e-09 = 1000000000.0 <type 'float'>
               -1.0 ** -1e-09 = Can't  <type 'float'> ** <type 'float'>
               -1.0 % -1e-09 = -9.99999937718e-10 <type 'float'>
               -1.0 < -1e-09 = True <type 'bool'>
               -1.0 = -1e-09 = False <type 'bool'>
               -1.0 > -1e-09 = False <type 'bool'>
               -1.0 <= -1e-09 = True <type 'bool'>
               -1.0 != -1e-09 = True <type 'bool'>
               -1.0 >= -1e-09 = False <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               -1.0 + 123456789 = 123456788.0 <type 'float'>
               -1.0 - 123456789 = -123456790.0 <type 'float'>
               -1.0 * 123456789 = -123456789.0 <type 'float'>
               -1.0 / 123456789 = -8.10000007371e-09 <type 'float'>
skipping pow of really big number
               -1.0 % 123456789 = 123456788.0 <type 'float'>
               -1.0 < 123456789 = True <type 'bool'>
               -1.0 = 123456789 = False <type 'bool'>
               -1.0 > 123456789 = False <type 'bool'>
               -1.0 <= 123456789 = True <type 'bool'>
               -1.0 != 123456789 = True <type 'bool'>
               -1.0 >= 123456789 = False <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               -1.0 + 12345678901234567890123456789 = 1.23456789012e+28 <type 'float'>
               -1.0 - 12345678901234567890123456789 = -1.23456789012e+28 <type 'float'>
               -1.0 * 12345678901234567890123456789 = -1.23456789012e+28 <type 'float'>
               -1.0 / 12345678901234567890123456789 = -8.1000000729e-29 <type 'float'>
skipping pow of really big number
               -1.0 % 12345678901234567890123456789 = 1.23456789012e+28 <type 'float'>
               -1.0 < 12345678901234567890123456789 = True <type 'bool'>
               -1.0 = 12345678901234567890123456789 = False <type 'bool'>
               -1.0 > 12345678901234567890123456789 = False <type 'bool'>
               -1.0 <= 12345678901234567890123456789 = True <type 'bool'>
               -1.0 != 12345678901234567890123456789 = True <type 'bool'>
               -1.0 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'long'> -1
     Op 2 :::  <type 'int'> 1
               -1 + 1 = 0 <type 'long'>
               -1 - 1 = -2 <type 'long'>
               -1 * 1 = -1 <type 'long'>
               -1 / 1 = -1 <type 'long'>
               -1 ** 1 = -1 <type 'long'>
               -1 % 1 = 0 <type 'long'>
               -1 < 1 = True <type 'bool'>
               -1 = 1 = False <type 'bool'>
               -1 > 1 = False <type 'bool'>
               -1 <= 1 = True <type 'bool'>
               -1 != 1 = True <type 'bool'>
               -1 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               -1 + 1.0 = 0.0 <type 'float'>
               -1 - 1.0 = -2.0 <type 'float'>
               -1 * 1.0 = -1.0 <type 'float'>
               -1 / 1.0 = -1.0 <type 'float'>
               -1 ** 1.0 = -1.0 <type 'float'>
               -1 % 1.0 = 0.0 <type 'float'>
               -1 < 1.0 = True <type 'bool'>
               -1 = 1.0 = False <type 'bool'>
               -1 > 1.0 = False <type 'bool'>
               -1 <= 1.0 = True <type 'bool'>
               -1 != 1.0 = True <type 'bool'>
               -1 >= 1.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 1
               -1 + 1 = 0 <type 'long'>
               -1 - 1 = -2 <type 'long'>
               -1 * 1 = -1 <type 'long'>
               -1 / 1 = -1 <type 'long'>
               -1 ** 1 = -1 <type 'long'>
               -1 % 1 = 0 <type 'long'>
               -1 < 1 = True <type 'bool'>
               -1 = 1 = False <type 'bool'>
               -1 > 1 = False <type 'bool'>
               -1 <= 1 = True <type 'bool'>
               -1 != 1 = True <type 'bool'>
               -1 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'int'> -1
               -1 + -1 = -2 <type 'long'>
               -1 - -1 = 0 <type 'long'>
               -1 * -1 = 1 <type 'long'>
               -1 / -1 = 1 <type 'long'>
               -1 ** -1 = -1.0 <type 'float'>
               -1 % -1 = 0 <type 'long'>
               -1 < -1 = False <type 'bool'>
               -1 = -1 = True <type 'bool'>
               -1 > -1 = False <type 'bool'>
               -1 <= -1 = True <type 'bool'>
               -1 != -1 = False <type 'bool'>
               -1 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               -1 + -1.0 = -2.0 <type 'float'>
               -1 - -1.0 = 0.0 <type 'float'>
               -1 * -1.0 = 1.0 <type 'float'>
               -1 / -1.0 = 1.0 <type 'float'>
               -1 ** -1.0 = -1.0 <type 'float'>
               -1 % -1.0 = 0.0 <type 'float'>
               -1 < -1.0 = False <type 'bool'>
               -1 = -1.0 = True <type 'bool'>
               -1 > -1.0 = False <type 'bool'>
               -1 <= -1.0 = True <type 'bool'>
               -1 != -1.0 = False <type 'bool'>
               -1 >= -1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -1
               -1 + -1 = -2 <type 'long'>
               -1 - -1 = 0 <type 'long'>
               -1 * -1 = 1 <type 'long'>
               -1 / -1 = 1 <type 'long'>
               -1 ** -1 = -1.0 <type 'float'>
               -1 % -1 = 0 <type 'long'>
               -1 < -1 = False <type 'bool'>
               -1 = -1 = True <type 'bool'>
               -1 > -1 = False <type 'bool'>
               -1 <= -1 = True <type 'bool'>
               -1 != -1 = False <type 'bool'>
               -1 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'int'> 2
               -1 + 2 = 1 <type 'long'>
               -1 - 2 = -3 <type 'long'>
               -1 * 2 = -2 <type 'long'>
               -1 / 2 = -1 <type 'long'>
               -1 ** 2 = 1 <type 'long'>
               -1 % 2 = 1 <type 'long'>
               -1 < 2 = True <type 'bool'>
               -1 = 2 = False <type 'bool'>
               -1 > 2 = False <type 'bool'>
               -1 <= 2 = True <type 'bool'>
               -1 != 2 = True <type 'bool'>
               -1 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               -1 + 2.0 = 1.0 <type 'float'>
               -1 - 2.0 = -3.0 <type 'float'>
               -1 * 2.0 = -2.0 <type 'float'>
               -1 / 2.0 = -0.5 <type 'float'>
               -1 ** 2.0 = 1.0 <type 'float'>
               -1 % 2.0 = 1.0 <type 'float'>
               -1 < 2.0 = True <type 'bool'>
               -1 = 2.0 = False <type 'bool'>
               -1 > 2.0 = False <type 'bool'>
               -1 <= 2.0 = True <type 'bool'>
               -1 != 2.0 = True <type 'bool'>
               -1 >= 2.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 2
               -1 + 2 = 1 <type 'long'>
               -1 - 2 = -3 <type 'long'>
               -1 * 2 = -2 <type 'long'>
               -1 / 2 = -1 <type 'long'>
               -1 ** 2 = 1 <type 'long'>
               -1 % 2 = 1 <type 'long'>
               -1 < 2 = True <type 'bool'>
               -1 = 2 = False <type 'bool'>
               -1 > 2 = False <type 'bool'>
               -1 <= 2 = True <type 'bool'>
               -1 != 2 = True <type 'bool'>
               -1 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'int'> -2
               -1 + -2 = -3 <type 'long'>
               -1 - -2 = 1 <type 'long'>
               -1 * -2 = 2 <type 'long'>
               -1 / -2 = 0 <type 'long'>
               -1 ** -2 = 1.0 <type 'float'>
               -1 % -2 = -1 <type 'long'>
               -1 < -2 = False <type 'bool'>
               -1 = -2 = False <type 'bool'>
               -1 > -2 = True <type 'bool'>
               -1 <= -2 = False <type 'bool'>
               -1 != -2 = True <type 'bool'>
               -1 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               -1 + -2.0 = -3.0 <type 'float'>
               -1 - -2.0 = 1.0 <type 'float'>
               -1 * -2.0 = 2.0 <type 'float'>
               -1 / -2.0 = 0.5 <type 'float'>
               -1 ** -2.0 = 1.0 <type 'float'>
               -1 % -2.0 = -1.0 <type 'float'>
               -1 < -2.0 = False <type 'bool'>
               -1 = -2.0 = False <type 'bool'>
               -1 > -2.0 = True <type 'bool'>
               -1 <= -2.0 = False <type 'bool'>
               -1 != -2.0 = True <type 'bool'>
               -1 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               -1 + -2 = -3 <type 'long'>
               -1 - -2 = 1 <type 'long'>
               -1 * -2 = 2 <type 'long'>
               -1 / -2 = 0 <type 'long'>
               -1 ** -2 = 1.0 <type 'float'>
               -1 % -2 = -1 <type 'long'>
               -1 < -2 = False <type 'bool'>
               -1 = -2 = False <type 'bool'>
               -1 > -2 = True <type 'bool'>
               -1 <= -2 = False <type 'bool'>
               -1 != -2 = True <type 'bool'>
               -1 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               -1 + 1000000000.0 = 999999999.0 <type 'float'>
               -1 - 1000000000.0 = -1000000001.0 <type 'float'>
               -1 * 1000000000.0 = -1000000000.0 <type 'float'>
               -1 / 1000000000.0 = -1e-09 <type 'float'>
skipping pow of really big number
               -1 % 1000000000.0 = 999999999.0 <type 'float'>
               -1 < 1000000000.0 = True <type 'bool'>
               -1 = 1000000000.0 = False <type 'bool'>
               -1 > 1000000000.0 = False <type 'bool'>
               -1 <= 1000000000.0 = True <type 'bool'>
               -1 != 1000000000.0 = True <type 'bool'>
               -1 >= 1000000000.0 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               -1 + -1000000000.0 = -1000000001.0 <type 'float'>
               -1 - -1000000000.0 = 999999999.0 <type 'float'>
               -1 * -1000000000.0 = 1000000000.0 <type 'float'>
               -1 / -1000000000.0 = 1e-09 <type 'float'>
               -1 ** -1000000000.0 = 1.0 <type 'float'>
               -1 % -1000000000.0 = -1.0 <type 'float'>
               -1 < -1000000000.0 = False <type 'bool'>
               -1 = -1000000000.0 = False <type 'bool'>
               -1 > -1000000000.0 = True <type 'bool'>
               -1 <= -1000000000.0 = False <type 'bool'>
               -1 != -1000000000.0 = True <type 'bool'>
               -1 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               -1 + 1e-09 = -0.999999999 <type 'float'>
               -1 - 1e-09 = -1.000000001 <type 'float'>
               -1 * 1e-09 = -1e-09 <type 'float'>
               -1 / 1e-09 = -1000000000.0 <type 'float'>
               -1 ** 1e-09 = Can't  <type 'long'> ** <type 'float'>
               -1 % 1e-09 = 6.22815914578e-17 <type 'float'>
               -1 < 1e-09 = True <type 'bool'>
               -1 = 1e-09 = False <type 'bool'>
               -1 > 1e-09 = False <type 'bool'>
               -1 <= 1e-09 = True <type 'bool'>
               -1 != 1e-09 = True <type 'bool'>
               -1 >= 1e-09 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               -1 + -1e-09 = -1.000000001 <type 'float'>
               -1 - -1e-09 = -0.999999999 <type 'float'>
               -1 * -1e-09 = 1e-09 <type 'float'>
               -1 / -1e-09 = 1000000000.0 <type 'float'>
               -1 ** -1e-09 = Can't  <type 'long'> ** <type 'float'>
               -1 % -1e-09 = -9.99999937718e-10 <type 'float'>
               -1 < -1e-09 = True <type 'bool'>
               -1 = -1e-09 = False <type 'bool'>
               -1 > -1e-09 = False <type 'bool'>
               -1 <= -1e-09 = True <type 'bool'>
               -1 != -1e-09 = True <type 'bool'>
               -1 >= -1e-09 = False <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               -1 + 123456789 = 123456788 <type 'long'>
               -1 - 123456789 = -123456790 <type 'long'>
               -1 * 123456789 = -123456789 <type 'long'>
               -1 / 123456789 = -1 <type 'long'>
skipping pow of really big number
               -1 % 123456789 = 123456788 <type 'long'>
               -1 < 123456789 = True <type 'bool'>
               -1 = 123456789 = False <type 'bool'>
               -1 > 123456789 = False <type 'bool'>
               -1 <= 123456789 = True <type 'bool'>
               -1 != 123456789 = True <type 'bool'>
               -1 >= 123456789 = False <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               -1 + 12345678901234567890123456789 = 12345678901234567890123456788 <type 'long'>
               -1 - 12345678901234567890123456789 = -12345678901234567890123456790 <type 'long'>
               -1 * 12345678901234567890123456789 = -12345678901234567890123456789 <type 'long'>
               -1 / 12345678901234567890123456789 = -1 <type 'long'>
skipping pow of really big number
               -1 % 12345678901234567890123456789 = 12345678901234567890123456788 <type 'long'>
               -1 < 12345678901234567890123456789 = True <type 'bool'>
               -1 = 12345678901234567890123456789 = False <type 'bool'>
               -1 > 12345678901234567890123456789 = False <type 'bool'>
               -1 <= 12345678901234567890123456789 = True <type 'bool'>
               -1 != 12345678901234567890123456789 = True <type 'bool'>
               -1 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'int'> 2
     Op 2 :::  <type 'int'> 1
               2 + 1 = 3 <type 'int'>
               2 - 1 = 1 <type 'int'>
               2 * 1 = 2 <type 'int'>
               2 / 1 = 2 <type 'int'>
               2 ** 1 = 2 <type 'int'>
               2 % 1 = 0 <type 'int'>
               2 < 1 = False <type 'bool'>
               2 = 1 = False <type 'bool'>
               2 > 1 = True <type 'bool'>
               2 <= 1 = False <type 'bool'>
               2 != 1 = True <type 'bool'>
               2 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               2 + 1.0 = 3.0 <type 'float'>
               2 - 1.0 = 1.0 <type 'float'>
               2 * 1.0 = 2.0 <type 'float'>
               2 / 1.0 = 2.0 <type 'float'>
               2 ** 1.0 = 2.0 <type 'float'>
               2 % 1.0 = 0.0 <type 'float'>
               2 < 1.0 = False <type 'bool'>
               2 = 1.0 = False <type 'bool'>
               2 > 1.0 = True <type 'bool'>
               2 <= 1.0 = False <type 'bool'>
               2 != 1.0 = True <type 'bool'>
               2 >= 1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> 1
               2 + 1 = 3 <type 'long'>
               2 - 1 = 1 <type 'long'>
               2 * 1 = 2 <type 'long'>
               2 / 1 = 2 <type 'long'>
               2 ** 1 = 2 <type 'long'>
               2 % 1 = 0 <type 'long'>
               2 < 1 = False <type 'bool'>
               2 = 1 = False <type 'bool'>
               2 > 1 = True <type 'bool'>
               2 <= 1 = False <type 'bool'>
               2 != 1 = True <type 'bool'>
               2 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'int'> -1
               2 + -1 = 1 <type 'int'>
               2 - -1 = 3 <type 'int'>
               2 * -1 = -2 <type 'int'>
               2 / -1 = -2 <type 'int'>
               2 ** -1 = 0.5 <type 'float'>
               2 % -1 = 0 <type 'int'>
               2 < -1 = False <type 'bool'>
               2 = -1 = False <type 'bool'>
               2 > -1 = True <type 'bool'>
               2 <= -1 = False <type 'bool'>
               2 != -1 = True <type 'bool'>
               2 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               2 + -1.0 = 1.0 <type 'float'>
               2 - -1.0 = 3.0 <type 'float'>
               2 * -1.0 = -2.0 <type 'float'>
               2 / -1.0 = -2.0 <type 'float'>
               2 ** -1.0 = 0.5 <type 'float'>
               2 % -1.0 = 0.0 <type 'float'>
               2 < -1.0 = False <type 'bool'>
               2 = -1.0 = False <type 'bool'>
               2 > -1.0 = True <type 'bool'>
               2 <= -1.0 = False <type 'bool'>
               2 != -1.0 = True <type 'bool'>
               2 >= -1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -1
               2 + -1 = 1 <type 'long'>
               2 - -1 = 3 <type 'long'>
               2 * -1 = -2 <type 'long'>
               2 / -1 = -2 <type 'long'>
               2 ** -1 = 0.5 <type 'float'>
               2 % -1 = 0 <type 'long'>
               2 < -1 = False <type 'bool'>
               2 = -1 = False <type 'bool'>
               2 > -1 = True <type 'bool'>
               2 <= -1 = False <type 'bool'>
               2 != -1 = True <type 'bool'>
               2 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'int'> 2
               2 + 2 = 4 <type 'int'>
               2 - 2 = 0 <type 'int'>
               2 * 2 = 4 <type 'int'>
               2 / 2 = 1 <type 'int'>
               2 ** 2 = 4 <type 'int'>
               2 % 2 = 0 <type 'int'>
               2 < 2 = False <type 'bool'>
               2 = 2 = True <type 'bool'>
               2 > 2 = False <type 'bool'>
               2 <= 2 = True <type 'bool'>
               2 != 2 = False <type 'bool'>
               2 >= 2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               2 + 2.0 = 4.0 <type 'float'>
               2 - 2.0 = 0.0 <type 'float'>
               2 * 2.0 = 4.0 <type 'float'>
               2 / 2.0 = 1.0 <type 'float'>
               2 ** 2.0 = 4.0 <type 'float'>
               2 % 2.0 = 0.0 <type 'float'>
               2 < 2.0 = False <type 'bool'>
               2 = 2.0 = True <type 'bool'>
               2 > 2.0 = False <type 'bool'>
               2 <= 2.0 = True <type 'bool'>
               2 != 2.0 = False <type 'bool'>
               2 >= 2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> 2
               2 + 2 = 4 <type 'long'>
               2 - 2 = 0 <type 'long'>
               2 * 2 = 4 <type 'long'>
               2 / 2 = 1 <type 'long'>
               2 ** 2 = 4 <type 'long'>
               2 % 2 = 0 <type 'long'>
               2 < 2 = False <type 'bool'>
               2 = 2 = True <type 'bool'>
               2 > 2 = False <type 'bool'>
               2 <= 2 = True <type 'bool'>
               2 != 2 = False <type 'bool'>
               2 >= 2 = True <type 'bool'>
     Op 2 :::  <type 'int'> -2
               2 + -2 = 0 <type 'int'>
               2 - -2 = 4 <type 'int'>
               2 * -2 = -4 <type 'int'>
               2 / -2 = -1 <type 'int'>
               2 ** -2 = 0.25 <type 'float'>
               2 % -2 = 0 <type 'int'>
               2 < -2 = False <type 'bool'>
               2 = -2 = False <type 'bool'>
               2 > -2 = True <type 'bool'>
               2 <= -2 = False <type 'bool'>
               2 != -2 = True <type 'bool'>
               2 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               2 + -2.0 = 0.0 <type 'float'>
               2 - -2.0 = 4.0 <type 'float'>
               2 * -2.0 = -4.0 <type 'float'>
               2 / -2.0 = -1.0 <type 'float'>
               2 ** -2.0 = 0.25 <type 'float'>
               2 % -2.0 = 0.0 <type 'float'>
               2 < -2.0 = False <type 'bool'>
               2 = -2.0 = False <type 'bool'>
               2 > -2.0 = True <type 'bool'>
               2 <= -2.0 = False <type 'bool'>
               2 != -2.0 = True <type 'bool'>
               2 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               2 + -2 = 0 <type 'long'>
               2 - -2 = 4 <type 'long'>
               2 * -2 = -4 <type 'long'>
               2 / -2 = -1 <type 'long'>
               2 ** -2 = 0.25 <type 'float'>
               2 % -2 = 0 <type 'long'>
               2 < -2 = False <type 'bool'>
               2 = -2 = False <type 'bool'>
               2 > -2 = True <type 'bool'>
               2 <= -2 = False <type 'bool'>
               2 != -2 = True <type 'bool'>
               2 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               2 + 1000000000.0 = 1000000002.0 <type 'float'>
               2 - 1000000000.0 = -999999998.0 <type 'float'>
               2 * 1000000000.0 = 2000000000.0 <type 'float'>
               2 / 1000000000.0 = 2e-09 <type 'float'>
skipping pow of really big number
               2 % 1000000000.0 = 2.0 <type 'float'>
               2 < 1000000000.0 = True <type 'bool'>
               2 = 1000000000.0 = False <type 'bool'>
               2 > 1000000000.0 = False <type 'bool'>
               2 <= 1000000000.0 = True <type 'bool'>
               2 != 1000000000.0 = True <type 'bool'>
               2 >= 1000000000.0 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               2 + -1000000000.0 = -999999998.0 <type 'float'>
               2 - -1000000000.0 = 1000000002.0 <type 'float'>
               2 * -1000000000.0 = -2000000000.0 <type 'float'>
               2 / -1000000000.0 = -2e-09 <type 'float'>
               2 ** -1000000000.0 = 0.0 <type 'float'>
               2 % -1000000000.0 = -999999998.0 <type 'float'>
               2 < -1000000000.0 = False <type 'bool'>
               2 = -1000000000.0 = False <type 'bool'>
               2 > -1000000000.0 = True <type 'bool'>
               2 <= -1000000000.0 = False <type 'bool'>
               2 != -1000000000.0 = True <type 'bool'>
               2 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               2 + 1e-09 = 2.000000001 <type 'float'>
               2 - 1e-09 = 1.999999999 <type 'float'>
               2 * 1e-09 = 2e-09 <type 'float'>
               2 / 1e-09 = 2000000000.0 <type 'float'>
               2 ** 1e-09 = 1.00000000069 <type 'float'>
               2 % 1e-09 = 9.99999875437e-10 <type 'float'>
               2 < 1e-09 = False <type 'bool'>
               2 = 1e-09 = False <type 'bool'>
               2 > 1e-09 = True <type 'bool'>
               2 <= 1e-09 = False <type 'bool'>
               2 != 1e-09 = True <type 'bool'>
               2 >= 1e-09 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               2 + -1e-09 = 1.999999999 <type 'float'>
               2 - -1e-09 = 2.000000001 <type 'float'>
               2 * -1e-09 = -2e-09 <type 'float'>
               2 / -1e-09 = -2000000000.0 <type 'float'>
               2 ** -1e-09 = 0.999999999307 <type 'float'>
               2 % -1e-09 = -1.24563182916e-16 <type 'float'>
               2 < -1e-09 = False <type 'bool'>
               2 = -1e-09 = False <type 'bool'>
               2 > -1e-09 = True <type 'bool'>
               2 <= -1e-09 = False <type 'bool'>
               2 != -1e-09 = True <type 'bool'>
               2 >= -1e-09 = True <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               2 + 123456789 = 123456791 <type 'long'>
               2 - 123456789 = -123456787 <type 'long'>
               2 * 123456789 = 246913578 <type 'long'>
               2 / 123456789 = 0 <type 'long'>
skipping pow of really big number
               2 % 123456789 = 2 <type 'long'>
               2 < 123456789 = True <type 'bool'>
               2 = 123456789 = False <type 'bool'>
               2 > 123456789 = False <type 'bool'>
               2 <= 123456789 = True <type 'bool'>
               2 != 123456789 = True <type 'bool'>
               2 >= 123456789 = False <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               2 + 12345678901234567890123456789 = 12345678901234567890123456791 <type 'long'>
               2 - 12345678901234567890123456789 = -12345678901234567890123456787 <type 'long'>
               2 * 12345678901234567890123456789 = 24691357802469135780246913578 <type 'long'>
               2 / 12345678901234567890123456789 = 0 <type 'long'>
skipping pow of really big number
               2 % 12345678901234567890123456789 = 2 <type 'long'>
               2 < 12345678901234567890123456789 = True <type 'bool'>
               2 = 12345678901234567890123456789 = False <type 'bool'>
               2 > 12345678901234567890123456789 = False <type 'bool'>
               2 <= 12345678901234567890123456789 = True <type 'bool'>
               2 != 12345678901234567890123456789 = True <type 'bool'>
               2 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'float'> 2.0
     Op 2 :::  <type 'int'> 1
               2.0 + 1 = 3.0 <type 'float'>
               2.0 - 1 = 1.0 <type 'float'>
               2.0 * 1 = 2.0 <type 'float'>
               2.0 / 1 = 2.0 <type 'float'>
               2.0 ** 1 = 2.0 <type 'float'>
               2.0 % 1 = 0.0 <type 'float'>
               2.0 < 1 = False <type 'bool'>
               2.0 = 1 = False <type 'bool'>
               2.0 > 1 = True <type 'bool'>
               2.0 <= 1 = False <type 'bool'>
               2.0 != 1 = True <type 'bool'>
               2.0 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               2.0 + 1.0 = 3.0 <type 'float'>
               2.0 - 1.0 = 1.0 <type 'float'>
               2.0 * 1.0 = 2.0 <type 'float'>
               2.0 / 1.0 = 2.0 <type 'float'>
               2.0 ** 1.0 = 2.0 <type 'float'>
               2.0 % 1.0 = 0.0 <type 'float'>
               2.0 < 1.0 = False <type 'bool'>
               2.0 = 1.0 = False <type 'bool'>
               2.0 > 1.0 = True <type 'bool'>
               2.0 <= 1.0 = False <type 'bool'>
               2.0 != 1.0 = True <type 'bool'>
               2.0 >= 1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> 1
               2.0 + 1 = 3.0 <type 'float'>
               2.0 - 1 = 1.0 <type 'float'>
               2.0 * 1 = 2.0 <type 'float'>
               2.0 / 1 = 2.0 <type 'float'>
               2.0 ** 1 = 2.0 <type 'float'>
               2.0 % 1 = 0.0 <type 'float'>
               2.0 < 1 = False <type 'bool'>
               2.0 = 1 = False <type 'bool'>
               2.0 > 1 = True <type 'bool'>
               2.0 <= 1 = False <type 'bool'>
               2.0 != 1 = True <type 'bool'>
               2.0 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'int'> -1
               2.0 + -1 = 1.0 <type 'float'>
               2.0 - -1 = 3.0 <type 'float'>
               2.0 * -1 = -2.0 <type 'float'>
               2.0 / -1 = -2.0 <type 'float'>
               2.0 ** -1 = 0.5 <type 'float'>
               2.0 % -1 = 0.0 <type 'float'>
               2.0 < -1 = False <type 'bool'>
               2.0 = -1 = False <type 'bool'>
               2.0 > -1 = True <type 'bool'>
               2.0 <= -1 = False <type 'bool'>
               2.0 != -1 = True <type 'bool'>
               2.0 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               2.0 + -1.0 = 1.0 <type 'float'>
               2.0 - -1.0 = 3.0 <type 'float'>
               2.0 * -1.0 = -2.0 <type 'float'>
               2.0 / -1.0 = -2.0 <type 'float'>
               2.0 ** -1.0 = 0.5 <type 'float'>
               2.0 % -1.0 = 0.0 <type 'float'>
               2.0 < -1.0 = False <type 'bool'>
               2.0 = -1.0 = False <type 'bool'>
               2.0 > -1.0 = True <type 'bool'>
               2.0 <= -1.0 = False <type 'bool'>
               2.0 != -1.0 = True <type 'bool'>
               2.0 >= -1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -1
               2.0 + -1 = 1.0 <type 'float'>
               2.0 - -1 = 3.0 <type 'float'>
               2.0 * -1 = -2.0 <type 'float'>
               2.0 / -1 = -2.0 <type 'float'>
               2.0 ** -1 = 0.5 <type 'float'>
               2.0 % -1 = 0.0 <type 'float'>
               2.0 < -1 = False <type 'bool'>
               2.0 = -1 = False <type 'bool'>
               2.0 > -1 = True <type 'bool'>
               2.0 <= -1 = False <type 'bool'>
               2.0 != -1 = True <type 'bool'>
               2.0 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'int'> 2
               2.0 + 2 = 4.0 <type 'float'>
               2.0 - 2 = 0.0 <type 'float'>
               2.0 * 2 = 4.0 <type 'float'>
               2.0 / 2 = 1.0 <type 'float'>
               2.0 ** 2 = 4.0 <type 'float'>
               2.0 % 2 = 0.0 <type 'float'>
               2.0 < 2 = False <type 'bool'>
               2.0 = 2 = True <type 'bool'>
               2.0 > 2 = False <type 'bool'>
               2.0 <= 2 = True <type 'bool'>
               2.0 != 2 = False <type 'bool'>
               2.0 >= 2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               2.0 + 2.0 = 4.0 <type 'float'>
               2.0 - 2.0 = 0.0 <type 'float'>
               2.0 * 2.0 = 4.0 <type 'float'>
               2.0 / 2.0 = 1.0 <type 'float'>
               2.0 ** 2.0 = 4.0 <type 'float'>
               2.0 % 2.0 = 0.0 <type 'float'>
               2.0 < 2.0 = False <type 'bool'>
               2.0 = 2.0 = True <type 'bool'>
               2.0 > 2.0 = False <type 'bool'>
               2.0 <= 2.0 = True <type 'bool'>
               2.0 != 2.0 = False <type 'bool'>
               2.0 >= 2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> 2
               2.0 + 2 = 4.0 <type 'float'>
               2.0 - 2 = 0.0 <type 'float'>
               2.0 * 2 = 4.0 <type 'float'>
               2.0 / 2 = 1.0 <type 'float'>
               2.0 ** 2 = 4.0 <type 'float'>
               2.0 % 2 = 0.0 <type 'float'>
               2.0 < 2 = False <type 'bool'>
               2.0 = 2 = True <type 'bool'>
               2.0 > 2 = False <type 'bool'>
               2.0 <= 2 = True <type 'bool'>
               2.0 != 2 = False <type 'bool'>
               2.0 >= 2 = True <type 'bool'>
     Op 2 :::  <type 'int'> -2
               2.0 + -2 = 0.0 <type 'float'>
               2.0 - -2 = 4.0 <type 'float'>
               2.0 * -2 = -4.0 <type 'float'>
               2.0 / -2 = -1.0 <type 'float'>
               2.0 ** -2 = 0.25 <type 'float'>
               2.0 % -2 = 0.0 <type 'float'>
               2.0 < -2 = False <type 'bool'>
               2.0 = -2 = False <type 'bool'>
               2.0 > -2 = True <type 'bool'>
               2.0 <= -2 = False <type 'bool'>
               2.0 != -2 = True <type 'bool'>
               2.0 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               2.0 + -2.0 = 0.0 <type 'float'>
               2.0 - -2.0 = 4.0 <type 'float'>
               2.0 * -2.0 = -4.0 <type 'float'>
               2.0 / -2.0 = -1.0 <type 'float'>
               2.0 ** -2.0 = 0.25 <type 'float'>
               2.0 % -2.0 = 0.0 <type 'float'>
               2.0 < -2.0 = False <type 'bool'>
               2.0 = -2.0 = False <type 'bool'>
               2.0 > -2.0 = True <type 'bool'>
               2.0 <= -2.0 = False <type 'bool'>
               2.0 != -2.0 = True <type 'bool'>
               2.0 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               2.0 + -2 = 0.0 <type 'float'>
               2.0 - -2 = 4.0 <type 'float'>
               2.0 * -2 = -4.0 <type 'float'>
               2.0 / -2 = -1.0 <type 'float'>
               2.0 ** -2 = 0.25 <type 'float'>
               2.0 % -2 = 0.0 <type 'float'>
               2.0 < -2 = False <type 'bool'>
               2.0 = -2 = False <type 'bool'>
               2.0 > -2 = True <type 'bool'>
               2.0 <= -2 = False <type 'bool'>
               2.0 != -2 = True <type 'bool'>
               2.0 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               2.0 + 1000000000.0 = 1000000002.0 <type 'float'>
               2.0 - 1000000000.0 = -999999998.0 <type 'float'>
               2.0 * 1000000000.0 = 2000000000.0 <type 'float'>
               2.0 / 1000000000.0 = 2e-09 <type 'float'>
skipping pow of really big number
               2.0 % 1000000000.0 = 2.0 <type 'float'>
               2.0 < 1000000000.0 = True <type 'bool'>
               2.0 = 1000000000.0 = False <type 'bool'>
               2.0 > 1000000000.0 = False <type 'bool'>
               2.0 <= 1000000000.0 = True <type 'bool'>
               2.0 != 1000000000.0 = True <type 'bool'>
               2.0 >= 1000000000.0 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               2.0 + -1000000000.0 = -999999998.0 <type 'float'>
               2.0 - -1000000000.0 = 1000000002.0 <type 'float'>
               2.0 * -1000000000.0 = -2000000000.0 <type 'float'>
               2.0 / -1000000000.0 = -2e-09 <type 'float'>
               2.0 ** -1000000000.0 = 0.0 <type 'float'>
               2.0 % -1000000000.0 = -999999998.0 <type 'float'>
               2.0 < -1000000000.0 = False <type 'bool'>
               2.0 = -1000000000.0 = False <type 'bool'>
               2.0 > -1000000000.0 = True <type 'bool'>
               2.0 <= -1000000000.0 = False <type 'bool'>
               2.0 != -1000000000.0 = True <type 'bool'>
               2.0 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               2.0 + 1e-09 = 2.000000001 <type 'float'>
               2.0 - 1e-09 = 1.999999999 <type 'float'>
               2.0 * 1e-09 = 2e-09 <type 'float'>
               2.0 / 1e-09 = 2000000000.0 <type 'float'>
               2.0 ** 1e-09 = 1.00000000069 <type 'float'>
               2.0 % 1e-09 = 9.99999875437e-10 <type 'float'>
               2.0 < 1e-09 = False <type 'bool'>
               2.0 = 1e-09 = False <type 'bool'>
               2.0 > 1e-09 = True <type 'bool'>
               2.0 <= 1e-09 = False <type 'bool'>
               2.0 != 1e-09 = True <type 'bool'>
               2.0 >= 1e-09 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               2.0 + -1e-09 = 1.999999999 <type 'float'>
               2.0 - -1e-09 = 2.000000001 <type 'float'>
               2.0 * -1e-09 = -2e-09 <type 'float'>
               2.0 / -1e-09 = -2000000000.0 <type 'float'>
               2.0 ** -1e-09 = 0.999999999307 <type 'float'>
               2.0 % -1e-09 = -1.24563182916e-16 <type 'float'>
               2.0 < -1e-09 = False <type 'bool'>
               2.0 = -1e-09 = False <type 'bool'>
               2.0 > -1e-09 = True <type 'bool'>
               2.0 <= -1e-09 = False <type 'bool'>
               2.0 != -1e-09 = True <type 'bool'>
               2.0 >= -1e-09 = True <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               2.0 + 123456789 = 123456791.0 <type 'float'>
               2.0 - 123456789 = -123456787.0 <type 'float'>
               2.0 * 123456789 = 246913578.0 <type 'float'>
               2.0 / 123456789 = 1.62000001474e-08 <type 'float'>
skipping pow of really big number
               2.0 % 123456789 = 2.0 <type 'float'>
               2.0 < 123456789 = True <type 'bool'>
               2.0 = 123456789 = False <type 'bool'>
               2.0 > 123456789 = False <type 'bool'>
               2.0 <= 123456789 = True <type 'bool'>
               2.0 != 123456789 = True <type 'bool'>
               2.0 >= 123456789 = False <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               2.0 + 12345678901234567890123456789 = 1.23456789012e+28 <type 'float'>
               2.0 - 12345678901234567890123456789 = -1.23456789012e+28 <type 'float'>
               2.0 * 12345678901234567890123456789 = 2.46913578025e+28 <type 'float'>
               2.0 / 12345678901234567890123456789 = 1.62000001458e-28 <type 'float'>
skipping pow of really big number
               2.0 % 12345678901234567890123456789 = 2.0 <type 'float'>
               2.0 < 12345678901234567890123456789 = True <type 'bool'>
               2.0 = 12345678901234567890123456789 = False <type 'bool'>
               2.0 > 12345678901234567890123456789 = False <type 'bool'>
               2.0 <= 12345678901234567890123456789 = True <type 'bool'>
               2.0 != 12345678901234567890123456789 = True <type 'bool'>
               2.0 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'long'> 2
     Op 2 :::  <type 'int'> 1
               2 + 1 = 3 <type 'long'>
               2 - 1 = 1 <type 'long'>
               2 * 1 = 2 <type 'long'>
               2 / 1 = 2 <type 'long'>
               2 ** 1 = 2 <type 'long'>
               2 % 1 = 0 <type 'long'>
               2 < 1 = False <type 'bool'>
               2 = 1 = False <type 'bool'>
               2 > 1 = True <type 'bool'>
               2 <= 1 = False <type 'bool'>
               2 != 1 = True <type 'bool'>
               2 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               2 + 1.0 = 3.0 <type 'float'>
               2 - 1.0 = 1.0 <type 'float'>
               2 * 1.0 = 2.0 <type 'float'>
               2 / 1.0 = 2.0 <type 'float'>
               2 ** 1.0 = 2.0 <type 'float'>
               2 % 1.0 = 0.0 <type 'float'>
               2 < 1.0 = False <type 'bool'>
               2 = 1.0 = False <type 'bool'>
               2 > 1.0 = True <type 'bool'>
               2 <= 1.0 = False <type 'bool'>
               2 != 1.0 = True <type 'bool'>
               2 >= 1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> 1
               2 + 1 = 3 <type 'long'>
               2 - 1 = 1 <type 'long'>
               2 * 1 = 2 <type 'long'>
               2 / 1 = 2 <type 'long'>
               2 ** 1 = 2 <type 'long'>
               2 % 1 = 0 <type 'long'>
               2 < 1 = False <type 'bool'>
               2 = 1 = False <type 'bool'>
               2 > 1 = True <type 'bool'>
               2 <= 1 = False <type 'bool'>
               2 != 1 = True <type 'bool'>
               2 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'int'> -1
               2 + -1 = 1 <type 'long'>
               2 - -1 = 3 <type 'long'>
               2 * -1 = -2 <type 'long'>
               2 / -1 = -2 <type 'long'>
               2 ** -1 = 0.5 <type 'float'>
               2 % -1 = 0 <type 'long'>
               2 < -1 = False <type 'bool'>
               2 = -1 = False <type 'bool'>
               2 > -1 = True <type 'bool'>
               2 <= -1 = False <type 'bool'>
               2 != -1 = True <type 'bool'>
               2 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               2 + -1.0 = 1.0 <type 'float'>
               2 - -1.0 = 3.0 <type 'float'>
               2 * -1.0 = -2.0 <type 'float'>
               2 / -1.0 = -2.0 <type 'float'>
               2 ** -1.0 = 0.5 <type 'float'>
               2 % -1.0 = 0.0 <type 'float'>
               2 < -1.0 = False <type 'bool'>
               2 = -1.0 = False <type 'bool'>
               2 > -1.0 = True <type 'bool'>
               2 <= -1.0 = False <type 'bool'>
               2 != -1.0 = True <type 'bool'>
               2 >= -1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -1
               2 + -1 = 1 <type 'long'>
               2 - -1 = 3 <type 'long'>
               2 * -1 = -2 <type 'long'>
               2 / -1 = -2 <type 'long'>
               2 ** -1 = 0.5 <type 'float'>
               2 % -1 = 0 <type 'long'>
               2 < -1 = False <type 'bool'>
               2 = -1 = False <type 'bool'>
               2 > -1 = True <type 'bool'>
               2 <= -1 = False <type 'bool'>
               2 != -1 = True <type 'bool'>
               2 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'int'> 2
               2 + 2 = 4 <type 'long'>
               2 - 2 = 0 <type 'long'>
               2 * 2 = 4 <type 'long'>
               2 / 2 = 1 <type 'long'>
               2 ** 2 = 4 <type 'long'>
               2 % 2 = 0 <type 'long'>
               2 < 2 = False <type 'bool'>
               2 = 2 = True <type 'bool'>
               2 > 2 = False <type 'bool'>
               2 <= 2 = True <type 'bool'>
               2 != 2 = False <type 'bool'>
               2 >= 2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               2 + 2.0 = 4.0 <type 'float'>
               2 - 2.0 = 0.0 <type 'float'>
               2 * 2.0 = 4.0 <type 'float'>
               2 / 2.0 = 1.0 <type 'float'>
               2 ** 2.0 = 4.0 <type 'float'>
               2 % 2.0 = 0.0 <type 'float'>
               2 < 2.0 = False <type 'bool'>
               2 = 2.0 = True <type 'bool'>
               2 > 2.0 = False <type 'bool'>
               2 <= 2.0 = True <type 'bool'>
               2 != 2.0 = False <type 'bool'>
               2 >= 2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> 2
               2 + 2 = 4 <type 'long'>
               2 - 2 = 0 <type 'long'>
               2 * 2 = 4 <type 'long'>
               2 / 2 = 1 <type 'long'>
               2 ** 2 = 4 <type 'long'>
               2 % 2 = 0 <type 'long'>
               2 < 2 = False <type 'bool'>
               2 = 2 = True <type 'bool'>
               2 > 2 = False <type 'bool'>
               2 <= 2 = True <type 'bool'>
               2 != 2 = False <type 'bool'>
               2 >= 2 = True <type 'bool'>
     Op 2 :::  <type 'int'> -2
               2 + -2 = 0 <type 'long'>
               2 - -2 = 4 <type 'long'>
               2 * -2 = -4 <type 'long'>
               2 / -2 = -1 <type 'long'>
               2 ** -2 = 0.25 <type 'float'>
               2 % -2 = 0 <type 'long'>
               2 < -2 = False <type 'bool'>
               2 = -2 = False <type 'bool'>
               2 > -2 = True <type 'bool'>
               2 <= -2 = False <type 'bool'>
               2 != -2 = True <type 'bool'>
               2 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               2 + -2.0 = 0.0 <type 'float'>
               2 - -2.0 = 4.0 <type 'float'>
               2 * -2.0 = -4.0 <type 'float'>
               2 / -2.0 = -1.0 <type 'float'>
               2 ** -2.0 = 0.25 <type 'float'>
               2 % -2.0 = 0.0 <type 'float'>
               2 < -2.0 = False <type 'bool'>
               2 = -2.0 = False <type 'bool'>
               2 > -2.0 = True <type 'bool'>
               2 <= -2.0 = False <type 'bool'>
               2 != -2.0 = True <type 'bool'>
               2 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               2 + -2 = 0 <type 'long'>
               2 - -2 = 4 <type 'long'>
               2 * -2 = -4 <type 'long'>
               2 / -2 = -1 <type 'long'>
               2 ** -2 = 0.25 <type 'float'>
               2 % -2 = 0 <type 'long'>
               2 < -2 = False <type 'bool'>
               2 = -2 = False <type 'bool'>
               2 > -2 = True <type 'bool'>
               2 <= -2 = False <type 'bool'>
               2 != -2 = True <type 'bool'>
               2 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               2 + 1000000000.0 = 1000000002.0 <type 'float'>
               2 - 1000000000.0 = -999999998.0 <type 'float'>
               2 * 1000000000.0 = 2000000000.0 <type 'float'>
               2 / 1000000000.0 = 2e-09 <type 'float'>
skipping pow of really big number
               2 % 1000000000.0 = 2.0 <type 'float'>
               2 < 1000000000.0 = True <type 'bool'>
               2 = 1000000000.0 = False <type 'bool'>
               2 > 1000000000.0 = False <type 'bool'>
               2 <= 1000000000.0 = True <type 'bool'>
               2 != 1000000000.0 = True <type 'bool'>
               2 >= 1000000000.0 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               2 + -1000000000.0 = -999999998.0 <type 'float'>
               2 - -1000000000.0 = 1000000002.0 <type 'float'>
               2 * -1000000000.0 = -2000000000.0 <type 'float'>
               2 / -1000000000.0 = -2e-09 <type 'float'>
               2 ** -1000000000.0 = 0.0 <type 'float'>
               2 % -1000000000.0 = -999999998.0 <type 'float'>
               2 < -1000000000.0 = False <type 'bool'>
               2 = -1000000000.0 = False <type 'bool'>
               2 > -1000000000.0 = True <type 'bool'>
               2 <= -1000000000.0 = False <type 'bool'>
               2 != -1000000000.0 = True <type 'bool'>
               2 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               2 + 1e-09 = 2.000000001 <type 'float'>
               2 - 1e-09 = 1.999999999 <type 'float'>
               2 * 1e-09 = 2e-09 <type 'float'>
               2 / 1e-09 = 2000000000.0 <type 'float'>
               2 ** 1e-09 = 1.00000000069 <type 'float'>
               2 % 1e-09 = 9.99999875437e-10 <type 'float'>
               2 < 1e-09 = False <type 'bool'>
               2 = 1e-09 = False <type 'bool'>
               2 > 1e-09 = True <type 'bool'>
               2 <= 1e-09 = False <type 'bool'>
               2 != 1e-09 = True <type 'bool'>
               2 >= 1e-09 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               2 + -1e-09 = 1.999999999 <type 'float'>
               2 - -1e-09 = 2.000000001 <type 'float'>
               2 * -1e-09 = -2e-09 <type 'float'>
               2 / -1e-09 = -2000000000.0 <type 'float'>
               2 ** -1e-09 = 0.999999999307 <type 'float'>
               2 % -1e-09 = -1.24563182916e-16 <type 'float'>
               2 < -1e-09 = False <type 'bool'>
               2 = -1e-09 = False <type 'bool'>
               2 > -1e-09 = True <type 'bool'>
               2 <= -1e-09 = False <type 'bool'>
               2 != -1e-09 = True <type 'bool'>
               2 >= -1e-09 = True <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               2 + 123456789 = 123456791 <type 'long'>
               2 - 123456789 = -123456787 <type 'long'>
               2 * 123456789 = 246913578 <type 'long'>
               2 / 123456789 = 0 <type 'long'>
skipping pow of really big number
               2 % 123456789 = 2 <type 'long'>
               2 < 123456789 = True <type 'bool'>
               2 = 123456789 = False <type 'bool'>
               2 > 123456789 = False <type 'bool'>
               2 <= 123456789 = True <type 'bool'>
               2 != 123456789 = True <type 'bool'>
               2 >= 123456789 = False <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               2 + 12345678901234567890123456789 = 12345678901234567890123456791 <type 'long'>
               2 - 12345678901234567890123456789 = -12345678901234567890123456787 <type 'long'>
               2 * 12345678901234567890123456789 = 24691357802469135780246913578 <type 'long'>
               2 / 12345678901234567890123456789 = 0 <type 'long'>
skipping pow of really big number
               2 % 12345678901234567890123456789 = 2 <type 'long'>
               2 < 12345678901234567890123456789 = True <type 'bool'>
               2 = 12345678901234567890123456789 = False <type 'bool'>
               2 > 12345678901234567890123456789 = False <type 'bool'>
               2 <= 12345678901234567890123456789 = True <type 'bool'>
               2 != 12345678901234567890123456789 = True <type 'bool'>
               2 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'int'> -2
     Op 2 :::  <type 'int'> 1
               -2 + 1 = -1 <type 'int'>
               -2 - 1 = -3 <type 'int'>
               -2 * 1 = -2 <type 'int'>
               -2 / 1 = -2 <type 'int'>
               -2 ** 1 = -2 <type 'int'>
               -2 % 1 = 0 <type 'int'>
               -2 < 1 = True <type 'bool'>
               -2 = 1 = False <type 'bool'>
               -2 > 1 = False <type 'bool'>
               -2 <= 1 = True <type 'bool'>
               -2 != 1 = True <type 'bool'>
               -2 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               -2 + 1.0 = -1.0 <type 'float'>
               -2 - 1.0 = -3.0 <type 'float'>
               -2 * 1.0 = -2.0 <type 'float'>
               -2 / 1.0 = -2.0 <type 'float'>
               -2 ** 1.0 = -2.0 <type 'float'>
               -2 % 1.0 = 0.0 <type 'float'>
               -2 < 1.0 = True <type 'bool'>
               -2 = 1.0 = False <type 'bool'>
               -2 > 1.0 = False <type 'bool'>
               -2 <= 1.0 = True <type 'bool'>
               -2 != 1.0 = True <type 'bool'>
               -2 >= 1.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 1
               -2 + 1 = -1 <type 'long'>
               -2 - 1 = -3 <type 'long'>
               -2 * 1 = -2 <type 'long'>
               -2 / 1 = -2 <type 'long'>
               -2 ** 1 = -2 <type 'long'>
               -2 % 1 = 0 <type 'long'>
               -2 < 1 = True <type 'bool'>
               -2 = 1 = False <type 'bool'>
               -2 > 1 = False <type 'bool'>
               -2 <= 1 = True <type 'bool'>
               -2 != 1 = True <type 'bool'>
               -2 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'int'> -1
               -2 + -1 = -3 <type 'int'>
               -2 - -1 = -1 <type 'int'>
               -2 * -1 = 2 <type 'int'>
               -2 / -1 = 2 <type 'int'>
               -2 ** -1 = -0.5 <type 'float'>
               -2 % -1 = 0 <type 'int'>
               -2 < -1 = True <type 'bool'>
               -2 = -1 = False <type 'bool'>
               -2 > -1 = False <type 'bool'>
               -2 <= -1 = True <type 'bool'>
               -2 != -1 = True <type 'bool'>
               -2 >= -1 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               -2 + -1.0 = -3.0 <type 'float'>
               -2 - -1.0 = -1.0 <type 'float'>
               -2 * -1.0 = 2.0 <type 'float'>
               -2 / -1.0 = 2.0 <type 'float'>
               -2 ** -1.0 = -0.5 <type 'float'>
               -2 % -1.0 = 0.0 <type 'float'>
               -2 < -1.0 = True <type 'bool'>
               -2 = -1.0 = False <type 'bool'>
               -2 > -1.0 = False <type 'bool'>
               -2 <= -1.0 = True <type 'bool'>
               -2 != -1.0 = True <type 'bool'>
               -2 >= -1.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> -1
               -2 + -1 = -3 <type 'long'>
               -2 - -1 = -1 <type 'long'>
               -2 * -1 = 2 <type 'long'>
               -2 / -1 = 2 <type 'long'>
               -2 ** -1 = -0.5 <type 'float'>
               -2 % -1 = 0 <type 'long'>
               -2 < -1 = True <type 'bool'>
               -2 = -1 = False <type 'bool'>
               -2 > -1 = False <type 'bool'>
               -2 <= -1 = True <type 'bool'>
               -2 != -1 = True <type 'bool'>
               -2 >= -1 = False <type 'bool'>
     Op 2 :::  <type 'int'> 2
               -2 + 2 = 0 <type 'int'>
               -2 - 2 = -4 <type 'int'>
               -2 * 2 = -4 <type 'int'>
               -2 / 2 = -1 <type 'int'>
               -2 ** 2 = 4 <type 'int'>
               -2 % 2 = 0 <type 'int'>
               -2 < 2 = True <type 'bool'>
               -2 = 2 = False <type 'bool'>
               -2 > 2 = False <type 'bool'>
               -2 <= 2 = True <type 'bool'>
               -2 != 2 = True <type 'bool'>
               -2 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               -2 + 2.0 = 0.0 <type 'float'>
               -2 - 2.0 = -4.0 <type 'float'>
               -2 * 2.0 = -4.0 <type 'float'>
               -2 / 2.0 = -1.0 <type 'float'>
               -2 ** 2.0 = 4.0 <type 'float'>
               -2 % 2.0 = 0.0 <type 'float'>
               -2 < 2.0 = True <type 'bool'>
               -2 = 2.0 = False <type 'bool'>
               -2 > 2.0 = False <type 'bool'>
               -2 <= 2.0 = True <type 'bool'>
               -2 != 2.0 = True <type 'bool'>
               -2 >= 2.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 2
               -2 + 2 = 0 <type 'long'>
               -2 - 2 = -4 <type 'long'>
               -2 * 2 = -4 <type 'long'>
               -2 / 2 = -1 <type 'long'>
               -2 ** 2 = 4 <type 'long'>
               -2 % 2 = 0 <type 'long'>
               -2 < 2 = True <type 'bool'>
               -2 = 2 = False <type 'bool'>
               -2 > 2 = False <type 'bool'>
               -2 <= 2 = True <type 'bool'>
               -2 != 2 = True <type 'bool'>
               -2 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'int'> -2
               -2 + -2 = -4 <type 'int'>
               -2 - -2 = 0 <type 'int'>
               -2 * -2 = 4 <type 'int'>
               -2 / -2 = 1 <type 'int'>
               -2 ** -2 = 0.25 <type 'float'>
               -2 % -2 = 0 <type 'int'>
               -2 < -2 = False <type 'bool'>
               -2 = -2 = True <type 'bool'>
               -2 > -2 = False <type 'bool'>
               -2 <= -2 = True <type 'bool'>
               -2 != -2 = False <type 'bool'>
               -2 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               -2 + -2.0 = -4.0 <type 'float'>
               -2 - -2.0 = 0.0 <type 'float'>
               -2 * -2.0 = 4.0 <type 'float'>
               -2 / -2.0 = 1.0 <type 'float'>
               -2 ** -2.0 = 0.25 <type 'float'>
               -2 % -2.0 = 0.0 <type 'float'>
               -2 < -2.0 = False <type 'bool'>
               -2 = -2.0 = True <type 'bool'>
               -2 > -2.0 = False <type 'bool'>
               -2 <= -2.0 = True <type 'bool'>
               -2 != -2.0 = False <type 'bool'>
               -2 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               -2 + -2 = -4 <type 'long'>
               -2 - -2 = 0 <type 'long'>
               -2 * -2 = 4 <type 'long'>
               -2 / -2 = 1 <type 'long'>
               -2 ** -2 = 0.25 <type 'float'>
               -2 % -2 = 0 <type 'long'>
               -2 < -2 = False <type 'bool'>
               -2 = -2 = True <type 'bool'>
               -2 > -2 = False <type 'bool'>
               -2 <= -2 = True <type 'bool'>
               -2 != -2 = False <type 'bool'>
               -2 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               -2 + 1000000000.0 = 999999998.0 <type 'float'>
               -2 - 1000000000.0 = -1000000002.0 <type 'float'>
               -2 * 1000000000.0 = -2000000000.0 <type 'float'>
               -2 / 1000000000.0 = -2e-09 <type 'float'>
skipping pow of really big number
               -2 % 1000000000.0 = 999999998.0 <type 'float'>
               -2 < 1000000000.0 = True <type 'bool'>
               -2 = 1000000000.0 = False <type 'bool'>
               -2 > 1000000000.0 = False <type 'bool'>
               -2 <= 1000000000.0 = True <type 'bool'>
               -2 != 1000000000.0 = True <type 'bool'>
               -2 >= 1000000000.0 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               -2 + -1000000000.0 = -1000000002.0 <type 'float'>
               -2 - -1000000000.0 = 999999998.0 <type 'float'>
               -2 * -1000000000.0 = 2000000000.0 <type 'float'>
               -2 / -1000000000.0 = 2e-09 <type 'float'>
               -2 ** -1000000000.0 = 0.0 <type 'float'>
               -2 % -1000000000.0 = -2.0 <type 'float'>
               -2 < -1000000000.0 = False <type 'bool'>
               -2 = -1000000000.0 = False <type 'bool'>
               -2 > -1000000000.0 = True <type 'bool'>
               -2 <= -1000000000.0 = False <type 'bool'>
               -2 != -1000000000.0 = True <type 'bool'>
               -2 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               -2 + 1e-09 = -1.999999999 <type 'float'>
               -2 - 1e-09 = -2.000000001 <type 'float'>
               -2 * 1e-09 = -2e-09 <type 'float'>
               -2 / 1e-09 = -2000000000.0 <type 'float'>
               -2 ** 1e-09 = Can't  <type 'int'> ** <type 'float'>
               -2 % 1e-09 = 1.24563182916e-16 <type 'float'>
               -2 < 1e-09 = True <type 'bool'>
               -2 = 1e-09 = False <type 'bool'>
               -2 > 1e-09 = False <type 'bool'>
               -2 <= 1e-09 = True <type 'bool'>
               -2 != 1e-09 = True <type 'bool'>
               -2 >= 1e-09 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               -2 + -1e-09 = -2.000000001 <type 'float'>
               -2 - -1e-09 = -1.999999999 <type 'float'>
               -2 * -1e-09 = 2e-09 <type 'float'>
               -2 / -1e-09 = 2000000000.0 <type 'float'>
               -2 ** -1e-09 = Can't  <type 'int'> ** <type 'float'>
               -2 % -1e-09 = -9.99999875437e-10 <type 'float'>
               -2 < -1e-09 = True <type 'bool'>
               -2 = -1e-09 = False <type 'bool'>
               -2 > -1e-09 = False <type 'bool'>
               -2 <= -1e-09 = True <type 'bool'>
               -2 != -1e-09 = True <type 'bool'>
               -2 >= -1e-09 = False <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               -2 + 123456789 = 123456787 <type 'long'>
               -2 - 123456789 = -123456791 <type 'long'>
               -2 * 123456789 = -246913578 <type 'long'>
               -2 / 123456789 = -1 <type 'long'>
skipping pow of really big number
               -2 % 123456789 = 123456787 <type 'long'>
               -2 < 123456789 = True <type 'bool'>
               -2 = 123456789 = False <type 'bool'>
               -2 > 123456789 = False <type 'bool'>
               -2 <= 123456789 = True <type 'bool'>
               -2 != 123456789 = True <type 'bool'>
               -2 >= 123456789 = False <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               -2 + 12345678901234567890123456789 = 12345678901234567890123456787 <type 'long'>
               -2 - 12345678901234567890123456789 = -12345678901234567890123456791 <type 'long'>
               -2 * 12345678901234567890123456789 = -24691357802469135780246913578 <type 'long'>
               -2 / 12345678901234567890123456789 = -1 <type 'long'>
skipping pow of really big number
               -2 % 12345678901234567890123456789 = 12345678901234567890123456787 <type 'long'>
               -2 < 12345678901234567890123456789 = True <type 'bool'>
               -2 = 12345678901234567890123456789 = False <type 'bool'>
               -2 > 12345678901234567890123456789 = False <type 'bool'>
               -2 <= 12345678901234567890123456789 = True <type 'bool'>
               -2 != 12345678901234567890123456789 = True <type 'bool'>
               -2 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'float'> -2.0
     Op 2 :::  <type 'int'> 1
               -2.0 + 1 = -1.0 <type 'float'>
               -2.0 - 1 = -3.0 <type 'float'>
               -2.0 * 1 = -2.0 <type 'float'>
               -2.0 / 1 = -2.0 <type 'float'>
               -2.0 ** 1 = -2.0 <type 'float'>
               -2.0 % 1 = 0.0 <type 'float'>
               -2.0 < 1 = True <type 'bool'>
               -2.0 = 1 = False <type 'bool'>
               -2.0 > 1 = False <type 'bool'>
               -2.0 <= 1 = True <type 'bool'>
               -2.0 != 1 = True <type 'bool'>
               -2.0 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               -2.0 + 1.0 = -1.0 <type 'float'>
               -2.0 - 1.0 = -3.0 <type 'float'>
               -2.0 * 1.0 = -2.0 <type 'float'>
               -2.0 / 1.0 = -2.0 <type 'float'>
               -2.0 ** 1.0 = -2.0 <type 'float'>
               -2.0 % 1.0 = 0.0 <type 'float'>
               -2.0 < 1.0 = True <type 'bool'>
               -2.0 = 1.0 = False <type 'bool'>
               -2.0 > 1.0 = False <type 'bool'>
               -2.0 <= 1.0 = True <type 'bool'>
               -2.0 != 1.0 = True <type 'bool'>
               -2.0 >= 1.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 1
               -2.0 + 1 = -1.0 <type 'float'>
               -2.0 - 1 = -3.0 <type 'float'>
               -2.0 * 1 = -2.0 <type 'float'>
               -2.0 / 1 = -2.0 <type 'float'>
               -2.0 ** 1 = -2.0 <type 'float'>
               -2.0 % 1 = 0.0 <type 'float'>
               -2.0 < 1 = True <type 'bool'>
               -2.0 = 1 = False <type 'bool'>
               -2.0 > 1 = False <type 'bool'>
               -2.0 <= 1 = True <type 'bool'>
               -2.0 != 1 = True <type 'bool'>
               -2.0 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'int'> -1
               -2.0 + -1 = -3.0 <type 'float'>
               -2.0 - -1 = -1.0 <type 'float'>
               -2.0 * -1 = 2.0 <type 'float'>
               -2.0 / -1 = 2.0 <type 'float'>
               -2.0 ** -1 = -0.5 <type 'float'>
               -2.0 % -1 = 0.0 <type 'float'>
               -2.0 < -1 = True <type 'bool'>
               -2.0 = -1 = False <type 'bool'>
               -2.0 > -1 = False <type 'bool'>
               -2.0 <= -1 = True <type 'bool'>
               -2.0 != -1 = True <type 'bool'>
               -2.0 >= -1 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               -2.0 + -1.0 = -3.0 <type 'float'>
               -2.0 - -1.0 = -1.0 <type 'float'>
               -2.0 * -1.0 = 2.0 <type 'float'>
               -2.0 / -1.0 = 2.0 <type 'float'>
               -2.0 ** -1.0 = -0.5 <type 'float'>
               -2.0 % -1.0 = 0.0 <type 'float'>
               -2.0 < -1.0 = True <type 'bool'>
               -2.0 = -1.0 = False <type 'bool'>
               -2.0 > -1.0 = False <type 'bool'>
               -2.0 <= -1.0 = True <type 'bool'>
               -2.0 != -1.0 = True <type 'bool'>
               -2.0 >= -1.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> -1
               -2.0 + -1 = -3.0 <type 'float'>
               -2.0 - -1 = -1.0 <type 'float'>
               -2.0 * -1 = 2.0 <type 'float'>
               -2.0 / -1 = 2.0 <type 'float'>
               -2.0 ** -1 = -0.5 <type 'float'>
               -2.0 % -1 = 0.0 <type 'float'>
               -2.0 < -1 = True <type 'bool'>
               -2.0 = -1 = False <type 'bool'>
               -2.0 > -1 = False <type 'bool'>
               -2.0 <= -1 = True <type 'bool'>
               -2.0 != -1 = True <type 'bool'>
               -2.0 >= -1 = False <type 'bool'>
     Op 2 :::  <type 'int'> 2
               -2.0 + 2 = 0.0 <type 'float'>
               -2.0 - 2 = -4.0 <type 'float'>
               -2.0 * 2 = -4.0 <type 'float'>
               -2.0 / 2 = -1.0 <type 'float'>
               -2.0 ** 2 = 4.0 <type 'float'>
               -2.0 % 2 = 0.0 <type 'float'>
               -2.0 < 2 = True <type 'bool'>
               -2.0 = 2 = False <type 'bool'>
               -2.0 > 2 = False <type 'bool'>
               -2.0 <= 2 = True <type 'bool'>
               -2.0 != 2 = True <type 'bool'>
               -2.0 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               -2.0 + 2.0 = 0.0 <type 'float'>
               -2.0 - 2.0 = -4.0 <type 'float'>
               -2.0 * 2.0 = -4.0 <type 'float'>
               -2.0 / 2.0 = -1.0 <type 'float'>
               -2.0 ** 2.0 = 4.0 <type 'float'>
               -2.0 % 2.0 = 0.0 <type 'float'>
               -2.0 < 2.0 = True <type 'bool'>
               -2.0 = 2.0 = False <type 'bool'>
               -2.0 > 2.0 = False <type 'bool'>
               -2.0 <= 2.0 = True <type 'bool'>
               -2.0 != 2.0 = True <type 'bool'>
               -2.0 >= 2.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 2
               -2.0 + 2 = 0.0 <type 'float'>
               -2.0 - 2 = -4.0 <type 'float'>
               -2.0 * 2 = -4.0 <type 'float'>
               -2.0 / 2 = -1.0 <type 'float'>
               -2.0 ** 2 = 4.0 <type 'float'>
               -2.0 % 2 = 0.0 <type 'float'>
               -2.0 < 2 = True <type 'bool'>
               -2.0 = 2 = False <type 'bool'>
               -2.0 > 2 = False <type 'bool'>
               -2.0 <= 2 = True <type 'bool'>
               -2.0 != 2 = True <type 'bool'>
               -2.0 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'int'> -2
               -2.0 + -2 = -4.0 <type 'float'>
               -2.0 - -2 = 0.0 <type 'float'>
               -2.0 * -2 = 4.0 <type 'float'>
               -2.0 / -2 = 1.0 <type 'float'>
               -2.0 ** -2 = 0.25 <type 'float'>
               -2.0 % -2 = 0.0 <type 'float'>
               -2.0 < -2 = False <type 'bool'>
               -2.0 = -2 = True <type 'bool'>
               -2.0 > -2 = False <type 'bool'>
               -2.0 <= -2 = True <type 'bool'>
               -2.0 != -2 = False <type 'bool'>
               -2.0 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               -2.0 + -2.0 = -4.0 <type 'float'>
               -2.0 - -2.0 = 0.0 <type 'float'>
               -2.0 * -2.0 = 4.0 <type 'float'>
               -2.0 / -2.0 = 1.0 <type 'float'>
               -2.0 ** -2.0 = 0.25 <type 'float'>
               -2.0 % -2.0 = 0.0 <type 'float'>
               -2.0 < -2.0 = False <type 'bool'>
               -2.0 = -2.0 = True <type 'bool'>
               -2.0 > -2.0 = False <type 'bool'>
               -2.0 <= -2.0 = True <type 'bool'>
               -2.0 != -2.0 = False <type 'bool'>
               -2.0 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               -2.0 + -2 = -4.0 <type 'float'>
               -2.0 - -2 = 0.0 <type 'float'>
               -2.0 * -2 = 4.0 <type 'float'>
               -2.0 / -2 = 1.0 <type 'float'>
               -2.0 ** -2 = 0.25 <type 'float'>
               -2.0 % -2 = 0.0 <type 'float'>
               -2.0 < -2 = False <type 'bool'>
               -2.0 = -2 = True <type 'bool'>
               -2.0 > -2 = False <type 'bool'>
               -2.0 <= -2 = True <type 'bool'>
               -2.0 != -2 = False <type 'bool'>
               -2.0 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               -2.0 + 1000000000.0 = 999999998.0 <type 'float'>
               -2.0 - 1000000000.0 = -1000000002.0 <type 'float'>
               -2.0 * 1000000000.0 = -2000000000.0 <type 'float'>
               -2.0 / 1000000000.0 = -2e-09 <type 'float'>
skipping pow of really big number
               -2.0 % 1000000000.0 = 999999998.0 <type 'float'>
               -2.0 < 1000000000.0 = True <type 'bool'>
               -2.0 = 1000000000.0 = False <type 'bool'>
               -2.0 > 1000000000.0 = False <type 'bool'>
               -2.0 <= 1000000000.0 = True <type 'bool'>
               -2.0 != 1000000000.0 = True <type 'bool'>
               -2.0 >= 1000000000.0 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               -2.0 + -1000000000.0 = -1000000002.0 <type 'float'>
               -2.0 - -1000000000.0 = 999999998.0 <type 'float'>
               -2.0 * -1000000000.0 = 2000000000.0 <type 'float'>
               -2.0 / -1000000000.0 = 2e-09 <type 'float'>
               -2.0 ** -1000000000.0 = 0.0 <type 'float'>
               -2.0 % -1000000000.0 = -2.0 <type 'float'>
               -2.0 < -1000000000.0 = False <type 'bool'>
               -2.0 = -1000000000.0 = False <type 'bool'>
               -2.0 > -1000000000.0 = True <type 'bool'>
               -2.0 <= -1000000000.0 = False <type 'bool'>
               -2.0 != -1000000000.0 = True <type 'bool'>
               -2.0 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               -2.0 + 1e-09 = -1.999999999 <type 'float'>
               -2.0 - 1e-09 = -2.000000001 <type 'float'>
               -2.0 * 1e-09 = -2e-09 <type 'float'>
               -2.0 / 1e-09 = -2000000000.0 <type 'float'>
               -2.0 ** 1e-09 = Can't  <type 'float'> ** <type 'float'>
               -2.0 % 1e-09 = 1.24563182916e-16 <type 'float'>
               -2.0 < 1e-09 = True <type 'bool'>
               -2.0 = 1e-09 = False <type 'bool'>
               -2.0 > 1e-09 = False <type 'bool'>
               -2.0 <= 1e-09 = True <type 'bool'>
               -2.0 != 1e-09 = True <type 'bool'>
               -2.0 >= 1e-09 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               -2.0 + -1e-09 = -2.000000001 <type 'float'>
               -2.0 - -1e-09 = -1.999999999 <type 'float'>
               -2.0 * -1e-09 = 2e-09 <type 'float'>
               -2.0 / -1e-09 = 2000000000.0 <type 'float'>
               -2.0 ** -1e-09 = Can't  <type 'float'> ** <type 'float'>
               -2.0 % -1e-09 = -9.99999875437e-10 <type 'float'>
               -2.0 < -1e-09 = True <type 'bool'>
               -2.0 = -1e-09 = False <type 'bool'>
               -2.0 > -1e-09 = False <type 'bool'>
               -2.0 <= -1e-09 = True <type 'bool'>
               -2.0 != -1e-09 = True <type 'bool'>
               -2.0 >= -1e-09 = False <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               -2.0 + 123456789 = 123456787.0 <type 'float'>
               -2.0 - 123456789 = -123456791.0 <type 'float'>
               -2.0 * 123456789 = -246913578.0 <type 'float'>
               -2.0 / 123456789 = -1.62000001474e-08 <type 'float'>
skipping pow of really big number
               -2.0 % 123456789 = 123456787.0 <type 'float'>
               -2.0 < 123456789 = True <type 'bool'>
               -2.0 = 123456789 = False <type 'bool'>
               -2.0 > 123456789 = False <type 'bool'>
               -2.0 <= 123456789 = True <type 'bool'>
               -2.0 != 123456789 = True <type 'bool'>
               -2.0 >= 123456789 = False <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               -2.0 + 12345678901234567890123456789 = 1.23456789012e+28 <type 'float'>
               -2.0 - 12345678901234567890123456789 = -1.23456789012e+28 <type 'float'>
               -2.0 * 12345678901234567890123456789 = -2.46913578025e+28 <type 'float'>
               -2.0 / 12345678901234567890123456789 = -1.62000001458e-28 <type 'float'>
skipping pow of really big number
               -2.0 % 12345678901234567890123456789 = 1.23456789012e+28 <type 'float'>
               -2.0 < 12345678901234567890123456789 = True <type 'bool'>
               -2.0 = 12345678901234567890123456789 = False <type 'bool'>
               -2.0 > 12345678901234567890123456789 = False <type 'bool'>
               -2.0 <= 12345678901234567890123456789 = True <type 'bool'>
               -2.0 != 12345678901234567890123456789 = True <type 'bool'>
               -2.0 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'long'> -2
     Op 2 :::  <type 'int'> 1
               -2 + 1 = -1 <type 'long'>
               -2 - 1 = -3 <type 'long'>
               -2 * 1 = -2 <type 'long'>
               -2 / 1 = -2 <type 'long'>
               -2 ** 1 = -2 <type 'long'>
               -2 % 1 = 0 <type 'long'>
               -2 < 1 = True <type 'bool'>
               -2 = 1 = False <type 'bool'>
               -2 > 1 = False <type 'bool'>
               -2 <= 1 = True <type 'bool'>
               -2 != 1 = True <type 'bool'>
               -2 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               -2 + 1.0 = -1.0 <type 'float'>
               -2 - 1.0 = -3.0 <type 'float'>
               -2 * 1.0 = -2.0 <type 'float'>
               -2 / 1.0 = -2.0 <type 'float'>
               -2 ** 1.0 = -2.0 <type 'float'>
               -2 % 1.0 = 0.0 <type 'float'>
               -2 < 1.0 = True <type 'bool'>
               -2 = 1.0 = False <type 'bool'>
               -2 > 1.0 = False <type 'bool'>
               -2 <= 1.0 = True <type 'bool'>
               -2 != 1.0 = True <type 'bool'>
               -2 >= 1.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 1
               -2 + 1 = -1 <type 'long'>
               -2 - 1 = -3 <type 'long'>
               -2 * 1 = -2 <type 'long'>
               -2 / 1 = -2 <type 'long'>
               -2 ** 1 = -2 <type 'long'>
               -2 % 1 = 0 <type 'long'>
               -2 < 1 = True <type 'bool'>
               -2 = 1 = False <type 'bool'>
               -2 > 1 = False <type 'bool'>
               -2 <= 1 = True <type 'bool'>
               -2 != 1 = True <type 'bool'>
               -2 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'int'> -1
               -2 + -1 = -3 <type 'long'>
               -2 - -1 = -1 <type 'long'>
               -2 * -1 = 2 <type 'long'>
               -2 / -1 = 2 <type 'long'>
               -2 ** -1 = -0.5 <type 'float'>
               -2 % -1 = 0 <type 'long'>
               -2 < -1 = True <type 'bool'>
               -2 = -1 = False <type 'bool'>
               -2 > -1 = False <type 'bool'>
               -2 <= -1 = True <type 'bool'>
               -2 != -1 = True <type 'bool'>
               -2 >= -1 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               -2 + -1.0 = -3.0 <type 'float'>
               -2 - -1.0 = -1.0 <type 'float'>
               -2 * -1.0 = 2.0 <type 'float'>
               -2 / -1.0 = 2.0 <type 'float'>
               -2 ** -1.0 = -0.5 <type 'float'>
               -2 % -1.0 = 0.0 <type 'float'>
               -2 < -1.0 = True <type 'bool'>
               -2 = -1.0 = False <type 'bool'>
               -2 > -1.0 = False <type 'bool'>
               -2 <= -1.0 = True <type 'bool'>
               -2 != -1.0 = True <type 'bool'>
               -2 >= -1.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> -1
               -2 + -1 = -3 <type 'long'>
               -2 - -1 = -1 <type 'long'>
               -2 * -1 = 2 <type 'long'>
               -2 / -1 = 2 <type 'long'>
               -2 ** -1 = -0.5 <type 'float'>
               -2 % -1 = 0 <type 'long'>
               -2 < -1 = True <type 'bool'>
               -2 = -1 = False <type 'bool'>
               -2 > -1 = False <type 'bool'>
               -2 <= -1 = True <type 'bool'>
               -2 != -1 = True <type 'bool'>
               -2 >= -1 = False <type 'bool'>
     Op 2 :::  <type 'int'> 2
               -2 + 2 = 0 <type 'long'>
               -2 - 2 = -4 <type 'long'>
               -2 * 2 = -4 <type 'long'>
               -2 / 2 = -1 <type 'long'>
               -2 ** 2 = 4 <type 'long'>
               -2 % 2 = 0 <type 'long'>
               -2 < 2 = True <type 'bool'>
               -2 = 2 = False <type 'bool'>
               -2 > 2 = False <type 'bool'>
               -2 <= 2 = True <type 'bool'>
               -2 != 2 = True <type 'bool'>
               -2 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               -2 + 2.0 = 0.0 <type 'float'>
               -2 - 2.0 = -4.0 <type 'float'>
               -2 * 2.0 = -4.0 <type 'float'>
               -2 / 2.0 = -1.0 <type 'float'>
               -2 ** 2.0 = 4.0 <type 'float'>
               -2 % 2.0 = 0.0 <type 'float'>
               -2 < 2.0 = True <type 'bool'>
               -2 = 2.0 = False <type 'bool'>
               -2 > 2.0 = False <type 'bool'>
               -2 <= 2.0 = True <type 'bool'>
               -2 != 2.0 = True <type 'bool'>
               -2 >= 2.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 2
               -2 + 2 = 0 <type 'long'>
               -2 - 2 = -4 <type 'long'>
               -2 * 2 = -4 <type 'long'>
               -2 / 2 = -1 <type 'long'>
               -2 ** 2 = 4 <type 'long'>
               -2 % 2 = 0 <type 'long'>
               -2 < 2 = True <type 'bool'>
               -2 = 2 = False <type 'bool'>
               -2 > 2 = False <type 'bool'>
               -2 <= 2 = True <type 'bool'>
               -2 != 2 = True <type 'bool'>
               -2 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'int'> -2
               -2 + -2 = -4 <type 'long'>
               -2 - -2 = 0 <type 'long'>
               -2 * -2 = 4 <type 'long'>
               -2 / -2 = 1 <type 'long'>
               -2 ** -2 = 0.25 <type 'float'>
               -2 % -2 = 0 <type 'long'>
               -2 < -2 = False <type 'bool'>
               -2 = -2 = True <type 'bool'>
               -2 > -2 = False <type 'bool'>
               -2 <= -2 = True <type 'bool'>
               -2 != -2 = False <type 'bool'>
               -2 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               -2 + -2.0 = -4.0 <type 'float'>
               -2 - -2.0 = 0.0 <type 'float'>
               -2 * -2.0 = 4.0 <type 'float'>
               -2 / -2.0 = 1.0 <type 'float'>
               -2 ** -2.0 = 0.25 <type 'float'>
               -2 % -2.0 = 0.0 <type 'float'>
               -2 < -2.0 = False <type 'bool'>
               -2 = -2.0 = True <type 'bool'>
               -2 > -2.0 = False <type 'bool'>
               -2 <= -2.0 = True <type 'bool'>
               -2 != -2.0 = False <type 'bool'>
               -2 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               -2 + -2 = -4 <type 'long'>
               -2 - -2 = 0 <type 'long'>
               -2 * -2 = 4 <type 'long'>
               -2 / -2 = 1 <type 'long'>
               -2 ** -2 = 0.25 <type 'float'>
               -2 % -2 = 0 <type 'long'>
               -2 < -2 = False <type 'bool'>
               -2 = -2 = True <type 'bool'>
               -2 > -2 = False <type 'bool'>
               -2 <= -2 = True <type 'bool'>
               -2 != -2 = False <type 'bool'>
               -2 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               -2 + 1000000000.0 = 999999998.0 <type 'float'>
               -2 - 1000000000.0 = -1000000002.0 <type 'float'>
               -2 * 1000000000.0 = -2000000000.0 <type 'float'>
               -2 / 1000000000.0 = -2e-09 <type 'float'>
skipping pow of really big number
               -2 % 1000000000.0 = 999999998.0 <type 'float'>
               -2 < 1000000000.0 = True <type 'bool'>
               -2 = 1000000000.0 = False <type 'bool'>
               -2 > 1000000000.0 = False <type 'bool'>
               -2 <= 1000000000.0 = True <type 'bool'>
               -2 != 1000000000.0 = True <type 'bool'>
               -2 >= 1000000000.0 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               -2 + -1000000000.0 = -1000000002.0 <type 'float'>
               -2 - -1000000000.0 = 999999998.0 <type 'float'>
               -2 * -1000000000.0 = 2000000000.0 <type 'float'>
               -2 / -1000000000.0 = 2e-09 <type 'float'>
               -2 ** -1000000000.0 = 0.0 <type 'float'>
               -2 % -1000000000.0 = -2.0 <type 'float'>
               -2 < -1000000000.0 = False <type 'bool'>
               -2 = -1000000000.0 = False <type 'bool'>
               -2 > -1000000000.0 = True <type 'bool'>
               -2 <= -1000000000.0 = False <type 'bool'>
               -2 != -1000000000.0 = True <type 'bool'>
               -2 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               -2 + 1e-09 = -1.999999999 <type 'float'>
               -2 - 1e-09 = -2.000000001 <type 'float'>
               -2 * 1e-09 = -2e-09 <type 'float'>
               -2 / 1e-09 = -2000000000.0 <type 'float'>
               -2 ** 1e-09 = Can't  <type 'long'> ** <type 'float'>
               -2 % 1e-09 = 1.24563182916e-16 <type 'float'>
               -2 < 1e-09 = True <type 'bool'>
               -2 = 1e-09 = False <type 'bool'>
               -2 > 1e-09 = False <type 'bool'>
               -2 <= 1e-09 = True <type 'bool'>
               -2 != 1e-09 = True <type 'bool'>
               -2 >= 1e-09 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               -2 + -1e-09 = -2.000000001 <type 'float'>
               -2 - -1e-09 = -1.999999999 <type 'float'>
               -2 * -1e-09 = 2e-09 <type 'float'>
               -2 / -1e-09 = 2000000000.0 <type 'float'>
               -2 ** -1e-09 = Can't  <type 'long'> ** <type 'float'>
               -2 % -1e-09 = -9.99999875437e-10 <type 'float'>
               -2 < -1e-09 = True <type 'bool'>
               -2 = -1e-09 = False <type 'bool'>
               -2 > -1e-09 = False <type 'bool'>
               -2 <= -1e-09 = True <type 'bool'>
               -2 != -1e-09 = True <type 'bool'>
               -2 >= -1e-09 = False <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               -2 + 123456789 = 123456787 <type 'long'>
               -2 - 123456789 = -123456791 <type 'long'>
               -2 * 123456789 = -246913578 <type 'long'>
               -2 / 123456789 = -1 <type 'long'>
skipping pow of really big number
               -2 % 123456789 = 123456787 <type 'long'>
               -2 < 123456789 = True <type 'bool'>
               -2 = 123456789 = False <type 'bool'>
               -2 > 123456789 = False <type 'bool'>
               -2 <= 123456789 = True <type 'bool'>
               -2 != 123456789 = True <type 'bool'>
               -2 >= 123456789 = False <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               -2 + 12345678901234567890123456789 = 12345678901234567890123456787 <type 'long'>
               -2 - 12345678901234567890123456789 = -12345678901234567890123456791 <type 'long'>
               -2 * 12345678901234567890123456789 = -24691357802469135780246913578 <type 'long'>
               -2 / 12345678901234567890123456789 = -1 <type 'long'>
skipping pow of really big number
               -2 % 12345678901234567890123456789 = 12345678901234567890123456787 <type 'long'>
               -2 < 12345678901234567890123456789 = True <type 'bool'>
               -2 = 12345678901234567890123456789 = False <type 'bool'>
               -2 > 12345678901234567890123456789 = False <type 'bool'>
               -2 <= 12345678901234567890123456789 = True <type 'bool'>
               -2 != 12345678901234567890123456789 = True <type 'bool'>
               -2 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'float'> 1000000000.0
     Op 2 :::  <type 'int'> 1
               1000000000.0 + 1 = 1000000001.0 <type 'float'>
               1000000000.0 - 1 = 999999999.0 <type 'float'>
               1000000000.0 * 1 = 1000000000.0 <type 'float'>
               1000000000.0 / 1 = 1000000000.0 <type 'float'>
               1000000000.0 ** 1 = 1000000000.0 <type 'float'>
               1000000000.0 % 1 = 0.0 <type 'float'>
               1000000000.0 < 1 = False <type 'bool'>
               1000000000.0 = 1 = False <type 'bool'>
               1000000000.0 > 1 = True <type 'bool'>
               1000000000.0 <= 1 = False <type 'bool'>
               1000000000.0 != 1 = True <type 'bool'>
               1000000000.0 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               1000000000.0 + 1.0 = 1000000001.0 <type 'float'>
               1000000000.0 - 1.0 = 999999999.0 <type 'float'>
               1000000000.0 * 1.0 = 1000000000.0 <type 'float'>
               1000000000.0 / 1.0 = 1000000000.0 <type 'float'>
               1000000000.0 ** 1.0 = 1000000000.0 <type 'float'>
               1000000000.0 % 1.0 = 0.0 <type 'float'>
               1000000000.0 < 1.0 = False <type 'bool'>
               1000000000.0 = 1.0 = False <type 'bool'>
               1000000000.0 > 1.0 = True <type 'bool'>
               1000000000.0 <= 1.0 = False <type 'bool'>
               1000000000.0 != 1.0 = True <type 'bool'>
               1000000000.0 >= 1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> 1
               1000000000.0 + 1 = 1000000001.0 <type 'float'>
               1000000000.0 - 1 = 999999999.0 <type 'float'>
               1000000000.0 * 1 = 1000000000.0 <type 'float'>
               1000000000.0 / 1 = 1000000000.0 <type 'float'>
               1000000000.0 ** 1 = 1000000000.0 <type 'float'>
               1000000000.0 % 1 = 0.0 <type 'float'>
               1000000000.0 < 1 = False <type 'bool'>
               1000000000.0 = 1 = False <type 'bool'>
               1000000000.0 > 1 = True <type 'bool'>
               1000000000.0 <= 1 = False <type 'bool'>
               1000000000.0 != 1 = True <type 'bool'>
               1000000000.0 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'int'> -1
               1000000000.0 + -1 = 999999999.0 <type 'float'>
               1000000000.0 - -1 = 1000000001.0 <type 'float'>
               1000000000.0 * -1 = -1000000000.0 <type 'float'>
               1000000000.0 / -1 = -1000000000.0 <type 'float'>
               1000000000.0 ** -1 = 1e-09 <type 'float'>
               1000000000.0 % -1 = 0.0 <type 'float'>
               1000000000.0 < -1 = False <type 'bool'>
               1000000000.0 = -1 = False <type 'bool'>
               1000000000.0 > -1 = True <type 'bool'>
               1000000000.0 <= -1 = False <type 'bool'>
               1000000000.0 != -1 = True <type 'bool'>
               1000000000.0 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               1000000000.0 + -1.0 = 999999999.0 <type 'float'>
               1000000000.0 - -1.0 = 1000000001.0 <type 'float'>
               1000000000.0 * -1.0 = -1000000000.0 <type 'float'>
               1000000000.0 / -1.0 = -1000000000.0 <type 'float'>
               1000000000.0 ** -1.0 = 1e-09 <type 'float'>
               1000000000.0 % -1.0 = 0.0 <type 'float'>
               1000000000.0 < -1.0 = False <type 'bool'>
               1000000000.0 = -1.0 = False <type 'bool'>
               1000000000.0 > -1.0 = True <type 'bool'>
               1000000000.0 <= -1.0 = False <type 'bool'>
               1000000000.0 != -1.0 = True <type 'bool'>
               1000000000.0 >= -1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -1
               1000000000.0 + -1 = 999999999.0 <type 'float'>
               1000000000.0 - -1 = 1000000001.0 <type 'float'>
               1000000000.0 * -1 = -1000000000.0 <type 'float'>
               1000000000.0 / -1 = -1000000000.0 <type 'float'>
               1000000000.0 ** -1 = 1e-09 <type 'float'>
               1000000000.0 % -1 = 0.0 <type 'float'>
               1000000000.0 < -1 = False <type 'bool'>
               1000000000.0 = -1 = False <type 'bool'>
               1000000000.0 > -1 = True <type 'bool'>
               1000000000.0 <= -1 = False <type 'bool'>
               1000000000.0 != -1 = True <type 'bool'>
               1000000000.0 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'int'> 2
               1000000000.0 + 2 = 1000000002.0 <type 'float'>
               1000000000.0 - 2 = 999999998.0 <type 'float'>
               1000000000.0 * 2 = 2000000000.0 <type 'float'>
               1000000000.0 / 2 = 500000000.0 <type 'float'>
               1000000000.0 ** 2 = 1e+18 <type 'float'>
               1000000000.0 % 2 = 0.0 <type 'float'>
               1000000000.0 < 2 = False <type 'bool'>
               1000000000.0 = 2 = False <type 'bool'>
               1000000000.0 > 2 = True <type 'bool'>
               1000000000.0 <= 2 = False <type 'bool'>
               1000000000.0 != 2 = True <type 'bool'>
               1000000000.0 >= 2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               1000000000.0 + 2.0 = 1000000002.0 <type 'float'>
               1000000000.0 - 2.0 = 999999998.0 <type 'float'>
               1000000000.0 * 2.0 = 2000000000.0 <type 'float'>
               1000000000.0 / 2.0 = 500000000.0 <type 'float'>
               1000000000.0 ** 2.0 = 1e+18 <type 'float'>
               1000000000.0 % 2.0 = 0.0 <type 'float'>
               1000000000.0 < 2.0 = False <type 'bool'>
               1000000000.0 = 2.0 = False <type 'bool'>
               1000000000.0 > 2.0 = True <type 'bool'>
               1000000000.0 <= 2.0 = False <type 'bool'>
               1000000000.0 != 2.0 = True <type 'bool'>
               1000000000.0 >= 2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> 2
               1000000000.0 + 2 = 1000000002.0 <type 'float'>
               1000000000.0 - 2 = 999999998.0 <type 'float'>
               1000000000.0 * 2 = 2000000000.0 <type 'float'>
               1000000000.0 / 2 = 500000000.0 <type 'float'>
               1000000000.0 ** 2 = 1e+18 <type 'float'>
               1000000000.0 % 2 = 0.0 <type 'float'>
               1000000000.0 < 2 = False <type 'bool'>
               1000000000.0 = 2 = False <type 'bool'>
               1000000000.0 > 2 = True <type 'bool'>
               1000000000.0 <= 2 = False <type 'bool'>
               1000000000.0 != 2 = True <type 'bool'>
               1000000000.0 >= 2 = True <type 'bool'>
     Op 2 :::  <type 'int'> -2
               1000000000.0 + -2 = 999999998.0 <type 'float'>
               1000000000.0 - -2 = 1000000002.0 <type 'float'>
               1000000000.0 * -2 = -2000000000.0 <type 'float'>
               1000000000.0 / -2 = -500000000.0 <type 'float'>
               1000000000.0 ** -2 = 1e-18 <type 'float'>
               1000000000.0 % -2 = 0.0 <type 'float'>
               1000000000.0 < -2 = False <type 'bool'>
               1000000000.0 = -2 = False <type 'bool'>
               1000000000.0 > -2 = True <type 'bool'>
               1000000000.0 <= -2 = False <type 'bool'>
               1000000000.0 != -2 = True <type 'bool'>
               1000000000.0 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               1000000000.0 + -2.0 = 999999998.0 <type 'float'>
               1000000000.0 - -2.0 = 1000000002.0 <type 'float'>
               1000000000.0 * -2.0 = -2000000000.0 <type 'float'>
               1000000000.0 / -2.0 = -500000000.0 <type 'float'>
               1000000000.0 ** -2.0 = 1e-18 <type 'float'>
               1000000000.0 % -2.0 = 0.0 <type 'float'>
               1000000000.0 < -2.0 = False <type 'bool'>
               1000000000.0 = -2.0 = False <type 'bool'>
               1000000000.0 > -2.0 = True <type 'bool'>
               1000000000.0 <= -2.0 = False <type 'bool'>
               1000000000.0 != -2.0 = True <type 'bool'>
               1000000000.0 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               1000000000.0 + -2 = 999999998.0 <type 'float'>
               1000000000.0 - -2 = 1000000002.0 <type 'float'>
               1000000000.0 * -2 = -2000000000.0 <type 'float'>
               1000000000.0 / -2 = -500000000.0 <type 'float'>
               1000000000.0 ** -2 = 1e-18 <type 'float'>
               1000000000.0 % -2 = 0.0 <type 'float'>
               1000000000.0 < -2 = False <type 'bool'>
               1000000000.0 = -2 = False <type 'bool'>
               1000000000.0 > -2 = True <type 'bool'>
               1000000000.0 <= -2 = False <type 'bool'>
               1000000000.0 != -2 = True <type 'bool'>
               1000000000.0 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               1000000000.0 + 1000000000.0 = 2000000000.0 <type 'float'>
               1000000000.0 - 1000000000.0 = 0.0 <type 'float'>
               1000000000.0 * 1000000000.0 = 1e+18 <type 'float'>
               1000000000.0 / 1000000000.0 = 1.0 <type 'float'>
skipping pow of really big number
               1000000000.0 % 1000000000.0 = 0.0 <type 'float'>
               1000000000.0 < 1000000000.0 = False <type 'bool'>
               1000000000.0 = 1000000000.0 = True <type 'bool'>
               1000000000.0 > 1000000000.0 = False <type 'bool'>
               1000000000.0 <= 1000000000.0 = True <type 'bool'>
               1000000000.0 != 1000000000.0 = False <type 'bool'>
               1000000000.0 >= 1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               1000000000.0 + -1000000000.0 = 0.0 <type 'float'>
               1000000000.0 - -1000000000.0 = 2000000000.0 <type 'float'>
               1000000000.0 * -1000000000.0 = -1e+18 <type 'float'>
               1000000000.0 / -1000000000.0 = -1.0 <type 'float'>
               1000000000.0 ** -1000000000.0 = 0.0 <type 'float'>
               1000000000.0 % -1000000000.0 = 0.0 <type 'float'>
               1000000000.0 < -1000000000.0 = False <type 'bool'>
               1000000000.0 = -1000000000.0 = False <type 'bool'>
               1000000000.0 > -1000000000.0 = True <type 'bool'>
               1000000000.0 <= -1000000000.0 = False <type 'bool'>
               1000000000.0 != -1000000000.0 = True <type 'bool'>
               1000000000.0 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               1000000000.0 + 1e-09 = 1000000000.0 <type 'float'>
               1000000000.0 - 1e-09 = 1000000000.0 <type 'float'>
               1000000000.0 * 1e-09 = 1.0 <type 'float'>
               1000000000.0 / 1e-09 = 1e+18 <type 'float'>
               1000000000.0 ** 1e-09 = 1.00000002072 <type 'float'>
               1000000000.0 % 1e-09 = 7.1840854222e-10 <type 'float'>
               1000000000.0 < 1e-09 = False <type 'bool'>
               1000000000.0 = 1e-09 = False <type 'bool'>
               1000000000.0 > 1e-09 = True <type 'bool'>
               1000000000.0 <= 1e-09 = False <type 'bool'>
               1000000000.0 != 1e-09 = True <type 'bool'>
               1000000000.0 >= 1e-09 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               1000000000.0 + -1e-09 = 1000000000.0 <type 'float'>
               1000000000.0 - -1e-09 = 1000000000.0 <type 'float'>
               1000000000.0 * -1e-09 = -1.0 <type 'float'>
               1000000000.0 / -1e-09 = -1e+18 <type 'float'>
               1000000000.0 ** -1e-09 = 0.999999979277 <type 'float'>
               1000000000.0 % -1e-09 = -2.8159145778e-10 <type 'float'>
               1000000000.0 < -1e-09 = False <type 'bool'>
               1000000000.0 = -1e-09 = False <type 'bool'>
               1000000000.0 > -1e-09 = True <type 'bool'>
               1000000000.0 <= -1e-09 = False <type 'bool'>
               1000000000.0 != -1e-09 = True <type 'bool'>
               1000000000.0 >= -1e-09 = True <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               1000000000.0 + 123456789 = 1123456789.0 <type 'float'>
               1000000000.0 - 123456789 = 876543211.0 <type 'float'>
               1000000000.0 * 123456789 = 1.23456789e+17 <type 'float'>
               1000000000.0 / 123456789 = 8.10000007371 <type 'float'>
skipping pow of really big number
               1000000000.0 % 123456789 = 12345688.0 <type 'float'>
               1000000000.0 < 123456789 = False <type 'bool'>
               1000000000.0 = 123456789 = False <type 'bool'>
               1000000000.0 > 123456789 = True <type 'bool'>
               1000000000.0 <= 123456789 = False <type 'bool'>
               1000000000.0 != 123456789 = True <type 'bool'>
               1000000000.0 >= 123456789 = True <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               1000000000.0 + 12345678901234567890123456789 = 1.23456789012e+28 <type 'float'>
               1000000000.0 - 12345678901234567890123456789 = -1.23456789012e+28 <type 'float'>
               1000000000.0 * 12345678901234567890123456789 = 1.23456789012e+37 <type 'float'>
               1000000000.0 / 12345678901234567890123456789 = 8.1000000729e-20 <type 'float'>
skipping pow of really big number
               1000000000.0 % 12345678901234567890123456789 = 1000000000.0 <type 'float'>
               1000000000.0 < 12345678901234567890123456789 = True <type 'bool'>
               1000000000.0 = 12345678901234567890123456789 = False <type 'bool'>
               1000000000.0 > 12345678901234567890123456789 = False <type 'bool'>
               1000000000.0 <= 12345678901234567890123456789 = True <type 'bool'>
               1000000000.0 != 12345678901234567890123456789 = True <type 'bool'>
               1000000000.0 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'float'> -1000000000.0
     Op 2 :::  <type 'int'> 1
               -1000000000.0 + 1 = -999999999.0 <type 'float'>
               -1000000000.0 - 1 = -1000000001.0 <type 'float'>
               -1000000000.0 * 1 = -1000000000.0 <type 'float'>
               -1000000000.0 / 1 = -1000000000.0 <type 'float'>
               -1000000000.0 ** 1 = -1000000000.0 <type 'float'>
               -1000000000.0 % 1 = 0.0 <type 'float'>
               -1000000000.0 < 1 = True <type 'bool'>
               -1000000000.0 = 1 = False <type 'bool'>
               -1000000000.0 > 1 = False <type 'bool'>
               -1000000000.0 <= 1 = True <type 'bool'>
               -1000000000.0 != 1 = True <type 'bool'>
               -1000000000.0 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               -1000000000.0 + 1.0 = -999999999.0 <type 'float'>
               -1000000000.0 - 1.0 = -1000000001.0 <type 'float'>
               -1000000000.0 * 1.0 = -1000000000.0 <type 'float'>
               -1000000000.0 / 1.0 = -1000000000.0 <type 'float'>
               -1000000000.0 ** 1.0 = -1000000000.0 <type 'float'>
               -1000000000.0 % 1.0 = 0.0 <type 'float'>
               -1000000000.0 < 1.0 = True <type 'bool'>
               -1000000000.0 = 1.0 = False <type 'bool'>
               -1000000000.0 > 1.0 = False <type 'bool'>
               -1000000000.0 <= 1.0 = True <type 'bool'>
               -1000000000.0 != 1.0 = True <type 'bool'>
               -1000000000.0 >= 1.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 1
               -1000000000.0 + 1 = -999999999.0 <type 'float'>
               -1000000000.0 - 1 = -1000000001.0 <type 'float'>
               -1000000000.0 * 1 = -1000000000.0 <type 'float'>
               -1000000000.0 / 1 = -1000000000.0 <type 'float'>
               -1000000000.0 ** 1 = -1000000000.0 <type 'float'>
               -1000000000.0 % 1 = 0.0 <type 'float'>
               -1000000000.0 < 1 = True <type 'bool'>
               -1000000000.0 = 1 = False <type 'bool'>
               -1000000000.0 > 1 = False <type 'bool'>
               -1000000000.0 <= 1 = True <type 'bool'>
               -1000000000.0 != 1 = True <type 'bool'>
               -1000000000.0 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'int'> -1
               -1000000000.0 + -1 = -1000000001.0 <type 'float'>
               -1000000000.0 - -1 = -999999999.0 <type 'float'>
               -1000000000.0 * -1 = 1000000000.0 <type 'float'>
               -1000000000.0 / -1 = 1000000000.0 <type 'float'>
               -1000000000.0 ** -1 = -1e-09 <type 'float'>
               -1000000000.0 % -1 = 0.0 <type 'float'>
               -1000000000.0 < -1 = True <type 'bool'>
               -1000000000.0 = -1 = False <type 'bool'>
               -1000000000.0 > -1 = False <type 'bool'>
               -1000000000.0 <= -1 = True <type 'bool'>
               -1000000000.0 != -1 = True <type 'bool'>
               -1000000000.0 >= -1 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               -1000000000.0 + -1.0 = -1000000001.0 <type 'float'>
               -1000000000.0 - -1.0 = -999999999.0 <type 'float'>
               -1000000000.0 * -1.0 = 1000000000.0 <type 'float'>
               -1000000000.0 / -1.0 = 1000000000.0 <type 'float'>
               -1000000000.0 ** -1.0 = -1e-09 <type 'float'>
               -1000000000.0 % -1.0 = 0.0 <type 'float'>
               -1000000000.0 < -1.0 = True <type 'bool'>
               -1000000000.0 = -1.0 = False <type 'bool'>
               -1000000000.0 > -1.0 = False <type 'bool'>
               -1000000000.0 <= -1.0 = True <type 'bool'>
               -1000000000.0 != -1.0 = True <type 'bool'>
               -1000000000.0 >= -1.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> -1
               -1000000000.0 + -1 = -1000000001.0 <type 'float'>
               -1000000000.0 - -1 = -999999999.0 <type 'float'>
               -1000000000.0 * -1 = 1000000000.0 <type 'float'>
               -1000000000.0 / -1 = 1000000000.0 <type 'float'>
               -1000000000.0 ** -1 = -1e-09 <type 'float'>
               -1000000000.0 % -1 = 0.0 <type 'float'>
               -1000000000.0 < -1 = True <type 'bool'>
               -1000000000.0 = -1 = False <type 'bool'>
               -1000000000.0 > -1 = False <type 'bool'>
               -1000000000.0 <= -1 = True <type 'bool'>
               -1000000000.0 != -1 = True <type 'bool'>
               -1000000000.0 >= -1 = False <type 'bool'>
     Op 2 :::  <type 'int'> 2
               -1000000000.0 + 2 = -999999998.0 <type 'float'>
               -1000000000.0 - 2 = -1000000002.0 <type 'float'>
               -1000000000.0 * 2 = -2000000000.0 <type 'float'>
               -1000000000.0 / 2 = -500000000.0 <type 'float'>
               -1000000000.0 ** 2 = 1e+18 <type 'float'>
               -1000000000.0 % 2 = 0.0 <type 'float'>
               -1000000000.0 < 2 = True <type 'bool'>
               -1000000000.0 = 2 = False <type 'bool'>
               -1000000000.0 > 2 = False <type 'bool'>
               -1000000000.0 <= 2 = True <type 'bool'>
               -1000000000.0 != 2 = True <type 'bool'>
               -1000000000.0 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               -1000000000.0 + 2.0 = -999999998.0 <type 'float'>
               -1000000000.0 - 2.0 = -1000000002.0 <type 'float'>
               -1000000000.0 * 2.0 = -2000000000.0 <type 'float'>
               -1000000000.0 / 2.0 = -500000000.0 <type 'float'>
               -1000000000.0 ** 2.0 = 1e+18 <type 'float'>
               -1000000000.0 % 2.0 = 0.0 <type 'float'>
               -1000000000.0 < 2.0 = True <type 'bool'>
               -1000000000.0 = 2.0 = False <type 'bool'>
               -1000000000.0 > 2.0 = False <type 'bool'>
               -1000000000.0 <= 2.0 = True <type 'bool'>
               -1000000000.0 != 2.0 = True <type 'bool'>
               -1000000000.0 >= 2.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 2
               -1000000000.0 + 2 = -999999998.0 <type 'float'>
               -1000000000.0 - 2 = -1000000002.0 <type 'float'>
               -1000000000.0 * 2 = -2000000000.0 <type 'float'>
               -1000000000.0 / 2 = -500000000.0 <type 'float'>
               -1000000000.0 ** 2 = 1e+18 <type 'float'>
               -1000000000.0 % 2 = 0.0 <type 'float'>
               -1000000000.0 < 2 = True <type 'bool'>
               -1000000000.0 = 2 = False <type 'bool'>
               -1000000000.0 > 2 = False <type 'bool'>
               -1000000000.0 <= 2 = True <type 'bool'>
               -1000000000.0 != 2 = True <type 'bool'>
               -1000000000.0 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'int'> -2
               -1000000000.0 + -2 = -1000000002.0 <type 'float'>
               -1000000000.0 - -2 = -999999998.0 <type 'float'>
               -1000000000.0 * -2 = 2000000000.0 <type 'float'>
               -1000000000.0 / -2 = 500000000.0 <type 'float'>
               -1000000000.0 ** -2 = 1e-18 <type 'float'>
               -1000000000.0 % -2 = 0.0 <type 'float'>
               -1000000000.0 < -2 = True <type 'bool'>
               -1000000000.0 = -2 = False <type 'bool'>
               -1000000000.0 > -2 = False <type 'bool'>
               -1000000000.0 <= -2 = True <type 'bool'>
               -1000000000.0 != -2 = True <type 'bool'>
               -1000000000.0 >= -2 = False <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               -1000000000.0 + -2.0 = -1000000002.0 <type 'float'>
               -1000000000.0 - -2.0 = -999999998.0 <type 'float'>
               -1000000000.0 * -2.0 = 2000000000.0 <type 'float'>
               -1000000000.0 / -2.0 = 500000000.0 <type 'float'>
               -1000000000.0 ** -2.0 = 1e-18 <type 'float'>
               -1000000000.0 % -2.0 = 0.0 <type 'float'>
               -1000000000.0 < -2.0 = True <type 'bool'>
               -1000000000.0 = -2.0 = False <type 'bool'>
               -1000000000.0 > -2.0 = False <type 'bool'>
               -1000000000.0 <= -2.0 = True <type 'bool'>
               -1000000000.0 != -2.0 = True <type 'bool'>
               -1000000000.0 >= -2.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> -2
               -1000000000.0 + -2 = -1000000002.0 <type 'float'>
               -1000000000.0 - -2 = -999999998.0 <type 'float'>
               -1000000000.0 * -2 = 2000000000.0 <type 'float'>
               -1000000000.0 / -2 = 500000000.0 <type 'float'>
               -1000000000.0 ** -2 = 1e-18 <type 'float'>
               -1000000000.0 % -2 = 0.0 <type 'float'>
               -1000000000.0 < -2 = True <type 'bool'>
               -1000000000.0 = -2 = False <type 'bool'>
               -1000000000.0 > -2 = False <type 'bool'>
               -1000000000.0 <= -2 = True <type 'bool'>
               -1000000000.0 != -2 = True <type 'bool'>
               -1000000000.0 >= -2 = False <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               -1000000000.0 + 1000000000.0 = 0.0 <type 'float'>
               -1000000000.0 - 1000000000.0 = -2000000000.0 <type 'float'>
               -1000000000.0 * 1000000000.0 = -1e+18 <type 'float'>
               -1000000000.0 / 1000000000.0 = -1.0 <type 'float'>
skipping pow of really big number
               -1000000000.0 % 1000000000.0 = 0.0 <type 'float'>
               -1000000000.0 < 1000000000.0 = True <type 'bool'>
               -1000000000.0 = 1000000000.0 = False <type 'bool'>
               -1000000000.0 > 1000000000.0 = False <type 'bool'>
               -1000000000.0 <= 1000000000.0 = True <type 'bool'>
               -1000000000.0 != 1000000000.0 = True <type 'bool'>
               -1000000000.0 >= 1000000000.0 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               -1000000000.0 + -1000000000.0 = -2000000000.0 <type 'float'>
               -1000000000.0 - -1000000000.0 = 0.0 <type 'float'>
               -1000000000.0 * -1000000000.0 = 1e+18 <type 'float'>
               -1000000000.0 / -1000000000.0 = 1.0 <type 'float'>
               -1000000000.0 ** -1000000000.0 = 0.0 <type 'float'>
               -1000000000.0 % -1000000000.0 = 0.0 <type 'float'>
               -1000000000.0 < -1000000000.0 = False <type 'bool'>
               -1000000000.0 = -1000000000.0 = True <type 'bool'>
               -1000000000.0 > -1000000000.0 = False <type 'bool'>
               -1000000000.0 <= -1000000000.0 = True <type 'bool'>
               -1000000000.0 != -1000000000.0 = False <type 'bool'>
               -1000000000.0 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               -1000000000.0 + 1e-09 = -1000000000.0 <type 'float'>
               -1000000000.0 - 1e-09 = -1000000000.0 <type 'float'>
               -1000000000.0 * 1e-09 = -1.0 <type 'float'>
               -1000000000.0 / 1e-09 = -1e+18 <type 'float'>
               -1000000000.0 ** 1e-09 = Can't  <type 'float'> ** <type 'float'>
               -1000000000.0 % 1e-09 = 2.8159145778e-10 <type 'float'>
               -1000000000.0 < 1e-09 = True <type 'bool'>
               -1000000000.0 = 1e-09 = False <type 'bool'>
               -1000000000.0 > 1e-09 = False <type 'bool'>
               -1000000000.0 <= 1e-09 = True <type 'bool'>
               -1000000000.0 != 1e-09 = True <type 'bool'>
               -1000000000.0 >= 1e-09 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               -1000000000.0 + -1e-09 = -1000000000.0 <type 'float'>
               -1000000000.0 - -1e-09 = -1000000000.0 <type 'float'>
               -1000000000.0 * -1e-09 = 1.0 <type 'float'>
               -1000000000.0 / -1e-09 = 1e+18 <type 'float'>
               -1000000000.0 ** -1e-09 = Can't  <type 'float'> ** <type 'float'>
               -1000000000.0 % -1e-09 = -7.1840854222e-10 <type 'float'>
               -1000000000.0 < -1e-09 = True <type 'bool'>
               -1000000000.0 = -1e-09 = False <type 'bool'>
               -1000000000.0 > -1e-09 = False <type 'bool'>
               -1000000000.0 <= -1e-09 = True <type 'bool'>
               -1000000000.0 != -1e-09 = True <type 'bool'>
               -1000000000.0 >= -1e-09 = False <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               -1000000000.0 + 123456789 = -876543211.0 <type 'float'>
               -1000000000.0 - 123456789 = -1123456789.0 <type 'float'>
               -1000000000.0 * 123456789 = -1.23456789e+17 <type 'float'>
               -1000000000.0 / 123456789 = -8.10000007371 <type 'float'>
skipping pow of really big number
               -1000000000.0 % 123456789 = 111111101.0 <type 'float'>
               -1000000000.0 < 123456789 = True <type 'bool'>
               -1000000000.0 = 123456789 = False <type 'bool'>
               -1000000000.0 > 123456789 = False <type 'bool'>
               -1000000000.0 <= 123456789 = True <type 'bool'>
               -1000000000.0 != 123456789 = True <type 'bool'>
               -1000000000.0 >= 123456789 = False <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               -1000000000.0 + 12345678901234567890123456789 = 1.23456789012e+28 <type 'float'>
               -1000000000.0 - 12345678901234567890123456789 = -1.23456789012e+28 <type 'float'>
               -1000000000.0 * 12345678901234567890123456789 = -1.23456789012e+37 <type 'float'>
               -1000000000.0 / 12345678901234567890123456789 = -8.1000000729e-20 <type 'float'>
skipping pow of really big number
               -1000000000.0 % 12345678901234567890123456789 = 1.23456789012e+28 <type 'float'>
               -1000000000.0 < 12345678901234567890123456789 = True <type 'bool'>
               -1000000000.0 = 12345678901234567890123456789 = False <type 'bool'>
               -1000000000.0 > 12345678901234567890123456789 = False <type 'bool'>
               -1000000000.0 <= 12345678901234567890123456789 = True <type 'bool'>
               -1000000000.0 != 12345678901234567890123456789 = True <type 'bool'>
               -1000000000.0 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'float'> 1e-09
     Op 2 :::  <type 'int'> 1
               1e-09 + 1 = 1.000000001 <type 'float'>
               1e-09 - 1 = -0.999999999 <type 'float'>
               1e-09 * 1 = 1e-09 <type 'float'>
               1e-09 / 1 = 1e-09 <type 'float'>
               1e-09 ** 1 = 1e-09 <type 'float'>
               1e-09 % 1 = 1e-09 <type 'float'>
               1e-09 < 1 = True <type 'bool'>
               1e-09 = 1 = False <type 'bool'>
               1e-09 > 1 = False <type 'bool'>
               1e-09 <= 1 = True <type 'bool'>
               1e-09 != 1 = True <type 'bool'>
               1e-09 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               1e-09 + 1.0 = 1.000000001 <type 'float'>
               1e-09 - 1.0 = -0.999999999 <type 'float'>
               1e-09 * 1.0 = 1e-09 <type 'float'>
               1e-09 / 1.0 = 1e-09 <type 'float'>
               1e-09 ** 1.0 = 1e-09 <type 'float'>
               1e-09 % 1.0 = 1e-09 <type 'float'>
               1e-09 < 1.0 = True <type 'bool'>
               1e-09 = 1.0 = False <type 'bool'>
               1e-09 > 1.0 = False <type 'bool'>
               1e-09 <= 1.0 = True <type 'bool'>
               1e-09 != 1.0 = True <type 'bool'>
               1e-09 >= 1.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 1
               1e-09 + 1 = 1.000000001 <type 'float'>
               1e-09 - 1 = -0.999999999 <type 'float'>
               1e-09 * 1 = 1e-09 <type 'float'>
               1e-09 / 1 = 1e-09 <type 'float'>
               1e-09 ** 1 = 1e-09 <type 'float'>
               1e-09 % 1 = 1e-09 <type 'float'>
               1e-09 < 1 = True <type 'bool'>
               1e-09 = 1 = False <type 'bool'>
               1e-09 > 1 = False <type 'bool'>
               1e-09 <= 1 = True <type 'bool'>
               1e-09 != 1 = True <type 'bool'>
               1e-09 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'int'> -1
               1e-09 + -1 = -0.999999999 <type 'float'>
               1e-09 - -1 = 1.000000001 <type 'float'>
               1e-09 * -1 = -1e-09 <type 'float'>
               1e-09 / -1 = -1e-09 <type 'float'>
               1e-09 ** -1 = 1000000000.0 <type 'float'>
               1e-09 % -1 = -0.999999999 <type 'float'>
               1e-09 < -1 = False <type 'bool'>
               1e-09 = -1 = False <type 'bool'>
               1e-09 > -1 = True <type 'bool'>
               1e-09 <= -1 = False <type 'bool'>
               1e-09 != -1 = True <type 'bool'>
               1e-09 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               1e-09 + -1.0 = -0.999999999 <type 'float'>
               1e-09 - -1.0 = 1.000000001 <type 'float'>
               1e-09 * -1.0 = -1e-09 <type 'float'>
               1e-09 / -1.0 = -1e-09 <type 'float'>
               1e-09 ** -1.0 = 1000000000.0 <type 'float'>
               1e-09 % -1.0 = -0.999999999 <type 'float'>
               1e-09 < -1.0 = False <type 'bool'>
               1e-09 = -1.0 = False <type 'bool'>
               1e-09 > -1.0 = True <type 'bool'>
               1e-09 <= -1.0 = False <type 'bool'>
               1e-09 != -1.0 = True <type 'bool'>
               1e-09 >= -1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -1
               1e-09 + -1 = -0.999999999 <type 'float'>
               1e-09 - -1 = 1.000000001 <type 'float'>
               1e-09 * -1 = -1e-09 <type 'float'>
               1e-09 / -1 = -1e-09 <type 'float'>
               1e-09 ** -1 = 1000000000.0 <type 'float'>
               1e-09 % -1 = -0.999999999 <type 'float'>
               1e-09 < -1 = False <type 'bool'>
               1e-09 = -1 = False <type 'bool'>
               1e-09 > -1 = True <type 'bool'>
               1e-09 <= -1 = False <type 'bool'>
               1e-09 != -1 = True <type 'bool'>
               1e-09 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'int'> 2
               1e-09 + 2 = 2.000000001 <type 'float'>
               1e-09 - 2 = -1.999999999 <type 'float'>
               1e-09 * 2 = 2e-09 <type 'float'>
               1e-09 / 2 = 5e-10 <type 'float'>
               1e-09 ** 2 = 1e-18 <type 'float'>
               1e-09 % 2 = 1e-09 <type 'float'>
               1e-09 < 2 = True <type 'bool'>
               1e-09 = 2 = False <type 'bool'>
               1e-09 > 2 = False <type 'bool'>
               1e-09 <= 2 = True <type 'bool'>
               1e-09 != 2 = True <type 'bool'>
               1e-09 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               1e-09 + 2.0 = 2.000000001 <type 'float'>
               1e-09 - 2.0 = -1.999999999 <type 'float'>
               1e-09 * 2.0 = 2e-09 <type 'float'>
               1e-09 / 2.0 = 5e-10 <type 'float'>
               1e-09 ** 2.0 = 1e-18 <type 'float'>
               1e-09 % 2.0 = 1e-09 <type 'float'>
               1e-09 < 2.0 = True <type 'bool'>
               1e-09 = 2.0 = False <type 'bool'>
               1e-09 > 2.0 = False <type 'bool'>
               1e-09 <= 2.0 = True <type 'bool'>
               1e-09 != 2.0 = True <type 'bool'>
               1e-09 >= 2.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 2
               1e-09 + 2 = 2.000000001 <type 'float'>
               1e-09 - 2 = -1.999999999 <type 'float'>
               1e-09 * 2 = 2e-09 <type 'float'>
               1e-09 / 2 = 5e-10 <type 'float'>
               1e-09 ** 2 = 1e-18 <type 'float'>
               1e-09 % 2 = 1e-09 <type 'float'>
               1e-09 < 2 = True <type 'bool'>
               1e-09 = 2 = False <type 'bool'>
               1e-09 > 2 = False <type 'bool'>
               1e-09 <= 2 = True <type 'bool'>
               1e-09 != 2 = True <type 'bool'>
               1e-09 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'int'> -2
               1e-09 + -2 = -1.999999999 <type 'float'>
               1e-09 - -2 = 2.000000001 <type 'float'>
               1e-09 * -2 = -2e-09 <type 'float'>
               1e-09 / -2 = -5e-10 <type 'float'>
               1e-09 ** -2 = 1e+18 <type 'float'>
               1e-09 % -2 = -1.999999999 <type 'float'>
               1e-09 < -2 = False <type 'bool'>
               1e-09 = -2 = False <type 'bool'>
               1e-09 > -2 = True <type 'bool'>
               1e-09 <= -2 = False <type 'bool'>
               1e-09 != -2 = True <type 'bool'>
               1e-09 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               1e-09 + -2.0 = -1.999999999 <type 'float'>
               1e-09 - -2.0 = 2.000000001 <type 'float'>
               1e-09 * -2.0 = -2e-09 <type 'float'>
               1e-09 / -2.0 = -5e-10 <type 'float'>
               1e-09 ** -2.0 = 1e+18 <type 'float'>
               1e-09 % -2.0 = -1.999999999 <type 'float'>
               1e-09 < -2.0 = False <type 'bool'>
               1e-09 = -2.0 = False <type 'bool'>
               1e-09 > -2.0 = True <type 'bool'>
               1e-09 <= -2.0 = False <type 'bool'>
               1e-09 != -2.0 = True <type 'bool'>
               1e-09 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               1e-09 + -2 = -1.999999999 <type 'float'>
               1e-09 - -2 = 2.000000001 <type 'float'>
               1e-09 * -2 = -2e-09 <type 'float'>
               1e-09 / -2 = -5e-10 <type 'float'>
               1e-09 ** -2 = 1e+18 <type 'float'>
               1e-09 % -2 = -1.999999999 <type 'float'>
               1e-09 < -2 = False <type 'bool'>
               1e-09 = -2 = False <type 'bool'>
               1e-09 > -2 = True <type 'bool'>
               1e-09 <= -2 = False <type 'bool'>
               1e-09 != -2 = True <type 'bool'>
               1e-09 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               1e-09 + 1000000000.0 = 1000000000.0 <type 'float'>
               1e-09 - 1000000000.0 = -1000000000.0 <type 'float'>
               1e-09 * 1000000000.0 = 1.0 <type 'float'>
               1e-09 / 1000000000.0 = 1e-18 <type 'float'>
skipping pow of really big number
               1e-09 % 1000000000.0 = 1e-09 <type 'float'>
               1e-09 < 1000000000.0 = True <type 'bool'>
               1e-09 = 1000000000.0 = False <type 'bool'>
               1e-09 > 1000000000.0 = False <type 'bool'>
               1e-09 <= 1000000000.0 = True <type 'bool'>
               1e-09 != 1000000000.0 = True <type 'bool'>
               1e-09 >= 1000000000.0 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               1e-09 + -1000000000.0 = -1000000000.0 <type 'float'>
               1e-09 - -1000000000.0 = 1000000000.0 <type 'float'>
               1e-09 * -1000000000.0 = -1.0 <type 'float'>
               1e-09 / -1000000000.0 = -1e-18 <type 'float'>
               1e-09 ** -1000000000.0 = Can't  <type 'float'> ** <type 'float'>
               1e-09 % -1000000000.0 = -1000000000.0 <type 'float'>
               1e-09 < -1000000000.0 = False <type 'bool'>
               1e-09 = -1000000000.0 = False <type 'bool'>
               1e-09 > -1000000000.0 = True <type 'bool'>
               1e-09 <= -1000000000.0 = False <type 'bool'>
               1e-09 != -1000000000.0 = True <type 'bool'>
               1e-09 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               1e-09 + 1e-09 = 2e-09 <type 'float'>
               1e-09 - 1e-09 = 0.0 <type 'float'>
               1e-09 * 1e-09 = 1e-18 <type 'float'>
               1e-09 / 1e-09 = 1.0 <type 'float'>
               1e-09 ** 1e-09 = 0.999999979277 <type 'float'>
               1e-09 % 1e-09 = 0.0 <type 'float'>
               1e-09 < 1e-09 = False <type 'bool'>
               1e-09 = 1e-09 = True <type 'bool'>
               1e-09 > 1e-09 = False <type 'bool'>
               1e-09 <= 1e-09 = True <type 'bool'>
               1e-09 != 1e-09 = False <type 'bool'>
               1e-09 >= 1e-09 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               1e-09 + -1e-09 = 0.0 <type 'float'>
               1e-09 - -1e-09 = 2e-09 <type 'float'>
               1e-09 * -1e-09 = -1e-18 <type 'float'>
               1e-09 / -1e-09 = -1.0 <type 'float'>
               1e-09 ** -1e-09 = 1.00000002072 <type 'float'>
               1e-09 % -1e-09 = 0.0 <type 'float'>
               1e-09 < -1e-09 = False <type 'bool'>
               1e-09 = -1e-09 = False <type 'bool'>
               1e-09 > -1e-09 = True <type 'bool'>
               1e-09 <= -1e-09 = False <type 'bool'>
               1e-09 != -1e-09 = True <type 'bool'>
               1e-09 >= -1e-09 = True <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               1e-09 + 123456789 = 123456789.0 <type 'float'>
               1e-09 - 123456789 = -123456789.0 <type 'float'>
               1e-09 * 123456789 = 0.123456789 <type 'float'>
               1e-09 / 123456789 = 8.10000007371e-18 <type 'float'>
skipping pow of really big number
               1e-09 % 123456789 = 1e-09 <type 'float'>
               1e-09 < 123456789 = True <type 'bool'>
               1e-09 = 123456789 = False <type 'bool'>
               1e-09 > 123456789 = False <type 'bool'>
               1e-09 <= 123456789 = True <type 'bool'>
               1e-09 != 123456789 = True <type 'bool'>
               1e-09 >= 123456789 = False <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               1e-09 + 12345678901234567890123456789 = 1.23456789012e+28 <type 'float'>
               1e-09 - 12345678901234567890123456789 = -1.23456789012e+28 <type 'float'>
               1e-09 * 12345678901234567890123456789 = 1.23456789012e+19 <type 'float'>
               1e-09 / 12345678901234567890123456789 = 8.1000000729e-38 <type 'float'>
skipping pow of really big number
               1e-09 % 12345678901234567890123456789 = 1e-09 <type 'float'>
               1e-09 < 12345678901234567890123456789 = True <type 'bool'>
               1e-09 = 12345678901234567890123456789 = False <type 'bool'>
               1e-09 > 12345678901234567890123456789 = False <type 'bool'>
               1e-09 <= 12345678901234567890123456789 = True <type 'bool'>
               1e-09 != 12345678901234567890123456789 = True <type 'bool'>
               1e-09 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'float'> -1e-09
     Op 2 :::  <type 'int'> 1
               -1e-09 + 1 = 0.999999999 <type 'float'>
               -1e-09 - 1 = -1.000000001 <type 'float'>
               -1e-09 * 1 = -1e-09 <type 'float'>
               -1e-09 / 1 = -1e-09 <type 'float'>
               -1e-09 ** 1 = -1e-09 <type 'float'>
               -1e-09 % 1 = 0.999999999 <type 'float'>
               -1e-09 < 1 = True <type 'bool'>
               -1e-09 = 1 = False <type 'bool'>
               -1e-09 > 1 = False <type 'bool'>
               -1e-09 <= 1 = True <type 'bool'>
               -1e-09 != 1 = True <type 'bool'>
               -1e-09 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               -1e-09 + 1.0 = 0.999999999 <type 'float'>
               -1e-09 - 1.0 = -1.000000001 <type 'float'>
               -1e-09 * 1.0 = -1e-09 <type 'float'>
               -1e-09 / 1.0 = -1e-09 <type 'float'>
               -1e-09 ** 1.0 = -1e-09 <type 'float'>
               -1e-09 % 1.0 = 0.999999999 <type 'float'>
               -1e-09 < 1.0 = True <type 'bool'>
               -1e-09 = 1.0 = False <type 'bool'>
               -1e-09 > 1.0 = False <type 'bool'>
               -1e-09 <= 1.0 = True <type 'bool'>
               -1e-09 != 1.0 = True <type 'bool'>
               -1e-09 >= 1.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 1
               -1e-09 + 1 = 0.999999999 <type 'float'>
               -1e-09 - 1 = -1.000000001 <type 'float'>
               -1e-09 * 1 = -1e-09 <type 'float'>
               -1e-09 / 1 = -1e-09 <type 'float'>
               -1e-09 ** 1 = -1e-09 <type 'float'>
               -1e-09 % 1 = 0.999999999 <type 'float'>
               -1e-09 < 1 = True <type 'bool'>
               -1e-09 = 1 = False <type 'bool'>
               -1e-09 > 1 = False <type 'bool'>
               -1e-09 <= 1 = True <type 'bool'>
               -1e-09 != 1 = True <type 'bool'>
               -1e-09 >= 1 = False <type 'bool'>
     Op 2 :::  <type 'int'> -1
               -1e-09 + -1 = -1.000000001 <type 'float'>
               -1e-09 - -1 = 0.999999999 <type 'float'>
               -1e-09 * -1 = 1e-09 <type 'float'>
               -1e-09 / -1 = 1e-09 <type 'float'>
               -1e-09 ** -1 = -1000000000.0 <type 'float'>
               -1e-09 % -1 = -1e-09 <type 'float'>
               -1e-09 < -1 = False <type 'bool'>
               -1e-09 = -1 = False <type 'bool'>
               -1e-09 > -1 = True <type 'bool'>
               -1e-09 <= -1 = False <type 'bool'>
               -1e-09 != -1 = True <type 'bool'>
               -1e-09 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               -1e-09 + -1.0 = -1.000000001 <type 'float'>
               -1e-09 - -1.0 = 0.999999999 <type 'float'>
               -1e-09 * -1.0 = 1e-09 <type 'float'>
               -1e-09 / -1.0 = 1e-09 <type 'float'>
               -1e-09 ** -1.0 = -1000000000.0 <type 'float'>
               -1e-09 % -1.0 = -1e-09 <type 'float'>
               -1e-09 < -1.0 = False <type 'bool'>
               -1e-09 = -1.0 = False <type 'bool'>
               -1e-09 > -1.0 = True <type 'bool'>
               -1e-09 <= -1.0 = False <type 'bool'>
               -1e-09 != -1.0 = True <type 'bool'>
               -1e-09 >= -1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -1
               -1e-09 + -1 = -1.000000001 <type 'float'>
               -1e-09 - -1 = 0.999999999 <type 'float'>
               -1e-09 * -1 = 1e-09 <type 'float'>
               -1e-09 / -1 = 1e-09 <type 'float'>
               -1e-09 ** -1 = -1000000000.0 <type 'float'>
               -1e-09 % -1 = -1e-09 <type 'float'>
               -1e-09 < -1 = False <type 'bool'>
               -1e-09 = -1 = False <type 'bool'>
               -1e-09 > -1 = True <type 'bool'>
               -1e-09 <= -1 = False <type 'bool'>
               -1e-09 != -1 = True <type 'bool'>
               -1e-09 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'int'> 2
               -1e-09 + 2 = 1.999999999 <type 'float'>
               -1e-09 - 2 = -2.000000001 <type 'float'>
               -1e-09 * 2 = -2e-09 <type 'float'>
               -1e-09 / 2 = -5e-10 <type 'float'>
               -1e-09 ** 2 = 1e-18 <type 'float'>
               -1e-09 % 2 = 1.999999999 <type 'float'>
               -1e-09 < 2 = True <type 'bool'>
               -1e-09 = 2 = False <type 'bool'>
               -1e-09 > 2 = False <type 'bool'>
               -1e-09 <= 2 = True <type 'bool'>
               -1e-09 != 2 = True <type 'bool'>
               -1e-09 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               -1e-09 + 2.0 = 1.999999999 <type 'float'>
               -1e-09 - 2.0 = -2.000000001 <type 'float'>
               -1e-09 * 2.0 = -2e-09 <type 'float'>
               -1e-09 / 2.0 = -5e-10 <type 'float'>
               -1e-09 ** 2.0 = 1e-18 <type 'float'>
               -1e-09 % 2.0 = 1.999999999 <type 'float'>
               -1e-09 < 2.0 = True <type 'bool'>
               -1e-09 = 2.0 = False <type 'bool'>
               -1e-09 > 2.0 = False <type 'bool'>
               -1e-09 <= 2.0 = True <type 'bool'>
               -1e-09 != 2.0 = True <type 'bool'>
               -1e-09 >= 2.0 = False <type 'bool'>
     Op 2 :::  <type 'long'> 2
               -1e-09 + 2 = 1.999999999 <type 'float'>
               -1e-09 - 2 = -2.000000001 <type 'float'>
               -1e-09 * 2 = -2e-09 <type 'float'>
               -1e-09 / 2 = -5e-10 <type 'float'>
               -1e-09 ** 2 = 1e-18 <type 'float'>
               -1e-09 % 2 = 1.999999999 <type 'float'>
               -1e-09 < 2 = True <type 'bool'>
               -1e-09 = 2 = False <type 'bool'>
               -1e-09 > 2 = False <type 'bool'>
               -1e-09 <= 2 = True <type 'bool'>
               -1e-09 != 2 = True <type 'bool'>
               -1e-09 >= 2 = False <type 'bool'>
     Op 2 :::  <type 'int'> -2
               -1e-09 + -2 = -2.000000001 <type 'float'>
               -1e-09 - -2 = 1.999999999 <type 'float'>
               -1e-09 * -2 = 2e-09 <type 'float'>
               -1e-09 / -2 = 5e-10 <type 'float'>
               -1e-09 ** -2 = 1e+18 <type 'float'>
               -1e-09 % -2 = -1e-09 <type 'float'>
               -1e-09 < -2 = False <type 'bool'>
               -1e-09 = -2 = False <type 'bool'>
               -1e-09 > -2 = True <type 'bool'>
               -1e-09 <= -2 = False <type 'bool'>
               -1e-09 != -2 = True <type 'bool'>
               -1e-09 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               -1e-09 + -2.0 = -2.000000001 <type 'float'>
               -1e-09 - -2.0 = 1.999999999 <type 'float'>
               -1e-09 * -2.0 = 2e-09 <type 'float'>
               -1e-09 / -2.0 = 5e-10 <type 'float'>
               -1e-09 ** -2.0 = 1e+18 <type 'float'>
               -1e-09 % -2.0 = -1e-09 <type 'float'>
               -1e-09 < -2.0 = False <type 'bool'>
               -1e-09 = -2.0 = False <type 'bool'>
               -1e-09 > -2.0 = True <type 'bool'>
               -1e-09 <= -2.0 = False <type 'bool'>
               -1e-09 != -2.0 = True <type 'bool'>
               -1e-09 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               -1e-09 + -2 = -2.000000001 <type 'float'>
               -1e-09 - -2 = 1.999999999 <type 'float'>
               -1e-09 * -2 = 2e-09 <type 'float'>
               -1e-09 / -2 = 5e-10 <type 'float'>
               -1e-09 ** -2 = 1e+18 <type 'float'>
               -1e-09 % -2 = -1e-09 <type 'float'>
               -1e-09 < -2 = False <type 'bool'>
               -1e-09 = -2 = False <type 'bool'>
               -1e-09 > -2 = True <type 'bool'>
               -1e-09 <= -2 = False <type 'bool'>
               -1e-09 != -2 = True <type 'bool'>
               -1e-09 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               -1e-09 + 1000000000.0 = 1000000000.0 <type 'float'>
               -1e-09 - 1000000000.0 = -1000000000.0 <type 'float'>
               -1e-09 * 1000000000.0 = -1.0 <type 'float'>
               -1e-09 / 1000000000.0 = -1e-18 <type 'float'>
skipping pow of really big number
               -1e-09 % 1000000000.0 = 1000000000.0 <type 'float'>
               -1e-09 < 1000000000.0 = True <type 'bool'>
               -1e-09 = 1000000000.0 = False <type 'bool'>
               -1e-09 > 1000000000.0 = False <type 'bool'>
               -1e-09 <= 1000000000.0 = True <type 'bool'>
               -1e-09 != 1000000000.0 = True <type 'bool'>
               -1e-09 >= 1000000000.0 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               -1e-09 + -1000000000.0 = -1000000000.0 <type 'float'>
               -1e-09 - -1000000000.0 = 1000000000.0 <type 'float'>
               -1e-09 * -1000000000.0 = 1.0 <type 'float'>
               -1e-09 / -1000000000.0 = 1e-18 <type 'float'>
               -1e-09 ** -1000000000.0 = Can't  <type 'float'> ** <type 'float'>
               -1e-09 % -1000000000.0 = -1e-09 <type 'float'>
               -1e-09 < -1000000000.0 = False <type 'bool'>
               -1e-09 = -1000000000.0 = False <type 'bool'>
               -1e-09 > -1000000000.0 = True <type 'bool'>
               -1e-09 <= -1000000000.0 = False <type 'bool'>
               -1e-09 != -1000000000.0 = True <type 'bool'>
               -1e-09 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               -1e-09 + 1e-09 = 0.0 <type 'float'>
               -1e-09 - 1e-09 = -2e-09 <type 'float'>
               -1e-09 * 1e-09 = -1e-18 <type 'float'>
               -1e-09 / 1e-09 = -1.0 <type 'float'>
               -1e-09 ** 1e-09 = Can't  <type 'float'> ** <type 'float'>
               -1e-09 % 1e-09 = 0.0 <type 'float'>
               -1e-09 < 1e-09 = True <type 'bool'>
               -1e-09 = 1e-09 = False <type 'bool'>
               -1e-09 > 1e-09 = False <type 'bool'>
               -1e-09 <= 1e-09 = True <type 'bool'>
               -1e-09 != 1e-09 = True <type 'bool'>
               -1e-09 >= 1e-09 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               -1e-09 + -1e-09 = -2e-09 <type 'float'>
               -1e-09 - -1e-09 = 0.0 <type 'float'>
               -1e-09 * -1e-09 = 1e-18 <type 'float'>
               -1e-09 / -1e-09 = 1.0 <type 'float'>
               -1e-09 ** -1e-09 = Can't  <type 'float'> ** <type 'float'>
               -1e-09 % -1e-09 = 0.0 <type 'float'>
               -1e-09 < -1e-09 = False <type 'bool'>
               -1e-09 = -1e-09 = True <type 'bool'>
               -1e-09 > -1e-09 = False <type 'bool'>
               -1e-09 <= -1e-09 = True <type 'bool'>
               -1e-09 != -1e-09 = False <type 'bool'>
               -1e-09 >= -1e-09 = True <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               -1e-09 + 123456789 = 123456789.0 <type 'float'>
               -1e-09 - 123456789 = -123456789.0 <type 'float'>
               -1e-09 * 123456789 = -0.123456789 <type 'float'>
               -1e-09 / 123456789 = -8.10000007371e-18 <type 'float'>
skipping pow of really big number
               -1e-09 % 123456789 = 123456789.0 <type 'float'>
               -1e-09 < 123456789 = True <type 'bool'>
               -1e-09 = 123456789 = False <type 'bool'>
               -1e-09 > 123456789 = False <type 'bool'>
               -1e-09 <= 123456789 = True <type 'bool'>
               -1e-09 != 123456789 = True <type 'bool'>
               -1e-09 >= 123456789 = False <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               -1e-09 + 12345678901234567890123456789 = 1.23456789012e+28 <type 'float'>
               -1e-09 - 12345678901234567890123456789 = -1.23456789012e+28 <type 'float'>
               -1e-09 * 12345678901234567890123456789 = -1.23456789012e+19 <type 'float'>
               -1e-09 / 12345678901234567890123456789 = -8.1000000729e-38 <type 'float'>
skipping pow of really big number
               -1e-09 % 12345678901234567890123456789 = 1.23456789012e+28 <type 'float'>
               -1e-09 < 12345678901234567890123456789 = True <type 'bool'>
               -1e-09 = 12345678901234567890123456789 = False <type 'bool'>
               -1e-09 > 12345678901234567890123456789 = False <type 'bool'>
               -1e-09 <= 12345678901234567890123456789 = True <type 'bool'>
               -1e-09 != 12345678901234567890123456789 = True <type 'bool'>
               -1e-09 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'long'> 123456789
     Op 2 :::  <type 'int'> 1
               123456789 + 1 = 123456790 <type 'long'>
               123456789 - 1 = 123456788 <type 'long'>
               123456789 * 1 = 123456789 <type 'long'>
               123456789 / 1 = 123456789 <type 'long'>
               123456789 ** 1 = 123456789 <type 'long'>
               123456789 % 1 = 0 <type 'long'>
               123456789 < 1 = False <type 'bool'>
               123456789 = 1 = False <type 'bool'>
               123456789 > 1 = True <type 'bool'>
               123456789 <= 1 = False <type 'bool'>
               123456789 != 1 = True <type 'bool'>
               123456789 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               123456789 + 1.0 = 123456790.0 <type 'float'>
               123456789 - 1.0 = 123456788.0 <type 'float'>
               123456789 * 1.0 = 123456789.0 <type 'float'>
               123456789 / 1.0 = 123456789.0 <type 'float'>
               123456789 ** 1.0 = 123456789.0 <type 'float'>
               123456789 % 1.0 = 0.0 <type 'float'>
               123456789 < 1.0 = False <type 'bool'>
               123456789 = 1.0 = False <type 'bool'>
               123456789 > 1.0 = True <type 'bool'>
               123456789 <= 1.0 = False <type 'bool'>
               123456789 != 1.0 = True <type 'bool'>
               123456789 >= 1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> 1
               123456789 + 1 = 123456790 <type 'long'>
               123456789 - 1 = 123456788 <type 'long'>
               123456789 * 1 = 123456789 <type 'long'>
               123456789 / 1 = 123456789 <type 'long'>
               123456789 ** 1 = 123456789 <type 'long'>
               123456789 % 1 = 0 <type 'long'>
               123456789 < 1 = False <type 'bool'>
               123456789 = 1 = False <type 'bool'>
               123456789 > 1 = True <type 'bool'>
               123456789 <= 1 = False <type 'bool'>
               123456789 != 1 = True <type 'bool'>
               123456789 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'int'> -1
               123456789 + -1 = 123456788 <type 'long'>
               123456789 - -1 = 123456790 <type 'long'>
               123456789 * -1 = -123456789 <type 'long'>
               123456789 / -1 = -123456789 <type 'long'>
               123456789 ** -1 = 8.10000007371e-09 <type 'float'>
               123456789 % -1 = 0 <type 'long'>
               123456789 < -1 = False <type 'bool'>
               123456789 = -1 = False <type 'bool'>
               123456789 > -1 = True <type 'bool'>
               123456789 <= -1 = False <type 'bool'>
               123456789 != -1 = True <type 'bool'>
               123456789 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               123456789 + -1.0 = 123456788.0 <type 'float'>
               123456789 - -1.0 = 123456790.0 <type 'float'>
               123456789 * -1.0 = -123456789.0 <type 'float'>
               123456789 / -1.0 = -123456789.0 <type 'float'>
               123456789 ** -1.0 = 8.10000007371e-09 <type 'float'>
               123456789 % -1.0 = 0.0 <type 'float'>
               123456789 < -1.0 = False <type 'bool'>
               123456789 = -1.0 = False <type 'bool'>
               123456789 > -1.0 = True <type 'bool'>
               123456789 <= -1.0 = False <type 'bool'>
               123456789 != -1.0 = True <type 'bool'>
               123456789 >= -1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -1
               123456789 + -1 = 123456788 <type 'long'>
               123456789 - -1 = 123456790 <type 'long'>
               123456789 * -1 = -123456789 <type 'long'>
               123456789 / -1 = -123456789 <type 'long'>
               123456789 ** -1 = 8.10000007371e-09 <type 'float'>
               123456789 % -1 = 0 <type 'long'>
               123456789 < -1 = False <type 'bool'>
               123456789 = -1 = False <type 'bool'>
               123456789 > -1 = True <type 'bool'>
               123456789 <= -1 = False <type 'bool'>
               123456789 != -1 = True <type 'bool'>
               123456789 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'int'> 2
               123456789 + 2 = 123456791 <type 'long'>
               123456789 - 2 = 123456787 <type 'long'>
               123456789 * 2 = 246913578 <type 'long'>
               123456789 / 2 = 61728394 <type 'long'>
               123456789 ** 2 = 15241578750190521 <type 'long'>
               123456789 % 2 = 1 <type 'long'>
               123456789 < 2 = False <type 'bool'>
               123456789 = 2 = False <type 'bool'>
               123456789 > 2 = True <type 'bool'>
               123456789 <= 2 = False <type 'bool'>
               123456789 != 2 = True <type 'bool'>
               123456789 >= 2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               123456789 + 2.0 = 123456791.0 <type 'float'>
               123456789 - 2.0 = 123456787.0 <type 'float'>
               123456789 * 2.0 = 246913578.0 <type 'float'>
               123456789 / 2.0 = 61728394.5 <type 'float'>
               123456789 ** 2.0 = 1.52415787502e+16 <type 'float'>
               123456789 % 2.0 = 1.0 <type 'float'>
               123456789 < 2.0 = False <type 'bool'>
               123456789 = 2.0 = False <type 'bool'>
               123456789 > 2.0 = True <type 'bool'>
               123456789 <= 2.0 = False <type 'bool'>
               123456789 != 2.0 = True <type 'bool'>
               123456789 >= 2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> 2
               123456789 + 2 = 123456791 <type 'long'>
               123456789 - 2 = 123456787 <type 'long'>
               123456789 * 2 = 246913578 <type 'long'>
               123456789 / 2 = 61728394 <type 'long'>
               123456789 ** 2 = 15241578750190521 <type 'long'>
               123456789 % 2 = 1 <type 'long'>
               123456789 < 2 = False <type 'bool'>
               123456789 = 2 = False <type 'bool'>
               123456789 > 2 = True <type 'bool'>
               123456789 <= 2 = False <type 'bool'>
               123456789 != 2 = True <type 'bool'>
               123456789 >= 2 = True <type 'bool'>
     Op 2 :::  <type 'int'> -2
               123456789 + -2 = 123456787 <type 'long'>
               123456789 - -2 = 123456791 <type 'long'>
               123456789 * -2 = -246913578 <type 'long'>
               123456789 / -2 = -61728395 <type 'long'>
               123456789 ** -2 = 6.56100011941e-17 <type 'float'>
               123456789 % -2 = -1 <type 'long'>
               123456789 < -2 = False <type 'bool'>
               123456789 = -2 = False <type 'bool'>
               123456789 > -2 = True <type 'bool'>
               123456789 <= -2 = False <type 'bool'>
               123456789 != -2 = True <type 'bool'>
               123456789 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               123456789 + -2.0 = 123456787.0 <type 'float'>
               123456789 - -2.0 = 123456791.0 <type 'float'>
               123456789 * -2.0 = -246913578.0 <type 'float'>
               123456789 / -2.0 = -61728394.5 <type 'float'>
               123456789 ** -2.0 = 6.56100011941e-17 <type 'float'>
               123456789 % -2.0 = -1.0 <type 'float'>
               123456789 < -2.0 = False <type 'bool'>
               123456789 = -2.0 = False <type 'bool'>
               123456789 > -2.0 = True <type 'bool'>
               123456789 <= -2.0 = False <type 'bool'>
               123456789 != -2.0 = True <type 'bool'>
               123456789 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               123456789 + -2 = 123456787 <type 'long'>
               123456789 - -2 = 123456791 <type 'long'>
               123456789 * -2 = -246913578 <type 'long'>
               123456789 / -2 = -61728395 <type 'long'>
               123456789 ** -2 = 6.56100011941e-17 <type 'float'>
               123456789 % -2 = -1 <type 'long'>
               123456789 < -2 = False <type 'bool'>
               123456789 = -2 = False <type 'bool'>
               123456789 > -2 = True <type 'bool'>
               123456789 <= -2 = False <type 'bool'>
               123456789 != -2 = True <type 'bool'>
               123456789 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               123456789 + 1000000000.0 = 1123456789.0 <type 'float'>
               123456789 - 1000000000.0 = -876543211.0 <type 'float'>
               123456789 * 1000000000.0 = 1.23456789e+17 <type 'float'>
               123456789 / 1000000000.0 = 0.123456789 <type 'float'>
skipping pow of really big number
               123456789 % 1000000000.0 = 123456789.0 <type 'float'>
               123456789 < 1000000000.0 = True <type 'bool'>
               123456789 = 1000000000.0 = False <type 'bool'>
               123456789 > 1000000000.0 = False <type 'bool'>
               123456789 <= 1000000000.0 = True <type 'bool'>
               123456789 != 1000000000.0 = True <type 'bool'>
               123456789 >= 1000000000.0 = False <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               123456789 + -1000000000.0 = -876543211.0 <type 'float'>
               123456789 - -1000000000.0 = 1123456789.0 <type 'float'>
               123456789 * -1000000000.0 = -1.23456789e+17 <type 'float'>
               123456789 / -1000000000.0 = -0.123456789 <type 'float'>
               123456789 ** -1000000000.0 = 0.0 <type 'float'>
               123456789 % -1000000000.0 = -876543211.0 <type 'float'>
               123456789 < -1000000000.0 = False <type 'bool'>
               123456789 = -1000000000.0 = False <type 'bool'>
               123456789 > -1000000000.0 = True <type 'bool'>
               123456789 <= -1000000000.0 = False <type 'bool'>
               123456789 != -1000000000.0 = True <type 'bool'>
               123456789 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               123456789 + 1e-09 = 123456789.0 <type 'float'>
               123456789 - 1e-09 = 123456789.0 <type 'float'>
               123456789 * 1e-09 = 0.123456789 <type 'float'>
               123456789 / 1e-09 = 1.23456789e+17 <type 'float'>
               123456789 ** 1e-09 = 1.00000001863 <type 'float'>
               123456789 % 1e-09 = 3.10914704813e-10 <type 'float'>
               123456789 < 1e-09 = False <type 'bool'>
               123456789 = 1e-09 = False <type 'bool'>
               123456789 > 1e-09 = True <type 'bool'>
               123456789 <= 1e-09 = False <type 'bool'>
               123456789 != 1e-09 = True <type 'bool'>
               123456789 >= 1e-09 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               123456789 + -1e-09 = 123456789.0 <type 'float'>
               123456789 - -1e-09 = 123456789.0 <type 'float'>
               123456789 * -1e-09 = -0.123456789 <type 'float'>
               123456789 / -1e-09 = -1.23456789e+17 <type 'float'>
               123456789 ** -1e-09 = 0.999999981369 <type 'float'>
               123456789 % -1e-09 = -6.89085295187e-10 <type 'float'>
               123456789 < -1e-09 = False <type 'bool'>
               123456789 = -1e-09 = False <type 'bool'>
               123456789 > -1e-09 = True <type 'bool'>
               123456789 <= -1e-09 = False <type 'bool'>
               123456789 != -1e-09 = True <type 'bool'>
               123456789 >= -1e-09 = True <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               123456789 + 123456789 = 246913578 <type 'long'>
               123456789 - 123456789 = 0 <type 'long'>
               123456789 * 123456789 = 15241578750190521 <type 'long'>
               123456789 / 123456789 = 1 <type 'long'>
skipping pow of really big number
               123456789 % 123456789 = 0 <type 'long'>
               123456789 < 123456789 = False <type 'bool'>
               123456789 = 123456789 = True <type 'bool'>
               123456789 > 123456789 = False <type 'bool'>
               123456789 <= 123456789 = True <type 'bool'>
               123456789 != 123456789 = False <type 'bool'>
               123456789 >= 123456789 = True <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               123456789 + 12345678901234567890123456789 = 12345678901234567890246913578 <type 'long'>
               123456789 - 12345678901234567890123456789 = -12345678901234567890000000000 <type 'long'>
               123456789 * 12345678901234567890123456789 = 1524157875171467887517146788750190521 <type 'long'>
               123456789 / 12345678901234567890123456789 = 0 <type 'long'>
skipping pow of really big number
               123456789 % 12345678901234567890123456789 = 123456789 <type 'long'>
               123456789 < 12345678901234567890123456789 = True <type 'bool'>
               123456789 = 12345678901234567890123456789 = False <type 'bool'>
               123456789 > 12345678901234567890123456789 = False <type 'bool'>
               123456789 <= 12345678901234567890123456789 = True <type 'bool'>
               123456789 != 12345678901234567890123456789 = True <type 'bool'>
               123456789 >= 12345678901234567890123456789 = False <type 'bool'>
Op 1 :::  <type 'long'> 12345678901234567890123456789
     Op 2 :::  <type 'int'> 1
               12345678901234567890123456789 + 1 = 12345678901234567890123456790 <type 'long'>
               12345678901234567890123456789 - 1 = 12345678901234567890123456788 <type 'long'>
               12345678901234567890123456789 * 1 = 12345678901234567890123456789 <type 'long'>
               12345678901234567890123456789 / 1 = 12345678901234567890123456789 <type 'long'>
               12345678901234567890123456789 ** 1 = 12345678901234567890123456789 <type 'long'>
               12345678901234567890123456789 % 1 = 0 <type 'long'>
               12345678901234567890123456789 < 1 = False <type 'bool'>
               12345678901234567890123456789 = 1 = False <type 'bool'>
               12345678901234567890123456789 > 1 = True <type 'bool'>
               12345678901234567890123456789 <= 1 = False <type 'bool'>
               12345678901234567890123456789 != 1 = True <type 'bool'>
               12345678901234567890123456789 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1.0
               12345678901234567890123456789 + 1.0 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 - 1.0 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 * 1.0 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 / 1.0 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 ** 1.0 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 % 1.0 = 0.0 <type 'float'>
               12345678901234567890123456789 < 1.0 = False <type 'bool'>
               12345678901234567890123456789 = 1.0 = False <type 'bool'>
               12345678901234567890123456789 > 1.0 = True <type 'bool'>
               12345678901234567890123456789 <= 1.0 = False <type 'bool'>
               12345678901234567890123456789 != 1.0 = True <type 'bool'>
               12345678901234567890123456789 >= 1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> 1
               12345678901234567890123456789 + 1 = 12345678901234567890123456790 <type 'long'>
               12345678901234567890123456789 - 1 = 12345678901234567890123456788 <type 'long'>
               12345678901234567890123456789 * 1 = 12345678901234567890123456789 <type 'long'>
               12345678901234567890123456789 / 1 = 12345678901234567890123456789 <type 'long'>
               12345678901234567890123456789 ** 1 = 12345678901234567890123456789 <type 'long'>
               12345678901234567890123456789 % 1 = 0 <type 'long'>
               12345678901234567890123456789 < 1 = False <type 'bool'>
               12345678901234567890123456789 = 1 = False <type 'bool'>
               12345678901234567890123456789 > 1 = True <type 'bool'>
               12345678901234567890123456789 <= 1 = False <type 'bool'>
               12345678901234567890123456789 != 1 = True <type 'bool'>
               12345678901234567890123456789 >= 1 = True <type 'bool'>
     Op 2 :::  <type 'int'> -1
               12345678901234567890123456789 + -1 = 12345678901234567890123456788 <type 'long'>
               12345678901234567890123456789 - -1 = 12345678901234567890123456790 <type 'long'>
               12345678901234567890123456789 * -1 = -12345678901234567890123456789 <type 'long'>
               12345678901234567890123456789 / -1 = -12345678901234567890123456789 <type 'long'>
               12345678901234567890123456789 ** -1 = 8.1000000729e-29 <type 'float'>
               12345678901234567890123456789 % -1 = 0 <type 'long'>
               12345678901234567890123456789 < -1 = False <type 'bool'>
               12345678901234567890123456789 = -1 = False <type 'bool'>
               12345678901234567890123456789 > -1 = True <type 'bool'>
               12345678901234567890123456789 <= -1 = False <type 'bool'>
               12345678901234567890123456789 != -1 = True <type 'bool'>
               12345678901234567890123456789 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1.0
               12345678901234567890123456789 + -1.0 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 - -1.0 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 * -1.0 = -1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 / -1.0 = -1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 ** -1.0 = 8.1000000729e-29 <type 'float'>
               12345678901234567890123456789 % -1.0 = 0.0 <type 'float'>
               12345678901234567890123456789 < -1.0 = False <type 'bool'>
               12345678901234567890123456789 = -1.0 = False <type 'bool'>
               12345678901234567890123456789 > -1.0 = True <type 'bool'>
               12345678901234567890123456789 <= -1.0 = False <type 'bool'>
               12345678901234567890123456789 != -1.0 = True <type 'bool'>
               12345678901234567890123456789 >= -1.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -1
               12345678901234567890123456789 + -1 = 12345678901234567890123456788 <type 'long'>
               12345678901234567890123456789 - -1 = 12345678901234567890123456790 <type 'long'>
               12345678901234567890123456789 * -1 = -12345678901234567890123456789 <type 'long'>
               12345678901234567890123456789 / -1 = -12345678901234567890123456789 <type 'long'>
               12345678901234567890123456789 ** -1 = 8.1000000729e-29 <type 'float'>
               12345678901234567890123456789 % -1 = 0 <type 'long'>
               12345678901234567890123456789 < -1 = False <type 'bool'>
               12345678901234567890123456789 = -1 = False <type 'bool'>
               12345678901234567890123456789 > -1 = True <type 'bool'>
               12345678901234567890123456789 <= -1 = False <type 'bool'>
               12345678901234567890123456789 != -1 = True <type 'bool'>
               12345678901234567890123456789 >= -1 = True <type 'bool'>
     Op 2 :::  <type 'int'> 2
               12345678901234567890123456789 + 2 = 12345678901234567890123456791 <type 'long'>
               12345678901234567890123456789 - 2 = 12345678901234567890123456787 <type 'long'>
               12345678901234567890123456789 * 2 = 24691357802469135780246913578 <type 'long'>
               12345678901234567890123456789 / 2 = 6172839450617283945061728394 <type 'long'>
               12345678901234567890123456789 ** 2 = 152415787532388367504953515625361987875019051998750190521 <type 'long'>
               12345678901234567890123456789 % 2 = 1 <type 'long'>
               12345678901234567890123456789 < 2 = False <type 'bool'>
               12345678901234567890123456789 = 2 = False <type 'bool'>
               12345678901234567890123456789 > 2 = True <type 'bool'>
               12345678901234567890123456789 <= 2 = False <type 'bool'>
               12345678901234567890123456789 != 2 = True <type 'bool'>
               12345678901234567890123456789 >= 2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 2.0
               12345678901234567890123456789 + 2.0 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 - 2.0 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 * 2.0 = 2.46913578025e+28 <type 'float'>
               12345678901234567890123456789 / 2.0 = 6.17283945062e+27 <type 'float'>
               12345678901234567890123456789 ** 2.0 = 1.52415787532e+56 <type 'float'>
               12345678901234567890123456789 % 2.0 = 0.0 <type 'float'>
               12345678901234567890123456789 < 2.0 = False <type 'bool'>
               12345678901234567890123456789 = 2.0 = False <type 'bool'>
               12345678901234567890123456789 > 2.0 = True <type 'bool'>
               12345678901234567890123456789 <= 2.0 = False <type 'bool'>
               12345678901234567890123456789 != 2.0 = True <type 'bool'>
               12345678901234567890123456789 >= 2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> 2
               12345678901234567890123456789 + 2 = 12345678901234567890123456791 <type 'long'>
               12345678901234567890123456789 - 2 = 12345678901234567890123456787 <type 'long'>
               12345678901234567890123456789 * 2 = 24691357802469135780246913578 <type 'long'>
               12345678901234567890123456789 / 2 = 6172839450617283945061728394 <type 'long'>
               12345678901234567890123456789 ** 2 = 152415787532388367504953515625361987875019051998750190521 <type 'long'>
               12345678901234567890123456789 % 2 = 1 <type 'long'>
               12345678901234567890123456789 < 2 = False <type 'bool'>
               12345678901234567890123456789 = 2 = False <type 'bool'>
               12345678901234567890123456789 > 2 = True <type 'bool'>
               12345678901234567890123456789 <= 2 = False <type 'bool'>
               12345678901234567890123456789 != 2 = True <type 'bool'>
               12345678901234567890123456789 >= 2 = True <type 'bool'>
     Op 2 :::  <type 'int'> -2
               12345678901234567890123456789 + -2 = 12345678901234567890123456787 <type 'long'>
               12345678901234567890123456789 - -2 = 12345678901234567890123456791 <type 'long'>
               12345678901234567890123456789 * -2 = -24691357802469135780246913578 <type 'long'>
               12345678901234567890123456789 / -2 = -6172839450617283945061728395 <type 'long'>
               12345678901234567890123456789 ** -2 = 6.5610001181e-57 <type 'float'>
               12345678901234567890123456789 % -2 = -1 <type 'long'>
               12345678901234567890123456789 < -2 = False <type 'bool'>
               12345678901234567890123456789 = -2 = False <type 'bool'>
               12345678901234567890123456789 > -2 = True <type 'bool'>
               12345678901234567890123456789 <= -2 = False <type 'bool'>
               12345678901234567890123456789 != -2 = True <type 'bool'>
               12345678901234567890123456789 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> -2.0
               12345678901234567890123456789 + -2.0 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 - -2.0 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 * -2.0 = -2.46913578025e+28 <type 'float'>
               12345678901234567890123456789 / -2.0 = -6.17283945062e+27 <type 'float'>
               12345678901234567890123456789 ** -2.0 = 6.5610001181e-57 <type 'float'>
               12345678901234567890123456789 % -2.0 = 0.0 <type 'float'>
               12345678901234567890123456789 < -2.0 = False <type 'bool'>
               12345678901234567890123456789 = -2.0 = False <type 'bool'>
               12345678901234567890123456789 > -2.0 = True <type 'bool'>
               12345678901234567890123456789 <= -2.0 = False <type 'bool'>
               12345678901234567890123456789 != -2.0 = True <type 'bool'>
               12345678901234567890123456789 >= -2.0 = True <type 'bool'>
     Op 2 :::  <type 'long'> -2
               12345678901234567890123456789 + -2 = 12345678901234567890123456787 <type 'long'>
               12345678901234567890123456789 - -2 = 12345678901234567890123456791 <type 'long'>
               12345678901234567890123456789 * -2 = -24691357802469135780246913578 <type 'long'>
               12345678901234567890123456789 / -2 = -6172839450617283945061728395 <type 'long'>
               12345678901234567890123456789 ** -2 = 6.5610001181e-57 <type 'float'>
               12345678901234567890123456789 % -2 = -1 <type 'long'>
               12345678901234567890123456789 < -2 = False <type 'bool'>
               12345678901234567890123456789 = -2 = False <type 'bool'>
               12345678901234567890123456789 > -2 = True <type 'bool'>
               12345678901234567890123456789 <= -2 = False <type 'bool'>
               12345678901234567890123456789 != -2 = True <type 'bool'>
               12345678901234567890123456789 >= -2 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1000000000.0
               12345678901234567890123456789 + 1000000000.0 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 - 1000000000.0 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 * 1000000000.0 = 1.23456789012e+37 <type 'float'>
               12345678901234567890123456789 / 1000000000.0 = 1.23456789012e+19 <type 'float'>
skipping pow of really big number
               12345678901234567890123456789 % 1000000000.0 = 576610816.0 <type 'float'>
               12345678901234567890123456789 < 1000000000.0 = False <type 'bool'>
               12345678901234567890123456789 = 1000000000.0 = False <type 'bool'>
               12345678901234567890123456789 > 1000000000.0 = True <type 'bool'>
               12345678901234567890123456789 <= 1000000000.0 = False <type 'bool'>
               12345678901234567890123456789 != 1000000000.0 = True <type 'bool'>
               12345678901234567890123456789 >= 1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1000000000.0
               12345678901234567890123456789 + -1000000000.0 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 - -1000000000.0 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 * -1000000000.0 = -1.23456789012e+37 <type 'float'>
               12345678901234567890123456789 / -1000000000.0 = -1.23456789012e+19 <type 'float'>
               12345678901234567890123456789 ** -1000000000.0 = 0.0 <type 'float'>
               12345678901234567890123456789 % -1000000000.0 = -423389184.0 <type 'float'>
               12345678901234567890123456789 < -1000000000.0 = False <type 'bool'>
               12345678901234567890123456789 = -1000000000.0 = False <type 'bool'>
               12345678901234567890123456789 > -1000000000.0 = True <type 'bool'>
               12345678901234567890123456789 <= -1000000000.0 = False <type 'bool'>
               12345678901234567890123456789 != -1000000000.0 = True <type 'bool'>
               12345678901234567890123456789 >= -1000000000.0 = True <type 'bool'>
     Op 2 :::  <type 'float'> 1e-09
               12345678901234567890123456789 + 1e-09 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 - 1e-09 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 * 1e-09 = 1.23456789012e+19 <type 'float'>
               12345678901234567890123456789 / 1e-09 = 1.23456789012e+37 <type 'float'>
               12345678901234567890123456789 ** 1e-09 = 1.00000006468 <type 'float'>
               12345678901234567890123456789 % 1e-09 = 3.57944476856e-10 <type 'float'>
               12345678901234567890123456789 < 1e-09 = False <type 'bool'>
               12345678901234567890123456789 = 1e-09 = False <type 'bool'>
               12345678901234567890123456789 > 1e-09 = True <type 'bool'>
               12345678901234567890123456789 <= 1e-09 = False <type 'bool'>
               12345678901234567890123456789 != 1e-09 = True <type 'bool'>
               12345678901234567890123456789 >= 1e-09 = True <type 'bool'>
     Op 2 :::  <type 'float'> -1e-09
               12345678901234567890123456789 + -1e-09 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 - -1e-09 = 1.23456789012e+28 <type 'float'>
               12345678901234567890123456789 * -1e-09 = -1.23456789012e+19 <type 'float'>
               12345678901234567890123456789 / -1e-09 = -1.23456789012e+37 <type 'float'>
               12345678901234567890123456789 ** -1e-09 = 0.999999935317 <type 'float'>
               12345678901234567890123456789 % -1e-09 = -6.42055523144e-10 <type 'float'>
               12345678901234567890123456789 < -1e-09 = False <type 'bool'>
               12345678901234567890123456789 = -1e-09 = False <type 'bool'>
               12345678901234567890123456789 > -1e-09 = True <type 'bool'>
               12345678901234567890123456789 <= -1e-09 = False <type 'bool'>
               12345678901234567890123456789 != -1e-09 = True <type 'bool'>
               12345678901234567890123456789 >= -1e-09 = True <type 'bool'>
     Op 2 :::  <type 'long'> 123456789
               12345678901234567890123456789 + 123456789 = 12345678901234567890246913578 <type 'long'>
               12345678901234567890123456789 - 123456789 = 12345678901234567890000000000 <type 'long'>
               12345678901234567890123456789 * 123456789 = 1524157875171467887517146788750190521 <type 'long'>
               12345678901234567890123456789 / 123456789 = 100000000010000000001 <type 'long'>
skipping pow of really big number
               12345678901234567890123456789 % 123456789 = 0 <type 'long'>
               12345678901234567890123456789 < 123456789 = False <type 'bool'>
               12345678901234567890123456789 = 123456789 = False <type 'bool'>
               12345678901234567890123456789 > 123456789 = True <type 'bool'>
               12345678901234567890123456789 <= 123456789 = False <type 'bool'>
               12345678901234567890123456789 != 123456789 = True <type 'bool'>
               12345678901234567890123456789 >= 123456789 = True <type 'bool'>
     Op 2 :::  <type 'long'> 12345678901234567890123456789
               12345678901234567890123456789 + 12345678901234567890123456789 = 24691357802469135780246913578 <type 'long'>
               12345678901234567890123456789 - 12345678901234567890123456789 = 0 <type 'long'>
               12345678901234567890123456789 * 12345678901234567890123456789 = 152415787532388367504953515625361987875019051998750190521 <type 'long'>
               12345678901234567890123456789 / 12345678901234567890123456789 = 1 <type 'long'>
skipping pow of really big number
               12345678901234567890123456789 % 12345678901234567890123456789 = 0 <type 'long'>
               12345678901234567890123456789 < 12345678901234567890123456789 = False <type 'bool'>
               12345678901234567890123456789 = 12345678901234567890123456789 = True <type 'bool'>
               12345678901234567890123456789 > 12345678901234567890123456789 = False <type 'bool'>
               12345678901234567890123456789 <= 12345678901234567890123456789 = True <type 'bool'>
               12345678901234567890123456789 != 12345678901234567890123456789 = False <type 'bool'>
               12345678901234567890123456789 >= 12345678901234567890123456789 = True <type 'bool'>
)
FAILED: (test/run/t352.py)
-----
class Silly:
    def __init__(self, x):
        self.h = x

    def __hash__(self):
        return 3

    def __str__(self):
        return str(self.h)

a = Silly(1)
b = Silly(2)
c = Silly(3)

print hash(a)
print hash(b)
print hash(c)

-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes exactly 2 arguments (5 given) on line 11

-----
WANTED:
-----
3
3
3

-----
DIFF:
-----
len got: 80

len wanted: 6

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: __init__() takes exactly 2 arguments (5 given) on line 11
) expect: 51 (3
3
3
)
FAILED: (test/run/t354.py)
-----
class A:
    val1 = "A"

    def __init__(self, v):
        self.val1 = v

    def do(self):
        print self.__class__.val1
        print self.val1

    def update(self, newv):
        self.val1 = newv

print "===A==="
a = A("sa")
a.do()
a.update("sa-new")
a.do()

-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes exactly 2 arguments (5 given) on line 15

-----
WANTED:
-----
===A===
A
sa
A
sa-new

-----
DIFF:
-----
len got: 80

len wanted: 22

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: __init__() takes exactly 2 arguments (5 given) on line 15
) expect: 61 (===A===
A
sa
A
sa-new
)
FAILED: (test/run/t355.py)
-----
class Foo:
    def __init__(self, x):
        self.lst = [x]

    def __eq__(self, other):
        return self.lst == other.lst

f1 = Foo(3)
f2 = Foo(3)
f3 = Foo(4)

print f1 == f1
print f1 == f2
print f1 != f3
print f1 != f2

-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes exactly 2 arguments (5 given) on line 8

-----
WANTED:
-----
True
True
True
True

-----
DIFF:
-----
len got: 79

len wanted: 20

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: __init__() takes exactly 2 arguments (5 given) on line 8
) expect: 84 (True
True
True
True
)
FAILED: (test/run/t358.py)
-----
class obj:
    def __init__(self):
        self.num = 2

    def delete(self):
        print self.num

    def abc(self):
        print self.num + 1

a = obj()
a.abc()
a.delete()

-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes exactly 1 arguments (5 given) on line 11

-----
WANTED:
-----
3
2

-----
DIFF:
-----
len got: 80

len wanted: 4

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: __init__() takes exactly 1 arguments (5 given) on line 11
) expect: 51 (3
2
)
FAILED: (test/run/t374.py)
-----
import re

def f(a, b=3, c=None):
    print a, b, c
    
f(1, c=4)
print re.split("a", "A stitch in time saves nine.", flags=re.IGNORECASE)
print re.findall(string="A stitch in time saves nine.", flags=re.IGNORECASE, pattern="a")



-----
GOT:
-----
EXCEPTION: NameError: name 'b' is not defined on line 4

-----
WANTED:
-----
1 3 4
['', ' stitch in time s', 'ves nine.']
['A', 'a']

-----
DIFF:
-----
len got: 56

len wanted: 56

firstdiff at: 0 got: 69 (EXCEPTION: NameError: name 'b' is not defined on line 4
) expect: 49 (1 3 4
['', ' stitch in time s', 'ves nine.']
['A', 'a']
)
FAILED: (test/run/t376.py)
-----
class HasLen:
    def __init__(self, l):
        self.l = l

    def __len__(self):
        return self.l

class SubLen(HasLen):
    def __init__(self, l):
        HasLen.__init__(self, l)
        
class NoLen:
    def __init__(self, l):
        self.l = l

h = HasLen(42)
print len(h)
h2 = SubLen(43)
print len(h2)
h3 = NoLen(44)
print len(h3)

-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes exactly 2 arguments (5 given) on line 16

-----
WANTED:
-----
EXCEPTION: AttributeError: NoLen instance has no attribute '__len__' on line 21

-----
DIFF:
-----
len got: 80

len wanted: 80

firstdiff at: 11 got: 84 (TypeError: __init__() takes exactly 2 arguments (5 given) on line 16
) expect: 65 (AttributeError: NoLen instance has no attribute '__len__' on line 21
)
FAILED: (test/run/t384.py)
-----
class Foo:
    def __init__(self):
        self.x = 3

f = Foo()
None[4]
f[4]

-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes exactly 1 arguments (5 given) on line 5

-----
WANTED:
-----
EXCEPTION: TypeError: 'NoneType' does not support indexing on line 6

-----
DIFF:
-----
len got: 79

len wanted: 69

firstdiff at: 22 got: 95 (__init__() takes exactly 1 arguments (5 given) on line 5
) expect: 39 ('NoneType' does not support indexing on line 6
)
FAILED: (test/run/t392.py)
-----
# Ship class
class Ship:
    def __init__(self, name):
        self.name = name
        self.thrust = False

    def thrust(self):
          self.thrust = True
          print "Thrust", self.thrust

my_ship = Ship("a_name")
my_ship.thrust()

-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes exactly 2 arguments (5 given) on line 11

-----
WANTED:
-----
EXCEPTION: TypeError: 'bool' object is not callable on line 12

-----
DIFF:
-----
len got: 80

len wanted: 63

firstdiff at: 22 got: 95 (__init__() takes exactly 2 arguments (5 given) on line 11
) expect: 39 ('bool' object is not callable on line 12
)
FAILED: (test/run/t407.py)
-----
class A(object):
    def __init__(self):
        self.a = 1
        self.b = 2
        self.c = 3

class B(A):
    def __init__(self):
        A.__init__(self)        
        self.d = 4

class C(B):
    def __init__(self):
        B.__init__(self)
    def __dir__(self):
        return ['a','b','c','d']   

print dir(A())
print dir(B())
print dir(C())


-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes exactly 1 arguments (5 given) on line 18

-----
WANTED:
-----
['__init__', '__module__', 'a', 'b', 'c']
['__init__', '__module__', 'a', 'b', 'c', 'd']
['__dir__', '__init__', '__module__', 'a', 'b', 'c', 'd']

-----
DIFF:
-----
len got: 80

len wanted: 147

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: __init__() takes exactly 1 arguments (5 given) on line 18
) expect: 91 (['__init__', '__module__', 'a', 'b', 'c']
['__init__', '__module__', 'a', 'b', 'c', 'd']
['__dir__', '__init__', '__module__', 'a', 'b', 'c', 'd']
)
FAILED: (test/run/t408.py)
-----
def enumerate_helper(iterable,start=0):
    x = []
    for i in enumerate(iterable,start):
        x.append(i)
    print x

# list
enumerate_helper([1,2,3,4])
enumerate_helper([1,2,3,4],10)

# string 
enumerate_helper("hello")
enumerate_helper("WORLD",2)

# tuple
enumerate_helper((1,2,3,))
enumerate_helper((1,2,3,),-1)

# dict
enumerate_helper({1:'a',2:'b',3:'c'})
enumerate_helper({1:'a',2:'b',3:'c'},5)

-----
GOT:
-----
EXCEPTION: NameError: name 'start' is not defined on line 3

-----
WANTED:
-----
[(0, 1), (1, 2), (2, 3), (3, 4)]
[(10, 1), (11, 2), (12, 3), (13, 4)]
[(0, 'h'), (1, 'e'), (2, 'l'), (3, 'l'), (4, 'o')]
[(2, 'W'), (3, 'O'), (4, 'R'), (5, 'L'), (6, 'D')]
[(0, 1), (1, 2), (2, 3)]
[(-1, 1), (0, 2), (1, 3)]
[(0, 1), (1, 2), (2, 3)]
[(5, 1), (6, 2), (7, 3)]

-----
DIFF:
-----
len got: 60

len wanted: 273

firstdiff at: 0 got: 69 (EXCEPTION: NameError: name 'start' is not defined on line 3
) expect: 91 ([(0, 1), (1, 2), (2, 3), (3, 4)]
[(10, 1), (11, 2), (12, 3), (13, 4)]
[(0, 'h'), (1, 'e'), (2, 'l'), (3, 'l'), (4, 'o')]
[(2, 'W'), (3, 'O'), (4, 'R'), (5, 'L'), (6, 'D')]
[(0, 1), (1, 2), (2, 3)]
[(-1, 1), (0, 2), (1, 3)]
[(0, 1), (1, 2), (2, 3)]
[(5, 1), (6, 2), (7, 3)]
)
FAILED: (test/run/t409.py)
-----
print float(), type(float(0))

# integers
print float(1), type(float(1))
print float(3/2), type(float(3/2))
print float(123456789L)

# floating point
print float(1.234)
print float(3/2.0)

# strings
print float("12.3")
print float("  0.5 ")
print float("0."+"123456789"*3)
print float("123456789"*3)

# nan and inf
print float('nan')
print float('-nan')
print float('NAN')
print float('-NAN')
print float('+nAn')
print float('inf')
print float('-inf')
print float('INF')
print float('-INF')
print float('+inF')

try:
    print float("734L")
    print "You shouldn't see this."
except ValueError:
    print float("734")

-----
GOT:
-----
EXCEPTION: SyntaxError

-----
WANTED:
-----
0.0 <type 'float'>
1.0 <type 'float'>
1.0 <type 'float'>
123456789.0
1.234
1.5
12.3
0.5
0.123456789123
1.23456789123e+26
nan
nan
nan
nan
nan
inf
-inf
inf
-inf
inf
734.0

-----
DIFF:
-----
len got: 23

len wanted: 169

firstdiff at: 0 got: 69 (EXCEPTION: SyntaxError
) expect: 48 (0.0 <type 'float'>
1.0 <type 'float'>
1.0 <type 'float'>
123456789.0
1.234
1.5
12.3
0.5
0.123456789123
1.23456789123e+26
nan
nan
nan
nan
nan
inf
-inf
inf
-inf
inf
734.0
)
FAILED: (test/run/t410.py)
-----
class F():
    def __init__(self):
        self.a = 1
        self.b = 2
        self.d = 4

f = F()

print getattr(f,'a')
print getattr(f,'b')
print getattr(f,'c',3)
print getattr(f,'d')

-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes exactly 1 arguments (5 given) on line 7

-----
WANTED:
-----
1
2
3
4

-----
DIFF:
-----
len got: 79

len wanted: 8

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: __init__() takes exactly 1 arguments (5 given) on line 7
) expect: 49 (1
2
3
4
)
FAILED: (test/run/t413.py)
-----
print "EVALUATE TO TRUE"
print isinstance('hello',str)
print isinstance(1234,int)
print isinstance(56L,long)
print isinstance(7.89,float)

class A:
    def __init__(self): pass

class B(A):
    def __init__(self): pass

class C(B):
    def __init__(self): pass

class D:
    def __init__(self): pass

a = A()

print isinstance(a,A)
print isinstance(A(),A)
print isinstance(B(),A)
print isinstance(C(),A)
print isinstance(C(),(D,A))

print "EVALUATE TO FALSE"
print isinstance(D(),A)
print isinstance(A(),(B,C))
print isinstance(A(),(D,(B,C)))
print isinstance('hello',int)

-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes exactly 1 arguments (5 given) on line 19

-----
WANTED:
-----
EVALUATE TO TRUE
True
True
True
True
True
True
True
True
True
EVALUATE TO FALSE
False
False
False
False

-----
DIFF:
-----
len got: 80

len wanted: 104

firstdiff at: 1 got: 88 (XCEPTION: TypeError: __init__() takes exactly 1 arguments (5 given) on line 19
) expect: 86 (VALUATE TO TRUE
True
True
True
True
True
True
True
True
True
EVALUATE TO FALSE
False
False
False
False
)
FAILED: (test/run/t421.py)
-----
print repr(1)
print repr(100L)
print repr(1.5)
print repr([])
print repr([1,2,3,4])
print repr(())
print repr((1,2,3,4))
print repr({})
print repr({1:2,3:4})
print repr('')
print repr('hello world')
print repr(object())

class A(object):
    def __init__(self): pass

print repr(A())

class B:
    def __init__(self): pass
    def __repr__(self): return 'custom repr'

print repr(B())

-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes exactly 1 arguments (5 given) on line 17

-----
WANTED:
-----
1
100L
1.5
[]
[1, 2, 3, 4]
()
(1, 2, 3, 4)
{}
{1: 2, 3: 4}
''
'hello world'
<unknown>
<__main__.A object>
custom repr

-----
DIFF:
-----
len got: 80

len wanted: 118

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: __init__() takes exactly 1 arguments (5 given) on line 17
) expect: 49 (1
100L
1.5
[]
[1, 2, 3, 4]
()
(1, 2, 3, 4)
{}
{1: 2, 3: 4}
''
'hello world'
<unknown>
<__main__.A object>
custom repr
)
FAILED: (test/run/t422.py)
-----
# a list of the numbers that Skulpt has trouble rounding correctly; all others should be true
bugs = [-0.5,-0.025,-0.055,0.045,-0.0025,-0.0035,0.0045,0.0055,-250,-350,-450,-550]

def helper(iterable,expect,n=None):
    if n:
        for i in iterable:
            r = round(i,n)
            if abs(r-expect) > (1/10.0**(n+1)) and i not in bugs:
                print False,i,"  expected: ",expect,"  result: ",r,abs(r-expect)
    else:
        for i in iterable:
            r = round(i)
            if abs(r-expect) > 0.000001 and i not in bugs:
                print False,i,"  expected: ",expect,"  result: ",r,abs(r-expect)

print "\n-1.4 to 1.4, no ndigit"
helper([x/10.0 for x in range(-5,-15,-1)],-1)
helper([x/10.0 for x in range(4,-5,-1)],0)
helper([x/10.0 for x in range(5,15)],1)

print "\n-1.49 to 1.49, no ndigit"
helper([x/100.0 for x in range(-50,-150,-1)],-1)
helper([x/100.0 for x in range(40,-50,-1)],0)
helper([x/100.0 for x in range(50,150)],1)

print "\n-0.064 to -0.025, ndigit=2"
helper([x/1000.0 for x in range(-25,-35,-1)],-0.03,2)
helper([x/1000.0 for x in range(-35,-46,-1)],-0.04,2)
helper([x/1000.0 for x in range(-46,-55,-1)],-0.05,2)
helper([x/1000.0 for x in range(-55,-65,-1)],-0.06,2)

print "\n0.025 to 0.064, ndigit=2"
helper([x/1000.0 for x in range(25,35)],0.03,2)
helper([x/1000.0 for x in range(35,46)],0.04,2)
helper([x/1000.0 for x in range(46,55)],0.05,2)
helper([x/1000.0 for x in range(55,65)],0.06,2)

print "\n-0.0064 to -0.0025, ndigit=3"
helper([x/10000.0 for x in range(-25,-35,-1)],-0.003,3)
helper([x/10000.0 for x in range(-35,-46,-1)],-0.004,3)
helper([x/10000.0 for x in range(-46,-56,-1)],-0.005,3)
helper([x/10000.0 for x in range(-56,-65,-1)],-0.006,3)

print "\n0.0025 to 0.0064, ndigit=3"
helper([x/10000.0 for x in range(25,35)],0.003,3)
helper([x/10000.0 for x in range(35,46)],0.004,3)
helper([x/10000.0 for x in range(46,56)],0.005,3)
helper([x/10000.0 for x in range(56,65)],0.006,3)

print "\n-649 to -250, ndigit=-2"
helper(range(-250,-350,-1),-300,-2)
helper(range(-350,-450,-1),-400,-2)
helper(range(-450,-550,-1),-500,-2)
helper(range(-550,-650,-1),-600,-2)

print "\n250 to 649, ndigit=-2"
helper(range(250,350),300,-2)
helper(range(350,450),400,-2)
helper(range(450,550),500,-2)
helper(range(550,650),600,-2)

-----
GOT:
-----
EXCEPTION: NameError: name 'n' is not defined on line 5

-----
WANTED:
-----

-1.4 to 1.4, no ndigit

-1.49 to 1.49, no ndigit

-0.064 to -0.025, ndigit=2

0.025 to 0.064, ndigit=2

-0.0064 to -0.0025, ndigit=3

0.0025 to 0.0064, ndigit=3

-649 to -250, ndigit=-2

250 to 649, ndigit=-2

-----
DIFF:
-----
len got: 56

len wanted: 210

firstdiff at: 0 got: 69 (EXCEPTION: NameError: name 'n' is not defined on line 5
) expect: 10 (
-1.4 to 1.4, no ndigit

-1.49 to 1.49, no ndigit

-0.064 to -0.025, ndigit=2

0.025 to 0.064, ndigit=2

-0.0064 to -0.0025, ndigit=3

0.0025 to 0.0064, ndigit=3

-649 to -250, ndigit=-2

250 to 649, ndigit=-2
)
FAILED: (test/run/t429.py)
-----
def helper(x,y,expect):
    l = [0]*6    
    if expect < 0:  # x < y
        l[0] = (x < y) == True
        l[1] = (x <= y) == True
        l[2] = (x > y) == False
        l[3] = (x >= y) == False
        l[4] = (x == y) == False
        l[5] = (x != y) == True       
        if isinstance(x,(int,float,long,str)) or isinstance(y,(int,float,long,str)):        
            l.append((x is y)==False)
            l.append((x is not y)==True)
    elif expect == 0: # x == y
        l[0] = (x < y) == False
        l[1] = (x <= y) == True
        l[2] = (x > y) == False
        l[3] = (x >= y) == True
        l[4] = (x == y) == True
        l[5] = (x != y) == False
        if isinstance(x,(int,float,long,str)) or isinstance(y,(int,float,long,str)):        
            l.append((x is y)==True)
            l.append((x is not y)==False)
    elif expect > 0:  # x > y
        l[0] = (x < y) == False
        l[1] = (x <= y) == False
        l[2] = (x > y) == True
        l[3] = (x >= y) == True
        l[4] = (x == y) == False
        l[5] = (x != y) == True
        if isinstance(x,(int,float,long,str)) or isinstance(y,(int,float,long,str)):        
            l.append((x is y)==False)
            l.append((x is not y)==True)
    if not isinstance(x,(int,float,long,str)) and not isinstance(y,(int,float,long,str)):
        l.append((x is y)==False)
        l.append((x is not y)==True)
    if all(l):
        print True
    else:
        print False,x,y,l

print "\nINTEGERS"
helper(1,2,-1)
helper(1,1,0)
helper(2,1,1)
helper(-2,-1,-1)
helper(-2,-2,0)
helper(-1,-2,1)
helper(-1,1,-1)
helper(1,-1,1)

print "\nLONG INTEGERS"
helper(1L,2L,-1)
helper(2L,1L,1)
helper(-1L,1L,-1)
helper(1L,-1L,1)

print "\nFLOATING POINT"
helper(1.0,2.0,-1)
helper(1.0,1.0,0)
helper(2.0,1.0,1)
helper(-2.0,-1.0,-1)
helper(-2.0,-2.0,0)
helper(-1.0,-2.0,1)
helper(-1.0,1.0,-1)
helper(1.0,-1.0,1)

print "\nLISTS"
helper([],[1],-1)
helper([1,2],[1,2],0)
helper([1,2,3],[1,2],1)
helper([1,2],[2,1],-1)
helper([1,2,3],[1,2,1,5],1)

print "\nTUPLES"
helper(tuple(),(1,),-1)
helper((1,2),(1,2),0)
helper((1,2,3),(1,2),1)
helper((1,2),(2,1),-1)
helper((1,2,3),(1,2,1,5),1)

print "\nSTRINGS"
helper('','a',-1)
helper('a','a',0)
helper('ab','a',1)
helper('ABCD','abcd',-1)
helper('ABCD','ABCD',0)
helper('aBCD','Abcd',1)

class A:
    def __init__(self,x): self.x = x
    def __cmp__(self,other): return self.x

print "\nUSER-DEFINED OBJECTS"
helper(A(-1),A(1),-1)
helper(A(0),A(0),0)
helper(A(1),A(-1),1)

-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes exactly 2 arguments (5 given) on line 94

-----
WANTED:
-----

INTEGERS
True
True
True
True
True
True
True
True

LONG INTEGERS
True
True
True
True

FLOATING POINT
True
True
True
True
True
True
True
True

LISTS
True
True
True
True
True

TUPLES
True
True
True
True
True

STRINGS
True
True
True
True
True
True

USER-DEFINED OBJECTS
True
True
True

-----
DIFF:
-----
len got: 80

len wanted: 282

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: __init__() takes exactly 2 arguments (5 given) on line 94
) expect: 10 (
INTEGERS
True
True
True
True
True
True
True
True

LONG INTEGERS
True
True
True
True

FLOATING POINT
True
True
True
True
True
True
True
True

LISTS
True
True
True
True
True

TUPLES
True
True
True
True
True

STRINGS
True
True
True
True
True
True

USER-DEFINED OBJECTS
True
True
True
)
FAILED: (test/run/t436.py)
-----
import re

def helper(match,expected):
    if type(expected) == str:
        if match: 
            if match.group(0)==expected: print True
            else: print match.group(0),expected
        else: print "didn't get a match"
    else:
        if match: print True == expected
        else: print False == expected

print "\nSyntax: ."
helper(re.search(".",""),False)
helper(re.search(".","a"),True)
helper(re.search(".a","a"),False)
helper(re.search("a","a"),True)
helper(re.search("a.","a\n"),False)
helper(re.search(".a","ba"),True)

print "\nSyntax: ^"
helper(re.search("^",""),True)
helper(re.search("a^",""),False)
helper(re.search("^a","ba"),False)
helper(re.search("^a","ab"),True)
helper(re.search("^a","\na"),False)
helper(re.search("a^","a"),False)

print "\nSyntax: $"
helper(re.search("$",""),True)
helper(re.search("$a","a"),False)
helper(re.search("a$","a"),True)
helper(re.search("a$","ab"),False)
helper(re.search("a$","a\nb"),False)
helper(re.search("a$","a\n"),True)

print "\nSyntax: *"
helper(re.search("a*",""),"")
helper(re.search("ab*","a"),"a")
helper(re.search("ab*","ab"),"ab")
helper(re.search("ab*","abbbbb"),"abbbbb")
helper(re.search("ab*","ba"),"a")
helper(re.search("ab*","bbbb"),False)

print "\nSyntax: +"
helper(re.search("a+",""),False)
helper(re.search("ab+","a"),False)
helper(re.search("ab+","ab"),"ab")
helper(re.search("ab+","abbbbb"),"abbbbb")
helper(re.search("ab+","ba"),False)
helper(re.search("ab+","bbbb"),False)

print "\nSyntax: ?"
helper(re.search("a?",""),"")
helper(re.search("ab?","a"),"a")
helper(re.search("ab?","ab"),"ab")
helper(re.search("ab?","abbbbb"),"ab")
helper(re.search("ab?","ba"),"a")
helper(re.search("ab?","bbbb"),False)

print "\nSyntax: *?"
helper(re.search("a*?","a"),"")
helper(re.search("ab*?","abbbb"),"a")
helper(re.search("ab*?","a"),"a")
helper(re.search("ab*?",""),False)

print "\nSyntax: +?"
helper(re.search("a+?","a"),"a")
helper(re.search("ab+?","abbbb"),"ab")
helper(re.search("ab+?","a"),False)
helper(re.search("ab+?",""),False)

print "\nSyntax: ??"
helper(re.search("a??","a"),"")
helper(re.search("ab??","abbbb"),"a")
helper(re.search("ab??","a"),"a")
helper(re.search("ab??",""),False)

print "\nSyntax: {m}"
helper(re.search("a{2}","a"),False)
helper(re.search("a{2}","aa"),"aa")
helper(re.search("a{2}","aaa"),"aa")

print "\nSyntax: {m,n}"
helper(re.search("a{1,2}b","b"),False)
helper(re.search("a{1,2}b","ab"),"ab")
helper(re.search("a{1,2}b","aab"),"aab")
helper(re.search("a{1,2}b","aaab"),"aab")
helper(re.search("a{,2}b","b"),"b")
helper(re.search("a{,2}b","ab"),"ab")
helper(re.search("a{,2}b","aab"),"aab")
helper(re.search("a{,2}b","aaab"),"aab")
helper(re.search("a{2,}b","b"),False)
helper(re.search("a{2,}b","ab"),False)
helper(re.search("a{2,}b","aab"),"aab")
helper(re.search("a{2,}b","aaab"),"aaab")
helper(re.search("a{3,5}","aaaaaaaaaa"),"aaaaa")
helper(re.search("a{,5}","aaaaaaaaaa"),"aaaaa")
helper(re.search("a{3,}","aaaaaaaaaa"),"aaaaaaaaaa")

print "\nSyntax: {m,n}?"
helper(re.search("a{1,2}?b","b"),False)
helper(re.search("a{1,2}?b","ab"),"ab")
helper(re.search("a{1,2}?b","aab"),"aab")
helper(re.search("a{1,2}?b","aaab"),"aab")
helper(re.search("a{,2}?b","b"),"b")
helper(re.search("a{,2}?b","ab"),"ab")
helper(re.search("a{,2}?b","aab"),"aab")
helper(re.search("a{,2}?b","aaab"),"aab")
helper(re.search("a{2,}?b","b"),False)
helper(re.search("a{2,}?b","ab"),False)
helper(re.search("a{2,}?b","aab"),"aab")
helper(re.search("a{2,}?b","aaab"),"aaab")
helper(re.search("a{3,5}?","aaaaaaaaaa"),"aaa")
helper(re.search("a{,5}?","aaaaaaaaaa"),"")
helper(re.search("a{3,}?","aaaaaaaaaa"),"aaa")

print "\nSyntax: []"
helper(re.search("[a,b,c]","abc"),"a")
helper(re.search("[a-z]","bc"),"b")
helper(re.search("[A-Z,0-9]","abcdefg"),False)
helper(re.search("[^A-Z]","ABCDEFGaHIJKL"),"a")
helper(re.search("[a*bc]","*"),"*")

print "\nSyntax: |"
helper(re.search("|",""),"")
helper(re.search("|a",""),"")
helper(re.search("a|b","ba"),"b")
helper(re.search("h|ello","hello"),"h")

print "\nSyntax: (...)"
match = re.search("(b*)","bbbba"); print len(match.groups()) == 1

print "\nSyntax: (?...)"
helper(re.search("(?:b*)","bbbba"),'bbbb')
helper(re.search("a(?=b)","a"),False)
helper(re.search("a(?=b)","ab"),"a")
helper(re.search("a(?!b)","a"),"a")
helper(re.search("a(?!b)","ab"),False)

-----
GOT:
-----
EXCEPTION: TypeError: object of type 'MatchObject' has no len() on line 10

-----
WANTED:
-----

Syntax: .
True
True
True
True
True
True

Syntax: ^
True
True
True
True
True
True

Syntax: $
True
True
True
True
True
True

Syntax: *
True
True
True
True
True
True

Syntax: +
True
True
True
True
True
True

Syntax: ?
True
True
True
True
True
True

Syntax: *?
True
True
True
True

Syntax: +?
True
True
True
True

Syntax: ??
True
True
True
True

Syntax: {m}
True
True
True

Syntax: {m,n}
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True

Syntax: {m,n}?
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True

Syntax: []
True
True
True
True
True

Syntax: |
True
True
True
True

Syntax: (...)
True

Syntax: (?...)
True
True
True
True
True

-----
DIFF:
-----
len got: 75

len wanted: 680

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: object of type 'MatchObject' has no len() on line 10
) expect: 10 (
Syntax: .
True
True
True
True
True
True

Syntax: ^
True
True
True
True
True
True

Syntax: $
True
True
True
True
True
True

Syntax: *
True
True
True
True
True
True

Syntax: +
True
True
True
True
True
True

Syntax: ?
True
True
True
True
True
True

Syntax: *?
True
True
True
True

Syntax: +?
True
True
True
True

Syntax: ??
True
True
True
True

Syntax: {m}
True
True
True

Syntax: {m,n}
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True

Syntax: {m,n}?
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True

Syntax: []
True
True
True
True
True

Syntax: |
True
True
True
True

Syntax: (...)
True

Syntax: (?...)
True
True
True
True
True
)
FAILED: (test/run/t437.py)
-----
import re

m = re.match('([0-9]+)([a-z]+)([A-Z]*)','345abu')

print "\ngroup"
print m.group() == '345abu'
print m.group(0) == '345abu'
print m.group(1) == '345'
print m.group(2) == 'abu'
print m.group(3) == ''

print "\ngroups"
print m.groups() == ('345','abu','')
print m.groups('default') == ('345','abu','')

-----
GOT:
-----
EXCEPTION: TypeError

-----
WANTED:
-----

group
True
True
True
True
True

groups
True
True

-----
DIFF:
-----
len got: 21

len wanted: 50

firstdiff at: 0 got: 69 (EXCEPTION: TypeError
) expect: 10 (
group
True
True
True
True
True

groups
True
True
)
FAILED: (test/run/t446.py)
-----
d = {'x':1,'y':2,'z':3}

def a(x,y,z):
    return x,y,z

print "\nFunction"
print a(1,2,3)
print a(z=3,x=1,y=2), a(z=3,y=2,x=1), a(y=2,z=3,x=1), a(y=2,x=1,z=3)

def b(x=0,y=0,z=0):
    return x,y,z

print "\nFunction with defaults"
print b()
print b(1,2,3)
print b(1), b(2), b(3)
print b(x=1), b(y=2), b(z=3)
print b(x=1,z=3), b(z=3,x=1)
print b(x=1,y=2), b(y=2,x=1)
print b(z=3,y=2), b(y=2,z=3)
print b(z=3,x=1,y=2), b(z=3,y=2,x=1), b(y=2,z=3,x=1), b(y=2,x=1,z=3)

class A():
    def __init__(self,x,y,z):
        self.x = x
        self.y = y
        self.z = z
    def __str__(self):
        return str((self.x,self.y,self.z))

print "\nClass"
print A(1,2,3)

class B():
    def __init__(self,x=0,y=0,z=0):
        self.x = x
        self.y = y
        self.z = z
    def __str__(self):
        return str((self.x,self.y,self.z))

print "\nClass with defaults"
print B()
print B(1,2,3)
print B(1), B(2), B(3)

-----
GOT:
-----
EXCEPTION: NameError: name 'x' is not defined on line 11

-----
WANTED:
-----

Function
(1, 2, 3)
(1, 2, 3) (1, 2, 3) (1, 2, 3) (1, 2, 3)

Function with defaults
(0, 0, 0)
(1, 2, 3)
(1, 0, 0) (2, 0, 0) (3, 0, 0)
(1, 0, 0) (0, 2, 0) (0, 0, 3)
(1, 0, 3) (1, 0, 3)
(1, 2, 0) (1, 2, 0)
(0, 2, 3) (0, 2, 3)
(1, 2, 3) (1, 2, 3) (1, 2, 3) (1, 2, 3)

Class
(1, 2, 3)

Class with defaults
(0, 0, 0)
(1, 2, 3)
(1, 0, 0) (2, 0, 0) (3, 0, 0)

-----
DIFF:
-----
len got: 57

len wanted: 352

firstdiff at: 0 got: 69 (EXCEPTION: NameError: name 'x' is not defined on line 11
) expect: 10 (
Function
(1, 2, 3)
(1, 2, 3) (1, 2, 3) (1, 2, 3) (1, 2, 3)

Function with defaults
(0, 0, 0)
(1, 2, 3)
(1, 0, 0) (2, 0, 0) (3, 0, 0)
(1, 0, 0) (0, 2, 0) (0, 0, 3)
(1, 0, 3) (1, 0, 3)
(1, 2, 0) (1, 2, 0)
(0, 2, 3) (0, 2, 3)
(1, 2, 3) (1, 2, 3) (1, 2, 3) (1, 2, 3)

Class
(1, 2, 3)

Class with defaults
(0, 0, 0)
(1, 2, 3)
(1, 0, 0) (2, 0, 0) (3, 0, 0)
)
FAILED: (test/run/t463.py)
-----
import math

class F():
    def __init__(self):
        self.a = 1
        self.b = 2
        self.d = 4

f = F()

print hasattr(f,'a')
print hasattr(f,'c')
print hasattr(f,'D')

try:
    print hasattr(f,b)
    print "You shouldn't see this."
except:
    print hasattr(f,'b')
print
print hasattr(str,'center');
print hasattr(str,'ljust');
print
print hasattr(math,'pi');
print hasattr(math,'tau');

try:
    print hasattr(math,None);
    print "You shouldn't see this."
except:
    print hasattr(F,'a');

-----
GOT:
-----
EXCEPTION: SyntaxError

-----
WANTED:
-----
True
False
False
True

True
True

True
False
False

-----
DIFF:
-----
len got: 23

len wanted: 51

firstdiff at: 0 got: 69 (EXCEPTION: SyntaxError
) expect: 84 (True
False
False
True

True
True

True
False
False
)
FAILED: (test/run/t466.py)
-----
import re

def helper(string, pattern):
    match = re.match(string, pattern)
    if match:
        print match.group(0)
    else:
        print False
    search = re.search(string, pattern)
    if search:
        print search.group(0)
    else:
        print False
    find = re.findall(string, pattern)
    print find

helper("a{,2}b", "b")
helper("a{,2}b", "ab")
helper("a[{,}]b", "a{b")
helper("a\{,b", "a{,b")
helper("a{,2}[a-z]", "ab")
helper("a{,2}b{,5}", "")
helper("a[{,[a-z]]b", "a,cb")

-----
GOT:
-----
EXCEPTION: TypeError: object of type 'MatchObject' has no len() on line 5

-----
WANTED:
-----
b
b
['b']
ab
ab
['ab']
a{b
a{b
['a{b']
a{,b
a{,b
['a{,b']
ab
ab
['ab']


['']
False
False
[]

-----
DIFF:
-----
len got: 74

len wanted: 93

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: object of type 'MatchObject' has no len() on line 5
) expect: 98 (b
b
['b']
ab
ab
['ab']
a{b
a{b
['a{b']
a{,b
a{,b
['a{,b']
ab
ab
['ab']


['']
False
False
[]
)
FAILED: (test/run/t468.py)
-----
class Matrix(object):
    """
    Represents a matrix
    """

    def __init__(self, matrix=None):
        """
        """
        #check if all rows same size

        self.mat = matrix

    #identity matrix initilization

    #scalar matrix multiplication

    def __getitem__(self, index):
        """
        """
        #print index
        return self.mat[index[0]][index[1]]
        

    def __setitem__(self, index, item):
        """
        """

        self.mat[index[0]][index[1]] = item

trial=Matrix([[543]])
trial[0,0]=100
print trial[0,0]

-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes at most 2 arguments (5 given) on line 30

-----
WANTED:
-----
100

-----
DIFF:
-----
len got: 80

len wanted: 4

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: __init__() takes at most 2 arguments (5 given) on line 30
) expect: 49 (100
)
FAILED: (test/run/t475.py)
-----
def helper(got, expect):
    if got == expect:
        print True
    else:
        print False, expect, got

class Squares:

    def __init__(self, max):
        self.max = max
        self.sofar = []

    def __len__(self): return len(self.sofar)

    def __getitem__(self, i):
        if not 0 <= i < self.max: raise IndexError
        n = len(self.sofar)
        while n <= i:
            self.sofar.append(n*n)
            n += 1
        return self.sofar[i]

class Counter:

    class CounterIterator:
        def __init__(self, c):
            self.count = 0
            self.c = c

        def next(self):
            self.count += 1
            if self.count < self.c.stop:
                return self.count
            raise StopIteration

        def __iter__(self):
            return self

    def __init__(self, stop):
        self.count = 0
        self.stop = stop

    def __iter__(self):
        return self.CounterIterator(self)

helper(sum([]), 0)
helper(sum(range(2,8)), 27)
# helper(sum(iter(range(2,8))), 27)  # iter not defined
# helper(sum(Squares(10)), 285) # can't iterate w/o specific __iter__ method
# helper(sum(iter(Squares(10))), 285) # iter not defined
helper(sum([[1], [2], [3]], []), [1, 2, 3])
helper(sum([[1,2],[3,4]],[5,6]), [5, 6, 1, 2, 3, 4])
helper(sum(((1,2,3),(4,5)),(6,7)),(6, 7, 1, 2, 3, 4, 5))
helper(sum(Counter(10), 5), 50)

# error testing -- all of these should throw a TypeError
# print sum(1,2,3,4)
# print sum([1,2,3,'7'])
# print sum([1,2,3],1.7)
# print sum([1,2,3],'8')
# print sum([1,2,3],[2,3])
# print sum([1,2,3],{1:2})

-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes exactly 2 arguments (5 given) on line 54

-----
WANTED:
-----
True
True
True
True
True
True

-----
DIFF:
-----
len got: 80

len wanted: 30

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: __init__() takes exactly 2 arguments (5 given) on line 54
) expect: 84 (True
True
True
True
True
True
)
FAILED: (test/run/t476.py)
-----
class Counter:

    class CounterIter:
        def __init__(self, c):
            self.c = c
            self.idx = 0

        def __iter__(self):
            return self

        def next(self):
            n = self.idx
            self.idx += 1
            if n > self.c.stop:
                raise StopIteration
            return n

    def __init__(self, stop):
        self.count = 0
        self.stop = stop
        self.dict = {}

    def __iter__(self):
        return self.CounterIter(self)

    def __len__(self):
        return self.count

    def __repr__(self):
        return "< Counter Object: ("+str(self.count)+","+str(self.stop)+") >"

    def __str__(self):
        return "("+str(self.count)+","+str(self.stop)+")"

    def __call__(self, x):
        for i in range(x):
            if i % 2 != 0:
                continue
            self.dict[i] = i + 1

    def __getitem__(self, key):
        if key in self.dict:
            return self.dict[key]
        return -1

    def __setitem__(self, key, value):
        self.dict[key] = value

a = Counter(10)

for x in a:
    print x

print len(a)
print a, str(a), repr(a)
a(20)
print a[5], a[8], a[30]
a[30] = 'thirty'
print a[30]

b = Counter(5)
c = Counter(5)

print
print list(b)
print sum(c)

print b.__len__()
print b.__str__()
print b.__repr__()
b.__call__(10)
print b.__getitem__(4)
print b.__getitem__(15)
b.__setitem__(15, 'hello')
print b.__getitem__(15)

-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes exactly 2 arguments (5 given) on line 49

-----
WANTED:
-----
0
1
2
3
4
5
6
7
8
9
10
0
(0,10) (0,10) < Counter Object: (0,10) >
-1 9 -1
thirty

[0, 1, 2, 3, 4, 5]
15
0
(0,5)
< Counter Object: (0,5) >
5
-1
hello

-----
DIFF:
-----
len got: 80

len wanted: 149

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: __init__() takes exactly 2 arguments (5 given) on line 49
) expect: 48 (0
1
2
3
4
5
6
7
8
9
10
0
(0,10) (0,10) < Counter Object: (0,10) >
-1 9 -1
thirty

[0, 1, 2, 3, 4, 5]
15
0
(0,5)
< Counter Object: (0,5) >
5
-1
hello
)
FAILED: (test/run/t483.py)
-----
def divide(x, y):
    try:
        result = x / y
    except ZeroDivisionError:
        print "division by zero!"
    else:
        print "result is", result

divide(2, 1)
divide(2, 0)
try:
    divide("2", "1")
except TypeError as e:
    print e

-----
GOT:
-----
EXCEPTION: SyntaxError

-----
WANTED:
-----
result is 2
division by zero!
TypeError: unsupported operand type(s) for Div: 'str' and 'str' on line 3

-----
DIFF:
-----
len got: 23

len wanted: 104

firstdiff at: 0 got: 69 (EXCEPTION: SyntaxError
) expect: 114 (result is 2
division by zero!
TypeError: unsupported operand type(s) for Div: 'str' and 'str' on line 3
)
FAILED: (test/run/t484.py)
-----
class calculator:

    def __init__(self): pass

    def div(self, x, y):
        try:
            return x / y
        except ZeroDivisionError:
            return "ZeroDivisionError: can't divide by zero"
        except NameError as e:
            return e
        except TypeError as e:
            return e
        except TypeError:
            print "DID NOT CATCH 'TypeError as e'"
            return "TypeError"
        except:
            return "OTHER ERROR"

c = calculator();
print c.div(10,1)
print c.div(10,0)
print c.div('12','6')

try:
    print c.div('10','1') / 2
except:
    print "ERROR"

try:
    print c.div(x,12)
except NameError as e:
    print e


-----
GOT:
-----
EXCEPTION: SyntaxError

-----
WANTED:
-----
10
ZeroDivisionError: can't divide by zero
TypeError: unsupported operand type(s) for Div: 'str' and 'str' on line 7
ERROR
NameError: name 'x' is not defined on line 31

-----
DIFF:
-----
len got: 23

len wanted: 169

firstdiff at: 0 got: 69 (EXCEPTION: SyntaxError
) expect: 49 (10
ZeroDivisionError: can't divide by zero
TypeError: unsupported operand type(s) for Div: 'str' and 'str' on line 7
ERROR
NameError: name 'x' is not defined on line 31
)
FAILED: (test/run/t485.py)
-----
try:
    assert 1 > 10
except AssertionError:
    print "Caught AssertionError"
except:
    print "Did not catch AssertionError"

try:
    print None.notAnAttribute
except AttributeError:
    print "Caught AttributeError"
except:
    print "Did not catch AttributeError"

try:
    import notAModule
except ImportError:
    print "Caught ImportError"
except:
    print "Did not catch ImportError"

try:
    print [0,1,2,3,4][5]
except IndexError:
    print "Caught IndexError"
except:
    print "Did not catch IndexError"

try:
    print {1:2, 3:4}[5]
except KeyError:
    print "Caught KeyError"
except:
    print "Did not catch KeyError"

try:
    print x
except NameError:
    print "Caught NameError"
except:
    print "Did not catch NameError"

try:
    print 0.0000000000000000000000000000000000000000000000000000000000000001**-30
except OverflowError:
    print "Caught OverflowError"
except:
    print "Did not catch OverflowError"

try:
    '10' / '1'
except TypeError:
    print "Caught TypeError"
except:
    print "Did not catch TypeError"

try:
    print "hello".index("S")
except ValueError:
    print "Caught ValueError"
except:
    print "Did not catch ValueError"

try:
    print 1 / 0
except ZeroDivisionError:
    print "Caught ZeroDivisionError"
except:
    print "Did not catch ZeroDivisionError"
    

-----
GOT:
-----
EXCEPTION: SyntaxError

-----
WANTED:
-----
Caught AssertionError
Caught AttributeError
Caught ImportError
Caught IndexError
Caught KeyError
Caught NameError
Caught OverflowError
Caught TypeError
Caught ValueError
Caught ZeroDivisionError

-----
DIFF:
-----
len got: 23

len wanted: 195

firstdiff at: 0 got: 69 (EXCEPTION: SyntaxError
) expect: 67 (Caught AssertionError
Caught AttributeError
Caught ImportError
Caught IndexError
Caught KeyError
Caught NameError
Caught OverflowError
Caught TypeError
Caught ValueError
Caught ZeroDivisionError
)
FAILED: (test/run/t488.py)
-----
a = [2,1,-4,3,0,6]
a.sort()
print a
b = "rksdubtheynjmpwqzlfiovxgac"
print sorted(b,None,lambda x: ord(x))
c = [2,1,-4,3,0,6]
print sorted(c)
print sorted(c, lambda x, y: y - x);

class Test:
    def __init__(self, id, value):
        self.id = id
        self.value = value
    def __repr__(self):
        return "id: " + str(self.id) + " value: " + self.value

d = [ Test(4, "test"), Test(3, "test"), Test(6, "test"), Test(1, "test"), Test(2, "test"), Test(9, "test"), Test(0, "test") ]
print sorted(d, lambda x, y: y - x, lambda x: x.id, True)

print c
print sorted(c, None, None, True)

c.sort(reverse=True)
print c
c.sort()
print c
c.sort(lambda x, y: y - x, lambda x: pow(x, 2), True)
print c

L = [7, 3, -2, 4]
d = {'a': 5, 'b': 9}

def g(k):
    return d[k]

print(g('a'))
print(sorted(d.keys(), None, g))

print(sorted(d.keys(), None, None))

print(sorted(d.keys(), None, lambda x: d[x]))

def myabs(x):
    return abs(x)

print(sorted(L, None, myabs))
print(sorted(L, None, lambda x: myabs(x)))

print(sorted(L, None, lambda x: abs(x)))

print(sorted(L, None, abs))

print(sorted(L, key=lambda x: -x, reverse=True))

print(sorted(L, key=lambda x: -x))
-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes exactly 3 arguments (5 given) on line 17

-----
WANTED:
-----
[-4, 0, 1, 2, 3, 6]
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
[-4, 0, 1, 2, 3, 6]
[6, 3, 2, 1, 0, -4]
[id: 0 value: test, id: 1 value: test, id: 2 value: test, id: 3 value: test, id: 4 value: test, id: 6 value: test, id: 9 value: test]
[2, 1, -4, 3, 0, 6]
[6, 3, 2, 1, 0, -4]
[6, 3, 2, 1, 0, -4]
[-4, 0, 1, 2, 3, 6]
[0, 1, 2, 3, -4, 6]
5
['a', 'b']
['a', 'b']
['a', 'b']
[-2, 3, 4, 7]
[-2, 3, 4, 7]
[-2, 3, 4, 7]
[-2, 3, 4, 7]
[-2, 3, 4, 7]
[7, 4, 3, -2]

-----
DIFF:
-----
len got: 80

len wanted: 544

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: __init__() takes exactly 3 arguments (5 given) on line 17
) expect: 91 ([-4, 0, 1, 2, 3, 6]
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
[-4, 0, 1, 2, 3, 6]
[6, 3, 2, 1, 0, -4]
[id: 0 value: test, id: 1 value: test, id: 2 value: test, id: 3 value: test, id: 4 value: test, id: 6 value: test, id: 9 value: test]
[2, 1, -4, 3, 0, 6]
[6, 3, 2, 1, 0, -4]
[6, 3, 2, 1, 0, -4]
[-4, 0, 1, 2, 3, 6]
[0, 1, 2, 3, -4, 6]
5
['a', 'b']
['a', 'b']
['a', 'b']
[-2, 3, 4, 7]
[-2, 3, 4, 7]
[-2, 3, 4, 7]
[-2, 3, 4, 7]
[-2, 3, 4, 7]
[7, 4, 3, -2]
)
FAILED: (test/run/t491.py)
-----
class f(object):
    def __init__(self, w, x=1, y=2, z=3):
        print w, x, y, z

z='x'
f('a')
f('a', 3)
f('a', 3, y='z')

-----
GOT:
-----
EXCEPTION: NameError: name 'w' is not defined on line 3

-----
WANTED:
-----
a 1 2 3
a 3 2 3
a 3 z 3

-----
DIFF:
-----
len got: 56

len wanted: 24

firstdiff at: 0 got: 69 (EXCEPTION: NameError: name 'w' is not defined on line 3
) expect: 97 (a 1 2 3
a 3 2 3
a 3 z 3
)
FAILED: (test/run/t492.py)
-----

class B():
    def __init__(self,x=0,y=0,z=0):
        self.x = x
        self.y = y
        self.z = z
    def __str__(self):
        return str((self.x,self.y,self.z))

print "\nClass with defaults"
print B()
print B(1,2,3)
print B(1), B(2), B(3)

print B(x=1), B(y=2), B(z=3)
print B(x=1,z=3), B(z=3,x=1)
print B(x=1,y=2), B(y=2,x=1)
print B(z=3,y=2), B(y=2,z=3)
print B(z=3,x=1,y=2), B(z=3,y=2,x=1), B(y=2,z=3,x=1), B(y=2,x=1,z=3)

-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes at most 4 arguments (5 given) on line 11

-----
WANTED:
-----

Class with defaults
(0, 0, 0)
(1, 2, 3)
(1, 0, 0) (2, 0, 0) (3, 0, 0)
(1, 0, 0) (0, 2, 0) (0, 0, 3)
(1, 0, 3) (1, 0, 3)
(1, 2, 0) (1, 2, 0)
(0, 2, 3) (0, 2, 3)
(1, 2, 3) (1, 2, 3) (1, 2, 3) (1, 2, 3)

-----
DIFF:
-----
len got: 80

len wanted: 201

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: __init__() takes at most 4 arguments (5 given) on line 11
) expect: 10 (
Class with defaults
(0, 0, 0)
(1, 2, 3)
(1, 0, 0) (2, 0, 0) (3, 0, 0)
(1, 0, 0) (0, 2, 0) (0, 0, 3)
(1, 0, 3) (1, 0, 3)
(1, 2, 0) (1, 2, 0)
(0, 2, 3) (0, 2, 3)
(1, 2, 3) (1, 2, 3) (1, 2, 3) (1, 2, 3)
)
FAILED: (test/run/t494.py)
-----
import re

def helper(match,expected):
    if type(expected) == str:
        if match: 
            if match.group(0)==expected: print True
            else: print match.group(0),expected
        else: print "didn't get a match"
    else:
        if match: print True == expected
        else: print False == expected

print "\nSyntax: ."
helper(re.match(".",""),False)
helper(re.match(".","a"),True)
helper(re.match(".a","a"),False)
helper(re.match("a","a"),True)
helper(re.match("a.","a\n"),False)
helper(re.match(".a","ba"),True)

print "\nSyntax: ^"
helper(re.match("^",""),True)
helper(re.match("a^",""),False)
helper(re.match("^a","ba"),False)
helper(re.match("^a","ab"),True)
helper(re.match("^a","\na"),False)
helper(re.match("a^","a"),False)

print "\nSyntax: $"
helper(re.match("$",""),True)
helper(re.match("$a","a"),False)
helper(re.match("a$","a"),True)
helper(re.match("a$","ab"),False)
helper(re.match("a$","a\nb"),False)
helper(re.match("a$","a\n"),True)

print "\nSyntax: *"
helper(re.match("a*",""),"")
helper(re.match("ab*","a"),"a")
helper(re.match("ab*","ab"),"ab")
helper(re.match("ab*","abbbbb"),"abbbbb")
helper(re.match("ab*","ba"),False)
helper(re.match("ab*","bbbb"),False)

print "\nSyntax: +"
helper(re.match("a+",""),False)
helper(re.match("ab+","a"),False)
helper(re.match("ab+","ab"),"ab")
helper(re.match("ab+","abbbbb"),"abbbbb")
helper(re.match("ab+","ba"),False)
helper(re.match("ab+","bbbb"),False)

print "\nSyntax: ?"
helper(re.match("a?",""),"")
helper(re.match("ab?","a"),"a")
helper(re.match("ab?","ab"),"ab")
helper(re.match("ab?","abbbbb"),"ab")
helper(re.match("ab?","ba"),False)
helper(re.match("ab?","bbbb"),False)

print "\nSyntax: *?"
helper(re.match("a*?","a"),"")
helper(re.match("ab*?","abbbb"),"a")
helper(re.match("ab*?","a"),"a")
helper(re.match("ab*?",""),False)

print "\nSyntax: +?"
helper(re.match("a+?","a"),"a")
helper(re.match("ab+?","abbbb"),"ab")
helper(re.match("ab+?","a"),False)
helper(re.match("ab+?",""),False)

print "\nSyntax: ??"
helper(re.match("a??","a"),"")
helper(re.match("ab??","abbbb"),"a")
helper(re.match("ab??","a"),"a")
helper(re.match("ab??",""),False)

print "\nSyntax: {m}"
helper(re.match("a{2}","a"),False)
helper(re.match("a{2}","aa"),"aa")
helper(re.match("a{2}","aaa"),"aa")

print "\nSyntax: {m,n}"
helper(re.match("a{1,2}b","b"),False)
helper(re.match("a{1,2}b","ab"),"ab")
helper(re.match("a{1,2}b","aab"),"aab")
helper(re.match("a{1,2}b","aaab"),False)
helper(re.match("a{,2}b","b"),"b")
helper(re.match("a{,2}b","ab"),"ab")
helper(re.match("a{,2}b","aab"),"aab")
helper(re.match("a{,2}b","aaab"),False)
helper(re.match("a{2,}b","b"),False)
helper(re.match("a{2,}b","ab"),False)
helper(re.match("a{2,}b","aab"),"aab")
helper(re.match("a{2,}b","aaab"),"aaab")
helper(re.match("a{3,5}","aaaaaaaaaa"),"aaaaa")
helper(re.match("a{,5}","aaaaaaaaaa"),"aaaaa")
helper(re.match("a{3,}","aaaaaaaaaa"),"aaaaaaaaaa")

print "\nSyntax: {m,n}?"
helper(re.match("a{1,2}?b","b"),False)
helper(re.match("a{1,2}?b","ab"),"ab")
helper(re.match("a{1,2}?b","aab"),"aab")
helper(re.match("a{1,2}?b","aaab"),False)
helper(re.match("a{,2}?b","b"),"b")
helper(re.match("a{,2}?b","ab"),"ab")
helper(re.match("a{,2}?b","aab"),"aab")
helper(re.match("a{,2}?b","aaab"),False)
helper(re.match("a{2,}?b","b"),False)
helper(re.match("a{2,}?b","ab"),False)
helper(re.match("a{2,}?b","aab"),"aab")
helper(re.match("a{2,}?b","aaab"),"aaab")
helper(re.match("a{3,5}?","aaaaaaaaaa"),"aaa")
helper(re.match("a{,5}?","aaaaaaaaaa"),"")
helper(re.match("a{3,}?","aaaaaaaaaa"),"aaa")

print "\nSyntax: []"
helper(re.match("[a,b,c]","abc"),"a")
helper(re.match("[a-z]","bc"),"b")
helper(re.match("[A-Z,0-9]","abcdefg"),False)
helper(re.match("[^A-Z]","ABCDEFGaHIJKL"),False)
helper(re.match("[a*bc]","*"),"*")

print "\nSyntax: |"
helper(re.match("|",""),"")
helper(re.match("|a",""),"")
helper(re.match("a|b","ba"),"b")
helper(re.match("h|ello","hello"),"h")

print "\nSyntax: (...)"
match = re.match("(b*)","bbbba"); print len(match.groups()) == 1

print "\nSyntax: (?...)"
helper(re.match("(?:b*)","bbbba"),'bbbb')
helper(re.match("a(?=b)","a"),False)
helper(re.match("a(?=b)","ab"),"a")
helper(re.match("a(?!b)","a"),"a")
helper(re.match("a(?!b)","ab"),False)

-----
GOT:
-----
EXCEPTION: TypeError: object of type 'MatchObject' has no len() on line 10

-----
WANTED:
-----

Syntax: .
True
True
True
True
True
True

Syntax: ^
True
True
True
True
True
True

Syntax: $
True
True
True
True
True
True

Syntax: *
True
True
True
True
True
True

Syntax: +
True
True
True
True
True
True

Syntax: ?
True
True
True
True
True
True

Syntax: *?
True
True
True
True

Syntax: +?
True
True
True
True

Syntax: ??
True
True
True
True

Syntax: {m}
True
True
True

Syntax: {m,n}
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True

Syntax: {m,n}?
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True

Syntax: []
True
True
True
True
True

Syntax: |
True
True
True
True

Syntax: (...)
True

Syntax: (?...)
True
True
True
True
True

-----
DIFF:
-----
len got: 75

len wanted: 680

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: object of type 'MatchObject' has no len() on line 10
) expect: 10 (
Syntax: .
True
True
True
True
True
True

Syntax: ^
True
True
True
True
True
True

Syntax: $
True
True
True
True
True
True

Syntax: *
True
True
True
True
True
True

Syntax: +
True
True
True
True
True
True

Syntax: ?
True
True
True
True
True
True

Syntax: *?
True
True
True
True

Syntax: +?
True
True
True
True

Syntax: ??
True
True
True
True

Syntax: {m}
True
True
True

Syntax: {m,n}
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True

Syntax: {m,n}?
True
True
True
True
True
True
True
True
True
True
True
True
True
True
True

Syntax: []
True
True
True
True
True

Syntax: |
True
True
True
True

Syntax: (...)
True

Syntax: (?...)
True
True
True
True
True
)
FAILED: (test/run/t498.py)
-----
print "\nintegers"
print pow(0, 0)
print pow(0, 3)
print pow(12, 0)
print pow(2, 3)
print pow(-2, 3)
print pow(2, -3)
print pow(-2, -3)
print pow(4, 5, 3)
print pow(-4, 5, 3)
print pow(-4, 5, -3)

print "\nlong integers"
print pow(0L, 0L)
print pow(0L, 3L)
print pow(12L, 0L)
print pow(2L, 3L)
print pow(-2L, 3L)
print pow(2L, -3L)
print pow(-2L, -3L)
print pow(4L, 5L, 3L)
print pow(-4L, 5L, 3L)
print pow(-4L, 5L, -3L)

print "\nfloating point"
print pow(0.0, 0.0)
print pow(0.0, 3.1)
print pow(12.0, 0.0)
print pow(2.5, 3.7)

print "\nintegers and long integers"
print pow(2L, 3),  type(pow(2L, 3))
print pow(-2, 3L),  type(pow(-2, 3L))
print pow(2L, -3),  type(pow(2L, -3))
print pow(-2, -3L),  type(pow(-2, -3L))
print pow(2, 3, 5L),  type(pow(2, 3, 5L))
print pow(2, 3L, 5),  type(pow(2, 3L, 5))

print "\nintegers and floating point"
print pow(2.5, 3),  type(pow(2.5, 3))
print pow(2, 3.5),  type(pow(2, 3.5))
print pow(2.5, -3),  type(pow(2.5, -3))
print pow(2, -3.5),  type(pow(2, -3.5))

print "\nfloating point and long integers"
print pow(2.5, 3L),  type(pow(2.5, 3L))
print pow(2L, 3.5),  type(pow(2L, 3.5))
print pow(2.5, -3L),  type(pow(2.5, -3L))
print pow(2L, -3.5),  type(pow(2L, -3.5))

print "\nERROR CHECKING:"
try:
    print pow([1, 2],  '34')
    print "you shouldn't see this"
except TypeError as e:
    print e

try:
    print pow([1, 2],  '34',  5)
    print "you shouldn't see this"
except TypeError as e:
    print e

try:
    print pow(-2.5, 3.7)
    print "you shouldn't see this"
except ValueError as e:
    print e

try:
    print pow(4.0, 5.0, 3)
    print "you shouldn't see this"
except TypeError as e:
    print e

try:
    print pow(4, -3, 2)
    print "you shouldn't see this"
except TypeError as e:
    print e

-----
GOT:
-----
EXCEPTION: SyntaxError

-----
WANTED:
-----

integers
1
0
1
8
-8
0.125
-0.125
1
2
-1

long integers
1
0
1
8
-8
0.125
-0.125
1
2
-1

floating point
1.0
0.0
1.0
29.6741325364

integers and long integers
8 <type 'long'>
-8 <type 'long'>
0.125 <type 'float'>
-0.125 <type 'float'>
3 <type 'long'>
3 <type 'long'>

integers and floating point
15.625 <type 'float'>
11.313708499 <type 'float'>
0.064 <type 'float'>
0.0883883476483 <type 'float'>

floating point and long integers
15.625 <type 'float'>
11.313708499 <type 'float'>
0.064 <type 'float'>
0.0883883476483 <type 'float'>

ERROR CHECKING:
TypeError: unsupported operand type(s) for pow(): 'list' and 'str' on line 53
TypeError: unsupported operand type(s) for pow(): 'list', 'str', 'int' on line 59
ValueError: negative number cannot be raised to a fractional power on line 65
TypeError: pow() 3rd argument not allowed unless all arguments are integers on line 71
TypeError: pow() 2nd argument cannot be negative when 3rd argument specified on line 77

-----
DIFF:
-----
len got: 23

len wanted: 962

firstdiff at: 0 got: 69 (EXCEPTION: SyntaxError
) expect: 10 (
integers
1
0
1
8
-8
0.125
-0.125
1
2
-1

long integers
1
0
1
8
-8
0.125
-0.125
1
2
-1

floating point
1.0
0.0
1.0
29.6741325364

integers and long integers
8 <type 'long'>
-8 <type 'long'>
0.125 <type 'float'>
-0.125 <type 'float'>
3 <type 'long'>
3 <type 'long'>

integers and floating point
15.625 <type 'float'>
11.313708499 <type 'float'>
0.064 <type 'float'>
0.0883883476483 <type 'float'>

floating point and long integers
15.625 <type 'float'>
11.313708499 <type 'float'>
0.064 <type 'float'>
0.0883883476483 <type 'float'>

ERROR CHECKING:
TypeError: unsupported operand type(s) for pow(): 'list' and 'str' on line 53
TypeError: unsupported operand type(s) for pow(): 'list', 'str', 'int' on line 59
ValueError: negative number cannot be raised to a fractional power on line 65
TypeError: pow() 3rd argument not allowed unless all arguments are integers on line 71
TypeError: pow() 2nd argument cannot be negative when 3rd argument specified on line 77
)
FAILED: (test/run/t499.py)
-----
class MyTest:
	def __init__(self,s):
		self.w = s

	def length(self):
		return len(self.w)


x = MyTest("foo")

print x.length()

-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes exactly 2 arguments (5 given) on line 9

-----
WANTED:
-----
3

-----
DIFF:
-----
len got: 79

len wanted: 2

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: __init__() takes exactly 2 arguments (5 given) on line 9
) expect: 51 (3
)
FAILED: (test/run/t502.py)
-----
class A:
    def __getitem__(self, slices):
        return slices

a = A()

print a[1]
print a[0:2]
print a[:2]
print slice(2)
print a[1:]
print a[:]
print a[::]
print a[::-1]
print a[0,1:2]
print a[0:2,2:30:1]

assert(a[1]==1)
assert(a[0:2]==slice(0,2))
assert(a[0,1:2]==(0,slice(1,2)))
assert(a[0:2,2:30:1]==(slice(0,2), slice(2,30,1)))

assert(slice(0,2) == slice(0,2))
assert(slice(0,2) < slice(1,2))
assert(slice(0,2) < slice(1,1))
assert(slice(2) < slice(0,2))
assert(slice(1,2) < slice(1,2,3))
assert(slice(1,2,3) < slice(1,2,4))
assert(slice(1,-1) < slice(1,1))
assert(slice(0,1) < slice(1,-1))

assert(a["foo"] == "foo")
assert(a["foo":(1,2):True].start == "foo")
assert(a["foo":(1,2):True].stop == (1,2))
assert(a["foo":(1,2):True].step == True)

-----
GOT:
-----
1
slice(0, 2, None)
slice(0, 2, None)
slice(None, 2, None)
slice(1, 2147483647, None)
slice(0, 2147483647, None)
slice(None, None, None)
slice(None, None, -1)
(0, slice(1, 2, None))
(slice(0, 2, None), slice(2, 30, 1))

-----
WANTED:
-----
1
slice(0, 2, None)
slice(0, 2, None)
slice(None, 2, None)
slice(1, 9223372036854775807, None)
slice(0, 9223372036854775807, None)
slice(None, None, None)
slice(None, None, -1)
(0, slice(1, 2, None))
(slice(0, 2, None), slice(2, 30, 1))

-----
DIFF:
-----
len got: 219

len wanted: 237

firstdiff at: 68 got: 50 (2147483647, None)
slice(0, 2147483647, None)
slice(None, None, None)
slice(None, None, -1)
(0, slice(1, 2, None))
(slice(0, 2, None), slice(2, 30, 1))
) expect: 57 (9223372036854775807, None)
slice(0, 9223372036854775807, None)
slice(None, None, None)
slice(None, None, -1)
(0, slice(1, 2, None))
(slice(0, 2, None), slice(2, 30, 1))
)
-----
JS:
-----
Sk._execModule(function($moddata) {
    $moddata.scopes['$scope0'] = $moddata.scopes['$scope0'] || (function($modname) {
        var $frm = Sk._frameEnter(0);
        var $gbl = {};
        if (Sk.retainGlobals) {
            if (Sk.globals) {
                $gbl = Sk.globals;
                Sk.globals = $gbl
            } else {
                Sk.globals = $gbl;
            }
        } else {
            Sk.globals = $gbl;
        }
        var $ctx = $frm.ctx,
            $exc = $ctx.$exc || [],
            $gbl = $ctx.$gbl || {},
            $loc = $ctx.$loc || $gbl,
            $err = undefined;
        $gbl.__name__ = $modname;
        $ctx.$exc = $exc;
        $ctx.$gbl = $gbl;
        $ctx.$loc = $loc;
        try {
            while (true) {
                try {
                    switch ($frm.blk) {
                    case 0:
                        /* --- module entry --- */
                        //
                        // line 1:
                        // class A:
                        // ^
                        //
                        Sk.currLineNo = 1;
                        Sk.currColNo = 0;
                        Sk.currFilename = 'test/run/t502.py';
                        $scope1.co_name = new Sk.builtins['str']('A');
                        $frm.blk = 1; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 1:
                        /* --- before build class --- */
                        $ctx.$built6 = Sk.misceval.buildClass($gbl, $scope1, 'A', []);
                        $ctx.$loc.A = $ctx.$built6;
                        $frm.blk = 2; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 2:
                        /* --- after build class --- */
                        //
                        // line 5:
                        // a = A()
                        // ^
                        //
                        Sk.currLineNo = 5;
                        Sk.currColNo = 0;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$loadname7 = $ctx.$loc.A !== undefined ? $ctx.$loc.A : Sk.misceval.loadname('A', $gbl);
                        $frm.blk = 3; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 3:
                        /* --- before call --- */
                        $ctx.$call8 = Sk.misceval.callsim($ctx.$loadname7);
                        $frm.blk = 4; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 4:
                        /* --- after call --- */
                        //
                        // line 5:
                        // a = A()
                        //     ^
                        //
                        Sk.currLineNo = 5;
                        Sk.currColNo = 4;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$loc.a = $ctx.$call8;
                        //
                        // line 7:
                        // print a[1]
                        // ^
                        //
                        Sk.currLineNo = 7;
                        Sk.currColNo = 0;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$loadname9 = $ctx.$loc.a !== undefined ? $ctx.$loc.a : Sk.misceval.loadname('a', $gbl);
                        $ctx.$lsubscr10 = Sk.abstr.objectGetItem($ctx.$loadname9, new Sk.builtin.nmber(1, 'int'));
                        Sk.misceval.print_(new Sk.builtins['str']($ctx.$lsubscr10).v);
                        Sk.misceval.print_("\n");
                        //
                        // line 8:
                        // print a[0:2]
                        // ^
                        //
                        Sk.currLineNo = 8;
                        Sk.currColNo = 0;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$loadname11 = $ctx.$loc.a !== undefined ? $ctx.$loc.a : Sk.misceval.loadname('a', $gbl);
                        $ctx.$slice12 = new Sk.builtins['slice'](new Sk.builtin.nmber(0, 'int'), new Sk.builtin.nmber(2, 'int'), Sk.builtin.none.none$);
                        $ctx.$lsubscr13 = Sk.abstr.objectGetItem($ctx.$loadname11, $ctx.$slice12);
                        Sk.misceval.print_(new Sk.builtins['str']($ctx.$lsubscr13).v);
                        Sk.misceval.print_("\n");
                        //
                        // line 9:
                        // print a[:2]
                        // ^
                        //
                        Sk.currLineNo = 9;
                        Sk.currColNo = 0;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$loadname14 = $ctx.$loc.a !== undefined ? $ctx.$loc.a : Sk.misceval.loadname('a', $gbl);
                        $ctx.$slice15 = new Sk.builtins['slice'](new Sk.builtin.nmber(0), new Sk.builtin.nmber(2, 'int'), Sk.builtin.none.none$);
                        $ctx.$lsubscr16 = Sk.abstr.objectGetItem($ctx.$loadname14, $ctx.$slice15);
                        Sk.misceval.print_(new Sk.builtins['str']($ctx.$lsubscr16).v);
                        Sk.misceval.print_("\n");
                        //
                        // line 10:
                        // print slice(2)
                        // ^
                        //
                        Sk.currLineNo = 10;
                        Sk.currColNo = 0;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$loadname17 = $ctx.$loc.slice !== undefined ? $ctx.$loc.slice : Sk.misceval.loadname('slice', $gbl);
                        $frm.blk = 5; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 5:
                        /* --- before call --- */
                        $ctx.$call18 = Sk.misceval.callsim($ctx.$loadname17, new Sk.builtin.nmber(2, 'int'));
                        $frm.blk = 6; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 6:
                        /* --- after call --- */
                        //
                        // line 10:
                        // print slice(2)
                        //       ^
                        //
                        Sk.currLineNo = 10;
                        Sk.currColNo = 6;
                        Sk.currFilename = 'test/run/t502.py';
                        Sk.misceval.print_(new Sk.builtins['str']($ctx.$call18).v);
                        Sk.misceval.print_("\n");
                        //
                        // line 11:
                        // print a[1:]
                        // ^
                        //
                        Sk.currLineNo = 11;
                        Sk.currColNo = 0;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$loadname19 = $ctx.$loc.a !== undefined ? $ctx.$loc.a : Sk.misceval.loadname('a', $gbl);
                        $ctx.$slice20 = new Sk.builtins['slice'](new Sk.builtin.nmber(1, 'int'), new Sk.builtin.nmber(2147483647), Sk.builtin.none.none$);
                        $ctx.$lsubscr21 = Sk.abstr.objectGetItem($ctx.$loadname19, $ctx.$slice20);
                        Sk.misceval.print_(new Sk.builtins['str']($ctx.$lsubscr21).v);
                        Sk.misceval.print_("\n");
                        //
                        // line 12:
                        // print a[:]
                        // ^
                        //
                        Sk.currLineNo = 12;
                        Sk.currColNo = 0;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$loadname22 = $ctx.$loc.a !== undefined ? $ctx.$loc.a : Sk.misceval.loadname('a', $gbl);
                        $ctx.$slice23 = new Sk.builtins['slice'](new Sk.builtin.nmber(0), new Sk.builtin.nmber(2147483647), Sk.builtin.none.none$);
                        $ctx.$lsubscr24 = Sk.abstr.objectGetItem($ctx.$loadname22, $ctx.$slice23);
                        Sk.misceval.print_(new Sk.builtins['str']($ctx.$lsubscr24).v);
                        Sk.misceval.print_("\n");
                        //
                        // line 13:
                        // print a[::]
                        // ^
                        //
                        Sk.currLineNo = 13;
                        Sk.currColNo = 0;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$loadname25 = $ctx.$loc.a !== undefined ? $ctx.$loc.a : Sk.misceval.loadname('a', $gbl);
                        $ctx.$slice26 = new Sk.builtins['slice'](Sk.builtin.none.none$, Sk.builtin.none.none$, Sk.builtin.none.none$);
                        $ctx.$lsubscr27 = Sk.abstr.objectGetItem($ctx.$loadname25, $ctx.$slice26);
                        Sk.misceval.print_(new Sk.builtins['str']($ctx.$lsubscr27).v);
                        Sk.misceval.print_("\n");
                        //
                        // line 14:
                        // print a[::-1]
                        // ^
                        //
                        Sk.currLineNo = 14;
                        Sk.currColNo = 0;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$loadname28 = $ctx.$loc.a !== undefined ? $ctx.$loc.a : Sk.misceval.loadname('a', $gbl);
                        $ctx.$slice29 = new Sk.builtins['slice'](Sk.builtin.none.none$, Sk.builtin.none.none$, new Sk.builtin.nmber(-1, 'int'));
                        $ctx.$lsubscr30 = Sk.abstr.objectGetItem($ctx.$loadname28, $ctx.$slice29);
                        Sk.misceval.print_(new Sk.builtins['str']($ctx.$lsubscr30).v);
                        Sk.misceval.print_("\n");
                        //
                        // line 15:
                        // print a[0,1:2]
                        // ^
                        //
                        Sk.currLineNo = 15;
                        Sk.currColNo = 0;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$loadname31 = $ctx.$loc.a !== undefined ? $ctx.$loc.a : Sk.misceval.loadname('a', $gbl);
                        $ctx.$slice32 = new Sk.builtins['slice'](new Sk.builtin.nmber(1, 'int'), new Sk.builtin.nmber(2, 'int'), Sk.builtin.none.none$);
                        $ctx.$extslice33 = new Sk.builtins['tuple']([new Sk.builtin.nmber(0, 'int'), $ctx.$slice32]);
                        $ctx.$lsubscr34 = Sk.abstr.objectGetItem($ctx.$loadname31, $ctx.$extslice33);
                        Sk.misceval.print_(new Sk.builtins['str']($ctx.$lsubscr34).v);
                        Sk.misceval.print_("\n");
                        //
                        // line 16:
                        // print a[0:2,2:30:1]
                        // ^
                        //
                        Sk.currLineNo = 16;
                        Sk.currColNo = 0;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$loadname35 = $ctx.$loc.a !== undefined ? $ctx.$loc.a : Sk.misceval.loadname('a', $gbl);
                        $ctx.$slice36 = new Sk.builtins['slice'](new Sk.builtin.nmber(0, 'int'), new Sk.builtin.nmber(2, 'int'), Sk.builtin.none.none$);
                        $ctx.$slice37 = new Sk.builtins['slice'](new Sk.builtin.nmber(2, 'int'), new Sk.builtin.nmber(30, 'int'), new Sk.builtin.nmber(1, 'int'));
                        $ctx.$extslice38 = new Sk.builtins['tuple']([$ctx.$slice36, $ctx.$slice37]);
                        $ctx.$lsubscr39 = Sk.abstr.objectGetItem($ctx.$loadname35, $ctx.$extslice38);
                        Sk.misceval.print_(new Sk.builtins['str']($ctx.$lsubscr39).v);
                        Sk.misceval.print_("\n");
                        //
                        // line 18:
                        // assert(a[1]==1)
                        // ^
                        //
                        Sk.currLineNo = 18;
                        Sk.currColNo = 0;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$loadname40 = $ctx.$loc.a !== undefined ? $ctx.$loc.a : Sk.misceval.loadname('a', $gbl);
                        $ctx.$lsubscr41 = Sk.abstr.objectGetItem($ctx.$loadname40, new Sk.builtin.nmber(1, 'int'));
                        $ctx.$compareres42 = null;
                        $ctx.$compare43 = Sk.builtin.bool(Sk.misceval.richCompareBool($ctx.$lsubscr41, new Sk.builtin.nmber(1, 'int'), 'Eq'));
                        $ctx.$compareres42 = $ctx.$compare43;
                        $ctx.$jfalse44 = ($ctx.$compare43 === false || !Sk.misceval.isTrue($ctx.$compare43));
                        if ($ctx.$jfalse44) { /*test failed */
                            $frm.blk = 7;
                            Sk.yield();
                            continue;
                        }
                        $frm.blk = 7; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 7:
                        /* --- done --- */
                        $ctx.$jtrue45 = ($ctx.$compareres42 === true || Sk.misceval.isTrue($ctx.$compareres42));
                        if ($ctx.$jtrue45) { /*test passed */
                            $frm.blk = 8;
                            Sk.yield();
                            continue;
                        }
                        throw new Sk.builtin.AssertionError();
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 8:
                        /* --- end --- */
                        //
                        // line 19:
                        // assert(a[0:2]==slice(0,2))
                        // ^
                        //
                        Sk.currLineNo = 19;
                        Sk.currColNo = 0;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$loadname46 = $ctx.$loc.a !== undefined ? $ctx.$loc.a : Sk.misceval.loadname('a', $gbl);
                        $ctx.$slice47 = new Sk.builtins['slice'](new Sk.builtin.nmber(0, 'int'), new Sk.builtin.nmber(2, 'int'), Sk.builtin.none.none$);
                        $ctx.$lsubscr48 = Sk.abstr.objectGetItem($ctx.$loadname46, $ctx.$slice47);
                        $ctx.$compareres49 = null;
                        $ctx.$loadname50 = $ctx.$loc.slice !== undefined ? $ctx.$loc.slice : Sk.misceval.loadname('slice', $gbl);
                        $frm.blk = 10; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 9:
                        /* --- done --- */
                        $ctx.$jtrue54 = ($ctx.$compareres49 === true || Sk.misceval.isTrue($ctx.$compareres49));
                        if ($ctx.$jtrue54) { /*test passed */
                            $frm.blk = 12;
                            Sk.yield();
                            continue;
                        }
                        throw new Sk.builtin.AssertionError();
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 10:
                        /* --- before call --- */
                        $ctx.$call51 = Sk.misceval.callsim($ctx.$loadname50, new Sk.builtin.nmber(0, 'int'), new Sk.builtin.nmber(2, 'int'));
                        $frm.blk = 11; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 11:
                        /* --- after call --- */
                        //
                        // line 19:
                        // assert(a[0:2]==slice(0,2))
                        //                ^
                        //
                        Sk.currLineNo = 19;
                        Sk.currColNo = 15;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$compare52 = Sk.builtin.bool(Sk.misceval.richCompareBool($ctx.$lsubscr48, $ctx.$call51, 'Eq'));
                        $ctx.$compareres49 = $ctx.$compare52;
                        $ctx.$jfalse53 = ($ctx.$compare52 === false || !Sk.misceval.isTrue($ctx.$compare52));
                        if ($ctx.$jfalse53) { /*test failed */
                            $frm.blk = 9;
                            Sk.yield();
                            continue;
                        }
                        $frm.blk = 9; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 12:
                        /* --- end --- */
                        //
                        // line 20:
                        // assert(a[0,1:2]==(0,slice(1,2)))
                        // ^
                        //
                        Sk.currLineNo = 20;
                        Sk.currColNo = 0;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$loadname55 = $ctx.$loc.a !== undefined ? $ctx.$loc.a : Sk.misceval.loadname('a', $gbl);
                        $ctx.$slice56 = new Sk.builtins['slice'](new Sk.builtin.nmber(1, 'int'), new Sk.builtin.nmber(2, 'int'), Sk.builtin.none.none$);
                        $ctx.$extslice57 = new Sk.builtins['tuple']([new Sk.builtin.nmber(0, 'int'), $ctx.$slice56]);
                        $ctx.$lsubscr58 = Sk.abstr.objectGetItem($ctx.$loadname55, $ctx.$extslice57);
                        $ctx.$compareres59 = null;
                        $ctx.$elem60 = new Sk.builtin.nmber(0, 'int');
                        $ctx.$loadname61 = $ctx.$loc.slice !== undefined ? $ctx.$loc.slice : Sk.misceval.loadname('slice', $gbl);
                        $frm.blk = 14; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 13:
                        /* --- done --- */
                        $ctx.$jtrue67 = ($ctx.$compareres59 === true || Sk.misceval.isTrue($ctx.$compareres59));
                        if ($ctx.$jtrue67) { /*test passed */
                            $frm.blk = 16;
                            Sk.yield();
                            continue;
                        }
                        throw new Sk.builtin.AssertionError();
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 14:
                        /* --- before call --- */
                        $ctx.$call62 = Sk.misceval.callsim($ctx.$loadname61, new Sk.builtin.nmber(1, 'int'), new Sk.builtin.nmber(2, 'int'));
                        $frm.blk = 15; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 15:
                        /* --- after call --- */
                        //
                        // line 20:
                        // assert(a[0,1:2]==(0,slice(1,2)))
                        //                     ^
                        //
                        Sk.currLineNo = 20;
                        Sk.currColNo = 20;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$elem63 = $ctx.$call62;
                        $ctx.$loadtuple64 = new Sk.builtins['tuple']([$ctx.$elem60, $ctx.$elem63]);
                        $ctx.$compare65 = Sk.builtin.bool(Sk.misceval.richCompareBool($ctx.$lsubscr58, $ctx.$loadtuple64, 'Eq'));
                        $ctx.$compareres59 = $ctx.$compare65;
                        $ctx.$jfalse66 = ($ctx.$compare65 === false || !Sk.misceval.isTrue($ctx.$compare65));
                        if ($ctx.$jfalse66) { /*test failed */
                            $frm.blk = 13;
                            Sk.yield();
                            continue;
                        }
                        $frm.blk = 13; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 16:
                        /* --- end --- */
                        //
                        // line 21:
                        // assert(a[0:2,2:30:1]==(slice(0,2), slice(2,30,1)))
                        // ^
                        //
                        Sk.currLineNo = 21;
                        Sk.currColNo = 0;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$loadname68 = $ctx.$loc.a !== undefined ? $ctx.$loc.a : Sk.misceval.loadname('a', $gbl);
                        $ctx.$slice69 = new Sk.builtins['slice'](new Sk.builtin.nmber(0, 'int'), new Sk.builtin.nmber(2, 'int'), Sk.builtin.none.none$);
                        $ctx.$slice70 = new Sk.builtins['slice'](new Sk.builtin.nmber(2, 'int'), new Sk.builtin.nmber(30, 'int'), new Sk.builtin.nmber(1, 'int'));
                        $ctx.$extslice71 = new Sk.builtins['tuple']([$ctx.$slice69, $ctx.$slice70]);
                        $ctx.$lsubscr72 = Sk.abstr.objectGetItem($ctx.$loadname68, $ctx.$extslice71);
                        $ctx.$compareres73 = null;
                        $ctx.$loadname74 = $ctx.$loc.slice !== undefined ? $ctx.$loc.slice : Sk.misceval.loadname('slice', $gbl);
                        $frm.blk = 18; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 17:
                        /* --- done --- */
                        $ctx.$jtrue83 = ($ctx.$compareres73 === true || Sk.misceval.isTrue($ctx.$compareres73));
                        if ($ctx.$jtrue83) { /*test passed */
                            $frm.blk = 22;
                            Sk.yield();
                            continue;
                        }
                        throw new Sk.builtin.AssertionError();
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 18:
                        /* --- before call --- */
                        $ctx.$call75 = Sk.misceval.callsim($ctx.$loadname74, new Sk.builtin.nmber(0, 'int'), new Sk.builtin.nmber(2, 'int'));
                        $frm.blk = 19; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 19:
                        /* --- after call --- */
                        //
                        // line 21:
                        // assert(a[0:2,2:30:1]==(slice(0,2), slice(2,30,1)))
                        //                        ^
                        //
                        Sk.currLineNo = 21;
                        Sk.currColNo = 23;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$elem76 = $ctx.$call75;
                        $ctx.$loadname77 = $ctx.$loc.slice !== undefined ? $ctx.$loc.slice : Sk.misceval.loadname('slice', $gbl);
                        $frm.blk = 20; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 20:
                        /* --- before call --- */
                        $ctx.$call78 = Sk.misceval.callsim($ctx.$loadname77, new Sk.builtin.nmber(2, 'int'), new Sk.builtin.nmber(30, 'int'), new Sk.builtin.nmber(1, 'int'));
                        $frm.blk = 21; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 21:
                        /* --- after call --- */
                        //
                        // line 21:
                        // assert(a[0:2,2:30:1]==(slice(0,2), slice(2,30,1)))
                        //                                    ^
                        //
                        Sk.currLineNo = 21;
                        Sk.currColNo = 35;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$elem79 = $ctx.$call78;
                        $ctx.$loadtuple80 = new Sk.builtins['tuple']([$ctx.$elem76, $ctx.$elem79]);
                        $ctx.$compare81 = Sk.builtin.bool(Sk.misceval.richCompareBool($ctx.$lsubscr72, $ctx.$loadtuple80, 'Eq'));
                        $ctx.$compareres73 = $ctx.$compare81;
                        $ctx.$jfalse82 = ($ctx.$compare81 === false || !Sk.misceval.isTrue($ctx.$compare81));
                        if ($ctx.$jfalse82) { /*test failed */
                            $frm.blk = 17;
                            Sk.yield();
                            continue;
                        }
                        $frm.blk = 17; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 22:
                        /* --- end --- */
                        //
                        // line 23:
                        // assert(slice(0,2) == slice(0,2))
                        // ^
                        //
                        Sk.currLineNo = 23;
                        Sk.currColNo = 0;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$loadname84 = $ctx.$loc.slice !== undefined ? $ctx.$loc.slice : Sk.misceval.loadname('slice', $gbl);
                        $frm.blk = 23; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 23:
                        /* --- before call --- */
                        $ctx.$call85 = Sk.misceval.callsim($ctx.$loadname84, new Sk.builtin.nmber(0, 'int'), new Sk.builtin.nmber(2, 'int'));
                        $frm.blk = 24; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 24:
                        /* --- after call --- */
                        //
                        // line 23:
                        // assert(slice(0,2) == slice(0,2))
                        //        ^
                        //
                        Sk.currLineNo = 23;
                        Sk.currColNo = 7;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$compareres86 = null;
                        $ctx.$loadname87 = $ctx.$loc.slice !== undefined ? $ctx.$loc.slice : Sk.misceval.loadname('slice', $gbl);
                        $frm.blk = 26; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 25:
                        /* --- done --- */
                        $ctx.$jtrue91 = ($ctx.$compareres86 === true || Sk.misceval.isTrue($ctx.$compareres86));
                        if ($ctx.$jtrue91) { /*test passed */
                            $frm.blk = 28;
                            Sk.yield();
                            continue;
                        }
                        throw new Sk.builtin.AssertionError();
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 26:
                        /* --- before call --- */
                        $ctx.$call88 = Sk.misceval.callsim($ctx.$loadname87, new Sk.builtin.nmber(0, 'int'), new Sk.builtin.nmber(2, 'int'));
                        $frm.blk = 27; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 27:
                        /* --- after call --- */
                        //
                        // line 23:
                        // assert(slice(0,2) == slice(0,2))
                        //                      ^
                        //
                        Sk.currLineNo = 23;
                        Sk.currColNo = 21;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$compare89 = Sk.builtin.bool(Sk.misceval.richCompareBool($ctx.$call85, $ctx.$call88, 'Eq'));
                        $ctx.$compareres86 = $ctx.$compare89;
                        $ctx.$jfalse90 = ($ctx.$compare89 === false || !Sk.misceval.isTrue($ctx.$compare89));
                        if ($ctx.$jfalse90) { /*test failed */
                            $frm.blk = 25;
                            Sk.yield();
                            continue;
                        }
                        $frm.blk = 25; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 28:
                        /* --- end --- */
                        //
                        // line 24:
                        // assert(slice(0,2) < slice(1,2))
                        // ^
                        //
                        Sk.currLineNo = 24;
                        Sk.currColNo = 0;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$loadname92 = $ctx.$loc.slice !== undefined ? $ctx.$loc.slice : Sk.misceval.loadname('slice', $gbl);
                        $frm.blk = 29; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 29:
                        /* --- before call --- */
                        $ctx.$call93 = Sk.misceval.callsim($ctx.$loadname92, new Sk.builtin.nmber(0, 'int'), new Sk.builtin.nmber(2, 'int'));
                        $frm.blk = 30; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 30:
                        /* --- after call --- */
                        //
                        // line 24:
                        // assert(slice(0,2) < slice(1,2))
                        //        ^
                        //
                        Sk.currLineNo = 24;
                        Sk.currColNo = 7;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$compareres94 = null;
                        $ctx.$loadname95 = $ctx.$loc.slice !== undefined ? $ctx.$loc.slice : Sk.misceval.loadname('slice', $gbl);
                        $frm.blk = 32; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 31:
                        /* --- done --- */
                        $ctx.$jtrue99 = ($ctx.$compareres94 === true || Sk.misceval.isTrue($ctx.$compareres94));
                        if ($ctx.$jtrue99) { /*test passed */
                            $frm.blk = 34;
                            Sk.yield();
                            continue;
                        }
                        throw new Sk.builtin.AssertionError();
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 32:
                        /* --- before call --- */
                        $ctx.$call96 = Sk.misceval.callsim($ctx.$loadname95, new Sk.builtin.nmber(1, 'int'), new Sk.builtin.nmber(2, 'int'));
                        $frm.blk = 33; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 33:
                        /* --- after call --- */
                        //
                        // line 24:
                        // assert(slice(0,2) < slice(1,2))
                        //                     ^
                        //
                        Sk.currLineNo = 24;
                        Sk.currColNo = 20;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$compare97 = Sk.builtin.bool(Sk.misceval.richCompareBool($ctx.$call93, $ctx.$call96, 'Lt'));
                        $ctx.$compareres94 = $ctx.$compare97;
                        $ctx.$jfalse98 = ($ctx.$compare97 === false || !Sk.misceval.isTrue($ctx.$compare97));
                        if ($ctx.$jfalse98) { /*test failed */
                            $frm.blk = 31;
                            Sk.yield();
                            continue;
                        }
                        $frm.blk = 31; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 34:
                        /* --- end --- */
                        //
                        // line 25:
                        // assert(slice(0,2) < slice(1,1))
                        // ^
                        //
                        Sk.currLineNo = 25;
                        Sk.currColNo = 0;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$loadname100 = $ctx.$loc.slice !== undefined ? $ctx.$loc.slice : Sk.misceval.loadname('slice', $gbl);
                        $frm.blk = 35; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 35:
                        /* --- before call --- */
                        $ctx.$call101 = Sk.misceval.callsim($ctx.$loadname100, new Sk.builtin.nmber(0, 'int'), new Sk.builtin.nmber(2, 'int'));
                        $frm.blk = 36; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 36:
                        /* --- after call --- */
                        //
                        // line 25:
                        // assert(slice(0,2) < slice(1,1))
                        //        ^
                        //
                        Sk.currLineNo = 25;
                        Sk.currColNo = 7;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$compareres102 = null;
                        $ctx.$loadname103 = $ctx.$loc.slice !== undefined ? $ctx.$loc.slice : Sk.misceval.loadname('slice', $gbl);
                        $frm.blk = 38; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 37:
                        /* --- done --- */
                        $ctx.$jtrue107 = ($ctx.$compareres102 === true || Sk.misceval.isTrue($ctx.$compareres102));
                        if ($ctx.$jtrue107) { /*test passed */
                            $frm.blk = 40;
                            Sk.yield();
                            continue;
                        }
                        throw new Sk.builtin.AssertionError();
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 38:
                        /* --- before call --- */
                        $ctx.$call104 = Sk.misceval.callsim($ctx.$loadname103, new Sk.builtin.nmber(1, 'int'), new Sk.builtin.nmber(1, 'int'));
                        $frm.blk = 39; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 39:
                        /* --- after call --- */
                        //
                        // line 25:
                        // assert(slice(0,2) < slice(1,1))
                        //                     ^
                        //
                        Sk.currLineNo = 25;
                        Sk.currColNo = 20;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$compare105 = Sk.builtin.bool(Sk.misceval.richCompareBool($ctx.$call101, $ctx.$call104, 'Lt'));
                        $ctx.$compareres102 = $ctx.$compare105;
                        $ctx.$jfalse106 = ($ctx.$compare105 === false || !Sk.misceval.isTrue($ctx.$compare105));
                        if ($ctx.$jfalse106) { /*test failed */
                            $frm.blk = 37;
                            Sk.yield();
                            continue;
                        }
                        $frm.blk = 37; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 40:
                        /* --- end --- */
                        //
                        // line 26:
                        // assert(slice(2) < slice(0,2))
                        // ^
                        //
                        Sk.currLineNo = 26;
                        Sk.currColNo = 0;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$loadname108 = $ctx.$loc.slice !== undefined ? $ctx.$loc.slice : Sk.misceval.loadname('slice', $gbl);
                        $frm.blk = 41; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 41:
                        /* --- before call --- */
                        $ctx.$call109 = Sk.misceval.callsim($ctx.$loadname108, new Sk.builtin.nmber(2, 'int'));
                        $frm.blk = 42; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 42:
                        /* --- after call --- */
                        //
                        // line 26:
                        // assert(slice(2) < slice(0,2))
                        //        ^
                        //
                        Sk.currLineNo = 26;
                        Sk.currColNo = 7;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$compareres110 = null;
                        $ctx.$loadname111 = $ctx.$loc.slice !== undefined ? $ctx.$loc.slice : Sk.misceval.loadname('slice', $gbl);
                        $frm.blk = 44; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 43:
                        /* --- done --- */
                        $ctx.$jtrue115 = ($ctx.$compareres110 === true || Sk.misceval.isTrue($ctx.$compareres110));
                        if ($ctx.$jtrue115) { /*test passed */
                            $frm.blk = 46;
                            Sk.yield();
                            continue;
                        }
                        throw new Sk.builtin.AssertionError();
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 44:
                        /* --- before call --- */
                        $ctx.$call112 = Sk.misceval.callsim($ctx.$loadname111, new Sk.builtin.nmber(0, 'int'), new Sk.builtin.nmber(2, 'int'));
                        $frm.blk = 45; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 45:
                        /* --- after call --- */
                        //
                        // line 26:
                        // assert(slice(2) < slice(0,2))
                        //                   ^
                        //
                        Sk.currLineNo = 26;
                        Sk.currColNo = 18;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$compare113 = Sk.builtin.bool(Sk.misceval.richCompareBool($ctx.$call109, $ctx.$call112, 'Lt'));
                        $ctx.$compareres110 = $ctx.$compare113;
                        $ctx.$jfalse114 = ($ctx.$compare113 === false || !Sk.misceval.isTrue($ctx.$compare113));
                        if ($ctx.$jfalse114) { /*test failed */
                            $frm.blk = 43;
                            Sk.yield();
                            continue;
                        }
                        $frm.blk = 43; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 46:
                        /* --- end --- */
                        //
                        // line 27:
                        // assert(slice(1,2) < slice(1,2,3))
                        // ^
                        //
                        Sk.currLineNo = 27;
                        Sk.currColNo = 0;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$loadname116 = $ctx.$loc.slice !== undefined ? $ctx.$loc.slice : Sk.misceval.loadname('slice', $gbl);
                        $frm.blk = 47; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 47:
                        /* --- before call --- */
                        $ctx.$call117 = Sk.misceval.callsim($ctx.$loadname116, new Sk.builtin.nmber(1, 'int'), new Sk.builtin.nmber(2, 'int'));
                        $frm.blk = 48; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 48:
                        /* --- after call --- */
                        //
                        // line 27:
                        // assert(slice(1,2) < slice(1,2,3))
                        //        ^
                        //
                        Sk.currLineNo = 27;
                        Sk.currColNo = 7;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$compareres118 = null;
                        $ctx.$loadname119 = $ctx.$loc.slice !== undefined ? $ctx.$loc.slice : Sk.misceval.loadname('slice', $gbl);
                        $frm.blk = 50; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 49:
                        /* --- done --- */
                        $ctx.$jtrue123 = ($ctx.$compareres118 === true || Sk.misceval.isTrue($ctx.$compareres118));
                        if ($ctx.$jtrue123) { /*test passed */
                            $frm.blk = 52;
                            Sk.yield();
                            continue;
                        }
                        throw new Sk.builtin.AssertionError();
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 50:
                        /* --- before call --- */
                        $ctx.$call120 = Sk.misceval.callsim($ctx.$loadname119, new Sk.builtin.nmber(1, 'int'), new Sk.builtin.nmber(2, 'int'), new Sk.builtin.nmber(3, 'int'));
                        $frm.blk = 51; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 51:
                        /* --- after call --- */
                        //
                        // line 27:
                        // assert(slice(1,2) < slice(1,2,3))
                        //                     ^
                        //
                        Sk.currLineNo = 27;
                        Sk.currColNo = 20;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$compare121 = Sk.builtin.bool(Sk.misceval.richCompareBool($ctx.$call117, $ctx.$call120, 'Lt'));
                        $ctx.$compareres118 = $ctx.$compare121;
                        $ctx.$jfalse122 = ($ctx.$compare121 === false || !Sk.misceval.isTrue($ctx.$compare121));
                        if ($ctx.$jfalse122) { /*test failed */
                            $frm.blk = 49;
                            Sk.yield();
                            continue;
                        }
                        $frm.blk = 49; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 52:
                        /* --- end --- */
                        //
                        // line 28:
                        // assert(slice(1,2,3) < slice(1,2,4))
                        // ^
                        //
                        Sk.currLineNo = 28;
                        Sk.currColNo = 0;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$loadname124 = $ctx.$loc.slice !== undefined ? $ctx.$loc.slice : Sk.misceval.loadname('slice', $gbl);
                        $frm.blk = 53; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 53:
                        /* --- before call --- */
                        $ctx.$call125 = Sk.misceval.callsim($ctx.$loadname124, new Sk.builtin.nmber(1, 'int'), new Sk.builtin.nmber(2, 'int'), new Sk.builtin.nmber(3, 'int'));
                        $frm.blk = 54; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 54:
                        /* --- after call --- */
                        //
                        // line 28:
                        // assert(slice(1,2,3) < slice(1,2,4))
                        //        ^
                        //
                        Sk.currLineNo = 28;
                        Sk.currColNo = 7;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$compareres126 = null;
                        $ctx.$loadname127 = $ctx.$loc.slice !== undefined ? $ctx.$loc.slice : Sk.misceval.loadname('slice', $gbl);
                        $frm.blk = 56; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 55:
                        /* --- done --- */
                        $ctx.$jtrue131 = ($ctx.$compareres126 === true || Sk.misceval.isTrue($ctx.$compareres126));
                        if ($ctx.$jtrue131) { /*test passed */
                            $frm.blk = 58;
                            Sk.yield();
                            continue;
                        }
                        throw new Sk.builtin.AssertionError();
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 56:
                        /* --- before call --- */
                        $ctx.$call128 = Sk.misceval.callsim($ctx.$loadname127, new Sk.builtin.nmber(1, 'int'), new Sk.builtin.nmber(2, 'int'), new Sk.builtin.nmber(4, 'int'));
                        $frm.blk = 57; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 57:
                        /* --- after call --- */
                        //
                        // line 28:
                        // assert(slice(1,2,3) < slice(1,2,4))
                        //                       ^
                        //
                        Sk.currLineNo = 28;
                        Sk.currColNo = 22;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$compare129 = Sk.builtin.bool(Sk.misceval.richCompareBool($ctx.$call125, $ctx.$call128, 'Lt'));
                        $ctx.$compareres126 = $ctx.$compare129;
                        $ctx.$jfalse130 = ($ctx.$compare129 === false || !Sk.misceval.isTrue($ctx.$compare129));
                        if ($ctx.$jfalse130) { /*test failed */
                            $frm.blk = 55;
                            Sk.yield();
                            continue;
                        }
                        $frm.blk = 55; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 58:
                        /* --- end --- */
                        //
                        // line 29:
                        // assert(slice(1,-1) < slice(1,1))
                        // ^
                        //
                        Sk.currLineNo = 29;
                        Sk.currColNo = 0;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$loadname132 = $ctx.$loc.slice !== undefined ? $ctx.$loc.slice : Sk.misceval.loadname('slice', $gbl);
                        $frm.blk = 59; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 59:
                        /* --- before call --- */
                        $ctx.$call133 = Sk.misceval.callsim($ctx.$loadname132, new Sk.builtin.nmber(1, 'int'), new Sk.builtin.nmber(-1, 'int'));
                        $frm.blk = 60; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 60:
                        /* --- after call --- */
                        //
                        // line 29:
                        // assert(slice(1,-1) < slice(1,1))
                        //        ^
                        //
                        Sk.currLineNo = 29;
                        Sk.currColNo = 7;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$compareres134 = null;
                        $ctx.$loadname135 = $ctx.$loc.slice !== undefined ? $ctx.$loc.slice : Sk.misceval.loadname('slice', $gbl);
                        $frm.blk = 62; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 61:
                        /* --- done --- */
                        $ctx.$jtrue139 = ($ctx.$compareres134 === true || Sk.misceval.isTrue($ctx.$compareres134));
                        if ($ctx.$jtrue139) { /*test passed */
                            $frm.blk = 64;
                            Sk.yield();
                            continue;
                        }
                        throw new Sk.builtin.AssertionError();
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 62:
                        /* --- before call --- */
                        $ctx.$call136 = Sk.misceval.callsim($ctx.$loadname135, new Sk.builtin.nmber(1, 'int'), new Sk.builtin.nmber(1, 'int'));
                        $frm.blk = 63; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 63:
                        /* --- after call --- */
                        //
                        // line 29:
                        // assert(slice(1,-1) < slice(1,1))
                        //                      ^
                        //
                        Sk.currLineNo = 29;
                        Sk.currColNo = 21;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$compare137 = Sk.builtin.bool(Sk.misceval.richCompareBool($ctx.$call133, $ctx.$call136, 'Lt'));
                        $ctx.$compareres134 = $ctx.$compare137;
                        $ctx.$jfalse138 = ($ctx.$compare137 === false || !Sk.misceval.isTrue($ctx.$compare137));
                        if ($ctx.$jfalse138) { /*test failed */
                            $frm.blk = 61;
                            Sk.yield();
                            continue;
                        }
                        $frm.blk = 61; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 64:
                        /* --- end --- */
                        //
                        // line 30:
                        // assert(slice(0,1) < slice(1,-1))
                        // ^
                        //
                        Sk.currLineNo = 30;
                        Sk.currColNo = 0;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$loadname140 = $ctx.$loc.slice !== undefined ? $ctx.$loc.slice : Sk.misceval.loadname('slice', $gbl);
                        $frm.blk = 65; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 65:
                        /* --- before call --- */
                        $ctx.$call141 = Sk.misceval.callsim($ctx.$loadname140, new Sk.builtin.nmber(0, 'int'), new Sk.builtin.nmber(1, 'int'));
                        $frm.blk = 66; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 66:
                        /* --- after call --- */
                        //
                        // line 30:
                        // assert(slice(0,1) < slice(1,-1))
                        //        ^
                        //
                        Sk.currLineNo = 30;
                        Sk.currColNo = 7;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$compareres142 = null;
                        $ctx.$loadname143 = $ctx.$loc.slice !== undefined ? $ctx.$loc.slice : Sk.misceval.loadname('slice', $gbl);
                        $frm.blk = 68; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 67:
                        /* --- done --- */
                        $ctx.$jtrue147 = ($ctx.$compareres142 === true || Sk.misceval.isTrue($ctx.$compareres142));
                        if ($ctx.$jtrue147) { /*test passed */
                            $frm.blk = 70;
                            Sk.yield();
                            continue;
                        }
                        throw new Sk.builtin.AssertionError();
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 68:
                        /* --- before call --- */
                        $ctx.$call144 = Sk.misceval.callsim($ctx.$loadname143, new Sk.builtin.nmber(1, 'int'), new Sk.builtin.nmber(-1, 'int'));
                        $frm.blk = 69; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 69:
                        /* --- after call --- */
                        //
                        // line 30:
                        // assert(slice(0,1) < slice(1,-1))
                        //                     ^
                        //
                        Sk.currLineNo = 30;
                        Sk.currColNo = 20;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$compare145 = Sk.builtin.bool(Sk.misceval.richCompareBool($ctx.$call141, $ctx.$call144, 'Lt'));
                        $ctx.$compareres142 = $ctx.$compare145;
                        $ctx.$jfalse146 = ($ctx.$compare145 === false || !Sk.misceval.isTrue($ctx.$compare145));
                        if ($ctx.$jfalse146) { /*test failed */
                            $frm.blk = 67;
                            Sk.yield();
                            continue;
                        }
                        $frm.blk = 67; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 70:
                        /* --- end --- */
                        //
                        // line 32:
                        // assert(a["foo"] == "foo")
                        // ^
                        //
                        Sk.currLineNo = 32;
                        Sk.currColNo = 0;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$loadname148 = $ctx.$loc.a !== undefined ? $ctx.$loc.a : Sk.misceval.loadname('a', $gbl);
                        $ctx.$str149 = new Sk.builtins['str']('foo');
                        $ctx.$lsubscr150 = Sk.abstr.objectGetItem($ctx.$loadname148, $ctx.$str149);
                        $ctx.$compareres151 = null;
                        $ctx.$str152 = new Sk.builtins['str']('foo');
                        $ctx.$compare153 = Sk.builtin.bool(Sk.misceval.richCompareBool($ctx.$lsubscr150, $ctx.$str152, 'Eq'));
                        $ctx.$compareres151 = $ctx.$compare153;
                        $ctx.$jfalse154 = ($ctx.$compare153 === false || !Sk.misceval.isTrue($ctx.$compare153));
                        if ($ctx.$jfalse154) { /*test failed */
                            $frm.blk = 71;
                            Sk.yield();
                            continue;
                        }
                        $frm.blk = 71; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 71:
                        /* --- done --- */
                        $ctx.$jtrue155 = ($ctx.$compareres151 === true || Sk.misceval.isTrue($ctx.$compareres151));
                        if ($ctx.$jtrue155) { /*test passed */
                            $frm.blk = 72;
                            Sk.yield();
                            continue;
                        }
                        throw new Sk.builtin.AssertionError();
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 72:
                        /* --- end --- */
                        //
                        // line 33:
                        // assert(a["foo":(1,2):True].start == "foo")
                        // ^
                        //
                        Sk.currLineNo = 33;
                        Sk.currColNo = 0;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$loadname156 = $ctx.$loc.a !== undefined ? $ctx.$loc.a : Sk.misceval.loadname('a', $gbl);
                        $ctx.$str157 = new Sk.builtins['str']('foo');
                        $ctx.$elem158 = new Sk.builtin.nmber(1, 'int');
                        $ctx.$elem159 = new Sk.builtin.nmber(2, 'int');
                        $ctx.$loadtuple160 = new Sk.builtins['tuple']([$ctx.$elem158, $ctx.$elem159]);
                        $ctx.$slice161 = new Sk.builtins['slice']($ctx.$str157, $ctx.$loadtuple160, Sk.builtin.bool.true$);
                        $ctx.$lsubscr162 = Sk.abstr.objectGetItem($ctx.$loadname156, $ctx.$slice161);
                        $ctx.$lattr163 = Sk.abstr.gattr($ctx.$lsubscr162, 'start');
                        $ctx.$compareres164 = null;
                        $ctx.$str165 = new Sk.builtins['str']('foo');
                        $ctx.$compare166 = Sk.builtin.bool(Sk.misceval.richCompareBool($ctx.$lattr163, $ctx.$str165, 'Eq'));
                        $ctx.$compareres164 = $ctx.$compare166;
                        $ctx.$jfalse167 = ($ctx.$compare166 === false || !Sk.misceval.isTrue($ctx.$compare166));
                        if ($ctx.$jfalse167) { /*test failed */
                            $frm.blk = 73;
                            Sk.yield();
                            continue;
                        }
                        $frm.blk = 73; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 73:
                        /* --- done --- */
                        $ctx.$jtrue168 = ($ctx.$compareres164 === true || Sk.misceval.isTrue($ctx.$compareres164));
                        if ($ctx.$jtrue168) { /*test passed */
                            $frm.blk = 74;
                            Sk.yield();
                            continue;
                        }
                        throw new Sk.builtin.AssertionError();
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 74:
                        /* --- end --- */
                        //
                        // line 34:
                        // assert(a["foo":(1,2):True].stop == (1,2))
                        // ^
                        //
                        Sk.currLineNo = 34;
                        Sk.currColNo = 0;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$loadname169 = $ctx.$loc.a !== undefined ? $ctx.$loc.a : Sk.misceval.loadname('a', $gbl);
                        $ctx.$str170 = new Sk.builtins['str']('foo');
                        $ctx.$elem171 = new Sk.builtin.nmber(1, 'int');
                        $ctx.$elem172 = new Sk.builtin.nmber(2, 'int');
                        $ctx.$loadtuple173 = new Sk.builtins['tuple']([$ctx.$elem171, $ctx.$elem172]);
                        $ctx.$slice174 = new Sk.builtins['slice']($ctx.$str170, $ctx.$loadtuple173, Sk.builtin.bool.true$);
                        $ctx.$lsubscr175 = Sk.abstr.objectGetItem($ctx.$loadname169, $ctx.$slice174);
                        $ctx.$lattr176 = Sk.abstr.gattr($ctx.$lsubscr175, 'stop');
                        $ctx.$compareres177 = null;
                        $ctx.$elem178 = new Sk.builtin.nmber(1, 'int');
                        $ctx.$elem179 = new Sk.builtin.nmber(2, 'int');
                        $ctx.$loadtuple180 = new Sk.builtins['tuple']([$ctx.$elem178, $ctx.$elem179]);
                        $ctx.$compare181 = Sk.builtin.bool(Sk.misceval.richCompareBool($ctx.$lattr176, $ctx.$loadtuple180, 'Eq'));
                        $ctx.$compareres177 = $ctx.$compare181;
                        $ctx.$jfalse182 = ($ctx.$compare181 === false || !Sk.misceval.isTrue($ctx.$compare181));
                        if ($ctx.$jfalse182) { /*test failed */
                            $frm.blk = 75;
                            Sk.yield();
                            continue;
                        }
                        $frm.blk = 75; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 75:
                        /* --- done --- */
                        $ctx.$jtrue183 = ($ctx.$compareres177 === true || Sk.misceval.isTrue($ctx.$compareres177));
                        if ($ctx.$jtrue183) { /*test passed */
                            $frm.blk = 76;
                            Sk.yield();
                            continue;
                        }
                        throw new Sk.builtin.AssertionError();
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 76:
                        /* --- end --- */
                        //
                        // line 35:
                        // assert(a["foo":(1,2):True].step == True)
                        // ^
                        //
                        Sk.currLineNo = 35;
                        Sk.currColNo = 0;
                        Sk.currFilename = 'test/run/t502.py';
                        $ctx.$loadname184 = $ctx.$loc.a !== undefined ? $ctx.$loc.a : Sk.misceval.loadname('a', $gbl);
                        $ctx.$str185 = new Sk.builtins['str']('foo');
                        $ctx.$elem186 = new Sk.builtin.nmber(1, 'int');
                        $ctx.$elem187 = new Sk.builtin.nmber(2, 'int');
                        $ctx.$loadtuple188 = new Sk.builtins['tuple']([$ctx.$elem186, $ctx.$elem187]);
                        $ctx.$slice189 = new Sk.builtins['slice']($ctx.$str185, $ctx.$loadtuple188, Sk.builtin.bool.true$);
                        $ctx.$lsubscr190 = Sk.abstr.objectGetItem($ctx.$loadname184, $ctx.$slice189);
                        $ctx.$lattr191 = Sk.abstr.gattr($ctx.$lsubscr190, 'step');
                        $ctx.$compareres192 = null;
                        $ctx.$compare193 = Sk.builtin.bool(Sk.misceval.richCompareBool($ctx.$lattr191, Sk.builtin.bool.true$, 'Eq'));
                        $ctx.$compareres192 = $ctx.$compare193;
                        $ctx.$jfalse194 = ($ctx.$compare193 === false || !Sk.misceval.isTrue($ctx.$compare193));
                        if ($ctx.$jfalse194) { /*test failed */
                            $frm.blk = 77;
                            Sk.yield();
                            continue;
                        }
                        $frm.blk = 77; /* jump */
                        Sk.yield();
                        continue;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 77:
                        /* --- done --- */
                        $ctx.$jtrue195 = ($ctx.$compareres192 === true || Sk.misceval.isTrue($ctx.$compareres192));
                        if ($ctx.$jtrue195) { /*test passed */
                            $frm.blk = 78;
                            Sk.yield();
                            continue;
                        }
                        throw new Sk.builtin.AssertionError();
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    case 78:
                        /* --- end --- */
                        Sk._frameLeave();
                        return $loc;
                        throw new Sk.builtin.SystemError('internal error: unterminated block');
                    }
                } catch (err) {
                    if ($exc.length > 0) {
                        $err = err;
                        $blk = $exc.pop();
                        continue;
                    } else {
                        throw err;
                    }
                }
            }
        } catch (err) {
            if (err instanceof Sk.builtin.SystemExit && !Sk.throwSystemExit) {
                Sk.misceval.print_(err.toString() + '\n');
                return $loc;
            } else {
                throw err;
            }
        }
    });
    var $scope0 = $moddata.scopes['$scope0'];
    $moddata.scopes['$scope1'] = $moddata.scopes['$scope1'] || (function $A$class_outer($globals, $locals, $rest) {
        var $gbl = $outergbl = $globals,
            $loc = $outerloc = $locals;
        return (function A() {
            var $frm = Sk._frameEnter(0);
            var $ctx = $frm.ctx,
                $exc = $ctx.$exc || [],
                $gbl = $ctx.$gbl || $globals,
                $loc = $ctx.$loc || $locals;
            $ctx.$exc = $exc;
            $ctx.$gbl = $gbl;
            $ctx.$loc = $loc;
            while (true) {
                switch ($frm.blk) {
                case 0:
                    /* --- class entry --- */
                    //
                    // line 2:
                    //     def __getitem__(self, slices):
                    //     ^
                    //
                    Sk.currLineNo = 2;
                    Sk.currColNo = 4;
                    Sk.currFilename = 'test/run/t502.py';
                    $scope2.co_name = new Sk.builtins['str']('__getitem__');
                    $scope2.co_varnames = ['self', 'slices'];
                    $ctx.$funcobj5 = new Sk.builtins['function']($scope2, $gbl);
                    $ctx.$loc.__getitem__ = $ctx.$funcobj5;
                    break;
                    throw new Sk.builtin.SystemError('internal error: unterminated block');
                };
                Sk._frameLeave();
                break;
            }
        }).apply(null, $rest);
    });
    var $scope1 = $moddata.scopes['$scope1'];
    $moddata.scopes['$scope2'] = $moddata.scopes['$scope2'] || (function $__getitem__3$(self, slices) {
        var $frm = Sk._frameEnter(0);
        var $ctx = $frm.ctx,
            $exc = $ctx.$exc || [],
            $loc = $ctx.$loc || {},
            $gbl = $ctx.$gbl || this,
            $err = undefined;
        $ctx.$exc = $exc;
        $ctx.$gbl = $gbl;
        $ctx.$loc = $loc;
        $ctx.self = $ctx.self || self;
        $ctx.slices = $ctx.slices || slices;
        Sk.builtin.pyCheckArgs("__getitem__", arguments, 2, 2, false, false);
        while (true) {
            try {
                switch ($frm.blk) {
                case 0:
                    /* --- codeobj entry --- */
                    //
                    // line 3:
                    //         return slices
                    //         ^
                    //
                    Sk.currLineNo = 3;
                    Sk.currColNo = 8;
                    Sk.currFilename = 'test/run/t502.py';
                    $ctx.$loadname4 = $ctx.slices !== undefined ? $ctx.slices : Sk.misceval.loadname('slices', $gbl);
                    Sk._frameLeave();
                    return $ctx.$loadname4;
                    Sk._frameLeave();
                    return Sk.builtin.none.none$;
                    throw new Sk.builtin.SystemError('internal error: unterminated block');
                }
            } catch (err) {
                if ($exc.length > 0) {
                    $err = err;
                    $blk = $exc.pop();
                    continue;
                } else {
                    throw err;
                }
            }
        }
    });
    var $scope2 = $moddata.scopes['$scope2'];
    return $scope0(new Sk.builtin.str('__main__'));
});
FAILED: (test/run/t503.py)
-----
class Comparable:    
    def __init__(self,value):
        self.value = value
 
    def __lt__(self,other):
        return self.value < other.value
 
    def __repr__(self):
        return "Value :" + str(self.value)
 
 
lst = [5,9,2,7]
otherLst = [Comparable(a) for a in lst]
 
 
print lst
print otherLst
 
print min(lst)
print min(otherLst)

-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes exactly 2 arguments (5 given) on line 13

-----
WANTED:
-----
[5, 9, 2, 7]
[Value :5, Value :9, Value :2, Value :7]
2
Value :2

-----
DIFF:
-----
len got: 80

len wanted: 65

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: __init__() takes exactly 2 arguments (5 given) on line 13
) expect: 91 ([5, 9, 2, 7]
[Value :5, Value :9, Value :2, Value :7]
2
Value :2
)
FAILED: (test/run/t509.py)
-----
try:
    raise TypeError, "abc"
except TypeError as e:
    print "caught", e

try:
    try:
        raise TypeError("abc")
    except TypeError as e:
        print "caught", e
        raise
except TypeError as e:
    print "caught re-raise: ", e

try:
    raise TypeError
except TypeError as e:
    print "caught", e

-----
GOT:
-----
EXCEPTION: SyntaxError

-----
WANTED:
-----
caught TypeError: abc on line 2
caught TypeError: abc on line 8
caught re-raise:  TypeError: abc on line 8
caught TypeError:  on line 16

-----
DIFF:
-----
len got: 23

len wanted: 137

firstdiff at: 0 got: 69 (EXCEPTION: SyntaxError
) expect: 99 (caught TypeError: abc on line 2
caught TypeError: abc on line 8
caught re-raise:  TypeError: abc on line 8
caught TypeError:  on line 16
)
FAILED: (test/run/t510.py)
-----
l = [1, 2, 3, 4]
for i in l.__iter__():
    print i

class MyIterable:
    def __init__(self, lst):
        self.x = 3
        self.iter = lst

    def __iter__(self):
        return self.iter.__iter__()

mi = MyIterable([5, 6, 7])

for i in mi.__iter__():
    print i

for i in mi:
    print i

class Counter:
    def __init__(self, low, high):
        self.current = low
        self.high = high

    def __iter__(self):
        return self

    def next(self):
        if self.current > self.high:
            raise StopIteration
        else:
            self.current += 1
            return self.current - 1


for c in Counter(9, 12):
    print c

# class SillyDictIter:
# not reliable because order isn't guaranteed
#     def __init__(self):
#         self.w = {'f':1, 'o':2, 'g':3}


#     def __iter__(self):
#         return self.w.__iter__()

# x = SillyDictIter()

# for i in x:
#    print i


class SillyTupleIter:
    def __init__(self,s):
        self.w = tuple(s)


    def __iter__(self):
        return self.w.__iter__()

x = SillyTupleIter("foo")

for i in x:
   print i
-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes exactly 2 arguments (5 given) on line 13

-----
WANTED:
-----
1
2
3
4
5
6
7
5
6
7
9
10
11
12
f
o
o

-----
DIFF:
-----
len got: 80

len wanted: 37

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: __init__() takes exactly 2 arguments (5 given) on line 13
) expect: 49 (1
2
3
4
5
6
7
5
6
7
9
10
11
12
f
o
o
)
FAILED: (test/run/t514.py)
-----
try:
    print "a" * "b"
except TypeError as e:
    print e

try:
    print "a" * 3.4
except TypeError as e:
    print e

try:
    print 3.4 * "b"
except TypeError as e:
    print e

try:
    print "a" * [2]
except TypeError as e:
    print e

try:
    print [2] * "b"
except TypeError as e:
    print e





-----
GOT:
-----
EXCEPTION: SyntaxError

-----
WANTED:
-----
TypeError: can't multiply sequence by non-int of type 'str' on line 2
TypeError: can't multiply sequence by non-int of type 'float' on line 7
TypeError: can't multiply sequence by non-int of type 'float' on line 12
TypeError: can't multiply sequence by non-int of type 'list' on line 17
TypeError: can't multiply sequence by non-int of type 'str' on line 22

-----
DIFF:
-----
len got: 23

len wanted: 358

firstdiff at: 0 got: 69 (EXCEPTION: SyntaxError
) expect: 84 (TypeError: can't multiply sequence by non-int of type 'str' on line 2
TypeError: can't multiply sequence by non-int of type 'float' on line 7
TypeError: can't multiply sequence by non-int of type 'float' on line 12
TypeError: can't multiply sequence by non-int of type 'list' on line 17
TypeError: can't multiply sequence by non-int of type 'str' on line 22
)
FAILED: (test/run/t518.py)
-----
list = [0, 1, 2, 3] 
try:
    print list[1 : : 0]
except ValueError as e:
    print e

try:
    print list[1 : 3 : 0]
except ValueError as e:
    print e

-----
GOT:
-----
EXCEPTION: SyntaxError

-----
WANTED:
-----
ValueError: slice step cannot be zero on line 3
ValueError: slice step cannot be zero on line 8

-----
DIFF:
-----
len got: 23

len wanted: 96

firstdiff at: 0 got: 69 (EXCEPTION: SyntaxError
) expect: 86 (ValueError: slice step cannot be zero on line 3
ValueError: slice step cannot be zero on line 8
)
FAILED: (test/run/t519.py)
-----
l = ['h','e','l','l','o']

print l.index('l')
print l.index('l', 2)
print l.index('l', 3)
print l.index('l', 2, 3)
print l.index('l', 3, 4)
print l.index('l', 2, -1)
print l.index('l', 2, -2)
print l.index('l', 3, -1)

try:
    print l.index('l', 4)
except ValueError as e:
    print e

try:
    print l.index('l', -1)
except ValueError as e:
    print e

try:
    print l.index('l', 2, 2)
except ValueError as e:
    print e

try:
    print l.index('l', 3, 2)
except ValueError as e:
    print e

try:
    print l.index('l', 3, -2)
except ValueError as e:
    print e

try:
    print l.index('l', 3, 0)
except ValueError as e:
    print e

try:
    print l.index('l', 4.3)
except TypeError as e:
    print e

try:
    print l.index('l', 3, 0.6)
except TypeError as e:
    print e

-----
GOT:
-----
EXCEPTION: SyntaxError

-----
WANTED:
-----
2
2
3
2
3
2
2
3
ValueError: list.index(x): x not in list on line 13
ValueError: list.index(x): x not in list on line 18
ValueError: list.index(x): x not in list on line 23
ValueError: list.index(x): x not in list on line 28
ValueError: list.index(x): x not in list on line 33
ValueError: list.index(x): x not in list on line 38
TypeError: slice indices must be integers on line 43
TypeError: slice indices must be integers on line 48

-----
DIFF:
-----
len got: 23

len wanted: 434

firstdiff at: 0 got: 69 (EXCEPTION: SyntaxError
) expect: 50 (2
2
3
2
3
2
2
3
ValueError: list.index(x): x not in list on line 13
ValueError: list.index(x): x not in list on line 18
ValueError: list.index(x): x not in list on line 23
ValueError: list.index(x): x not in list on line 28
ValueError: list.index(x): x not in list on line 33
ValueError: list.index(x): x not in list on line 38
TypeError: slice indices must be integers on line 43
TypeError: slice indices must be integers on line 48
)
FAILED: (test/run/t520.py)
-----
x = any([1,2])
print x, type(x)

y = all([1,2])
print x, type(x)

z = isinstance(5, int)
print z, type(z)

print hash(True), type(hash(True))
print hash(None), type(hash(None))
print hash("hello"), type(hash("hello"))

a = hasattr("hello", "not_a_method")
print a, type(a)

-----
GOT:
-----
True <type 'bool'>
True <type 'bool'>
True <type 'bool'>
1 <type 'int'>
0 <type 'int'>
91 <type 'int'>
False <type 'bool'>

-----
WANTED:
-----
True <type 'bool'>
True <type 'bool'>
True <type 'bool'>
1 <type 'int'>
0 <type 'int'>
113 <type 'int'>
False <type 'bool'>

-----
DIFF:
-----
len got: 123

len wanted: 124

firstdiff at: 87 got: 57 (91 <type 'int'>
False <type 'bool'>
) expect: 49 (113 <type 'int'>
False <type 'bool'>
)
FAILED: (test/run/t522.py)
-----
class A:
    def __len__(self):
        return 0

print bool(A())

class B:
    def __len__(self):
        return False

print bool(B())

class C:
    def __nonzero__(self):
        return 0

print bool(C())

class D:
    def __nonzero__(self):
        return False

print bool(D())

class E:
    def __len__(self):
        return 1

print bool(E())

class F:
    def __nonzero__(self):
        return 1

print bool(F())

class G:
    def __nonzero__ (self):
        return 0

    def __len__ (self):
        return 1

print bool(G())

-----
GOT:
-----
EXCEPTION: TypeError: object of type 'C' has no len() on line 17

-----
WANTED:
-----
False
False
False
False
True
True
False

-----
DIFF:
-----
len got: 65

len wanted: 40

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: object of type 'C' has no len() on line 17
) expect: 70 (False
False
False
False
True
True
False
)
FAILED: (test/run/t523.py)
-----
class A:
    def __nonzero__(self):
        return "not the right value"

try:
    print bool(A())
except TypeError as e:
    print e

class B:
    def __len__(self):
        return "not the right value"

try:
    print bool(B())
except TypeError as e:
    print e

-----
GOT:
-----
EXCEPTION: SyntaxError

-----
WANTED:
-----
TypeError: __nonzero__ should return an int on line 3
TypeError: __len__ should return an int on line 12

-----
DIFF:
-----
len got: 23

len wanted: 105

firstdiff at: 0 got: 69 (EXCEPTION: SyntaxError
) expect: 84 (TypeError: __nonzero__ should return an int on line 3
TypeError: __len__ should return an int on line 12
)
FAILED: (test/run/t530.py)
-----
class GeneratorClass:
    test = "hi"
    def __init__(self):
        pass
    def generator(self):
	print self.test
        for i in range(10):
            yield i

gen = GeneratorClass()

for g in gen.generator():
    print g
-----
GOT:
-----
EXCEPTION: TypeError: __init__() takes exactly 1 arguments (5 given) on line 10

-----
WANTED:
-----
hi
0
1
2
3
4
5
6
7
8
9

-----
DIFF:
-----
len got: 80

len wanted: 23

firstdiff at: 0 got: 69 (EXCEPTION: TypeError: __init__() takes exactly 1 arguments (5 given) on line 10
) expect: 104 (hi
0
1
2
3
4
5
6
7
8
9
)
FAILED: (test/run/t533.py)
-----
def foo():
    pass
    
bar = 11

print globals()['bar']
print 'foo' in globals()

def baz(x):
    print 'baz' in globals()
    
baz(10)


class MyClass:
    def __init__(self):
        print globals()['__name__']
        print 'MyClass' in globals()
        print type(globals()['baz'])
        
y = MyClass()

-----
GOT:
-----
EXCEPTION: KeyError: bar on line 6

-----
WANTED:
-----
11
True
True
__main__
True
<type 'function'>

-----
DIFF:
-----
len got: 35

len wanted: 45

firstdiff at: 0 got: 69 (EXCEPTION: KeyError: bar on line 6
) expect: 49 (11
True
True
__main__
True
<type 'function'>
)
FAILED: (test/run/t534.py)
-----
class U(object):
    def __repr__(self): return "<U>"
    def __pos__(self): return 'pos'
    def __neg__(self): return 'neg'
    def __invert__(self): return 'invert'


print U()
print -(U())
print +(U())
print ~(U())

class E(object):
    def __repr__(self): return "<U>"


try: print +E()
except TypeError: print 'no +'

-----
GOT:
-----
EXCEPTION: SyntaxError

-----
WANTED:
-----
<U>
neg
pos
invert
no +

-----
DIFF:
-----
len got: 23

len wanted: 24

firstdiff at: 0 got: 69 (EXCEPTION: SyntaxError
) expect: 60 (<U>
neg
pos
invert
no +
)
FAILED: (test/run/t537.py)
-----
try:
    min(3)
except TypeError:
    print "min(3) raises type error"

try:
    max(3)
except TypeError:
    print "max(3) raises type error"

try:
    min([])
except ValueError:
    print "min([]) raises value error"

try:
    max(tuple())
except ValueError:
    print "max(tuple()) raises value error"

print max(i for i in range(7))
print min(j for j in range(4, 1, -1))

-----
GOT:
-----
EXCEPTION: SyntaxError

-----
WANTED:
-----
min(3) raises type error
max(3) raises type error
min([]) raises value error
max(tuple()) raises value error
6
2

-----
DIFF:
-----
len got: 23

len wanted: 113

firstdiff at: 0 got: 69 (EXCEPTION: SyntaxError
) expect: 109 (min(3) raises type error
max(3) raises type error
min([]) raises value error
max(tuple()) raises value error
6
2
)
run: 463/537 (+2 disabled)
closure: skipped
