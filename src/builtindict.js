// Note: the hacky names on int, long, float have to correspond with the
// uniquization that the compiler does for words that are reserved in
// Javascript. This is a bit hokey.
Sk.builtins = {
'range': Sk.builtin.range,
'round': Sk.builtin.round,
'len': Sk.builtin.len,
'min': Sk.builtin.min,
'max': Sk.builtin.max,
'sum': Sk.builtin.sum,
'zip': Sk.builtin.zip,
'abs': Sk.builtin.abs,
'chr': Sk.builtin.chr,
'dict': Sk.builtin.dict,
'hex': Sk.builtin.hex,
'oct': Sk.builtin.oct,
'bin': Sk.builtin.bin,
'dir': Sk.builtin.dir,
'fabs': Sk.builtin.abs, 
'float_$rw$': Sk.builtin.float_,
'getattr': Sk.builtin.getattr,
'globals': Sk.builtin.globals, 
'hash': Sk.builtin.hash,
'int_$rw$': Sk.builtin.int_,
'isinstance': Sk.builtin.isinstance,
'list': Sk.builtin.list,
'locals': Sk.builtin.locals,
'open': Sk.builtin.open,
'ord': Sk.builtin.ord,
'repr': Sk.builtin.repr,
'hasattr': Sk.builtin.hasattr,

'map' : Sk.builtin.map,
'filter' : Sk.builtin.filter,
'reduce' : Sk.builtin.reduce,
'sorted' : Sk.builtin.sorted,

'bool': Sk.builtin.bool,
'any': Sk.builtin.any,
'all': Sk.builtin.all,

'AttributeError': Sk.builtin.AttributeError,
'ValueError': Sk.builtin.ValueError,
'Exception' : Sk.builtin.Exception,
'ZeroDivisionError' : Sk.builtin.ZeroDivisionError,
'AssertionError' : Sk.builtin.AssertionError,
'ImportError' : Sk.builtin.ImportError,
'IndentationError' : Sk.builtin.IndentationError,
'IndexError' : Sk.builtin.IndexError,
'KeyError' : Sk.builtin.KeyError,
'TypeError' : Sk.builtin.TypeError,
'NameError' : Sk.builtin.NameError,
'IOError' : Sk.builtin.IOError,
'NotImplementedError' : Sk.builtin.NotImplementedError,
'SystemExit': Sk.builtin.SystemExit,
'OverflowError' : Sk.builtin.OverflowError,
'OperationError': Sk.builtin.OperationError,

'file': Sk.builtin.file,
'function': Sk.builtin.func,
'generator': Sk.builtin.generator,
'long_$rw$': Sk.builtin.lng,
'method': Sk.builtin.method,
'object': Sk.builtin.object,
'slice': Sk.builtin.slice,
'str': Sk.builtin.str,
'set': Sk.builtin.set,
'tuple': Sk.builtin.tuple,
'type': Sk.builtin.type,
'input': Sk.builtin.input,
'raw_input': Sk.builtin.raw_input,
'jseval': Sk.builtin.jseval,
'jsmillis': Sk.builtin.jsmillis,
'quit': Sk.builtin.quit,
'exit': Sk.builtin.quit,
'pow' : Sk.builtin.pow,
'globals' : Sk.builtin.globals,
'issubclass' : Sk.builtin.issubclass,
'super': Sk.builtin.superbi,

// Functions below are not implemented
'bytearray': Sk.builtin.bytearray,
'callable': Sk.builtin.callable,
'complex' : Sk.builtin.complex,
'delattr' : Sk.builtin.delattr,
'divmod' : Sk.builtin.divmod,
'eval_$rn$' : Sk.builtin.eval_,
'execfile' : Sk.builtin.execfile,
'format' : Sk.builtin.format,
'frozenset' : Sk.builtin.frozenset,
'help' : Sk.builtin.help,
'iter': Sk.builtin.iter,
'memoryview' : Sk.builtin.memoryview,
'next' : Sk.builtin.next_,
'property' : Sk.builtin.property,
'reload' : Sk.builtin.reload,
'reversed' : Sk.builtin.reversed,
'unichr' : Sk.builtin.unichr,
'vars' : Sk.builtin.vars,
'xrange' : Sk.builtin.xrange,
'apply_$rn$' : Sk.builtin.apply_,
'buffer' : Sk.builtin.buffer,
'coerce' : Sk.builtin.coerce,
'intern' : Sk.builtin.intern,
'enumerate': Sk.builtin.enumerate
};
goog.exportSymbol("Sk.builtins", Sk.builtins);
